
STM32_ADXL345_Mavlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008a40  08008a40  00009a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f2c  08008f2c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f2c  08008f2c  00009f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f34  08008f34  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f34  08008f34  00009f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001d4  08009110  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009110  0000a440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c2  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9c  00000000  00000000  00016bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00018a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000088b  00000000  00000000  00019560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0e8  00000000  00000000  00019deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f77f  00000000  00000000  00034ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fc4  00000000  00000000  00044652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  0011965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a28 	.word	0x08008a28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008a28 	.word	0x08008a28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <ADXL345_Init>:
extern I2C_HandleTypeDef hi2c1;

#define ADXL345_I2C_ADDR  (0x53 << 1)  // HAL использует 8-битный адрес (<<1)

// Инициализация ADXL345 (режим измерения)
HAL_StatusTypeDef ADXL345_Init(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af02      	add	r7, sp, #8
    uint8_t data[2];

    data[0] = 0x2D;   // POWER_CTL register
 8000eea:	232d      	movs	r3, #45	@ 0x2d
 8000eec:	713b      	strb	r3, [r7, #4]
    data[1] = 0x08;   // Measure mode
 8000eee:	2308      	movs	r3, #8
 8000ef0:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 8000ef2:	1d3a      	adds	r2, r7, #4
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2302      	movs	r3, #2
 8000efc:	21a6      	movs	r1, #166	@ 0xa6
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <ADXL345_Init+0x2c>)
 8000f00:	f002 f85e 	bl	8002fc0 <HAL_I2C_Master_Transmit>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001f0 	.word	0x200001f0

08000f14 <ADXL345_ReadAccel>:

// Чтение акселерометра X, Y, Z
HAL_StatusTypeDef ADXL345_ReadAccel(float *x, float *y, float *z) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
    uint8_t reg = 0x32; // DATA_X0 register
 8000f20:	2332      	movs	r3, #50	@ 0x32
 8000f22:	76fb      	strb	r3, [r7, #27]
    uint8_t rx[6] = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	809a      	strh	r2, [r3, #4]

    // Чтение 6 байт подряд: X0,X1,Y0,Y1,Z0,Z1
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f2e:	f107 021b 	add.w	r2, r7, #27
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	21a6      	movs	r1, #166	@ 0xa6
 8000f3c:	4833      	ldr	r0, [pc, #204]	@ (800100c <ADXL345_ReadAccel+0xf8>)
 8000f3e:	f002 f83f 	bl	8002fc0 <HAL_I2C_Master_Transmit>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(ret != HAL_OK) return ret;
 8000f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <ADXL345_ReadAccel+0x42>
 8000f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f54:	e055      	b.n	8001002 <ADXL345_ReadAccel+0xee>

    ret = HAL_I2C_Master_Receive(&hi2c1, ADXL345_I2C_ADDR, rx, 6, HAL_MAX_DELAY);
 8000f56:	f107 0214 	add.w	r2, r7, #20
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2306      	movs	r3, #6
 8000f62:	21a6      	movs	r1, #166	@ 0xa6
 8000f64:	4829      	ldr	r0, [pc, #164]	@ (800100c <ADXL345_ReadAccel+0xf8>)
 8000f66:	f002 f929 	bl	80031bc <HAL_I2C_Master_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(ret != HAL_OK) return ret;
 8000f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <ADXL345_ReadAccel+0x6a>
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f7c:	e041      	b.n	8001002 <ADXL345_ReadAccel+0xee>

    int16_t raw_x = (rx[1] << 8) | rx[0];
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	7d3b      	ldrb	r3, [r7, #20]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t raw_y = (rx[3] << 8) | rx[2];
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t raw_z = (rx[5] << 8) | rx[4];
 8000f9e:	7e7b      	ldrb	r3, [r7, #25]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	843b      	strh	r3, [r7, #32]

    float scale = 0.0039f * 9.81f; // ±2g
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <ADXL345_ReadAccel+0xfc>)
 8000fb0:	61fb      	str	r3, [r7, #28]
    *x = raw_x * scale;
 8000fb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
    *y = raw_y * scale;
 8000fcc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
    *z = raw_z * scale;
 8000fe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001f0 	.word	0x200001f0
 8001010:	3d1cb578 	.word	0x3d1cb578

08001014 <ADXL345_ReadDEVID>:

// Чтение ID чипа
HAL_StatusTypeDef ADXL345_ReadDEVID(uint8_t *devid) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0x00; // DEVID register
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, devid, 1, HAL_MAX_DELAY);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2301      	movs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21a6      	movs	r1, #166	@ 0xa6
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <ADXL345_ReadDEVID+0x34>)
 8001038:	f002 faf2 	bl	8003620 <HAL_I2C_Mem_Read>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001f0 	.word	0x200001f0

0800104c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4053      	eors	r3, r2
 8001062:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	b25a      	sxtb	r2, r3
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	4053      	eors	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21b      	sxth	r3, r3
 8001088:	4053      	eors	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b21b      	sxth	r3, r3
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	b21b      	sxth	r3, r3
 8001094:	4053      	eors	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4053      	eors	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	801a      	strh	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c4:	801a      	strh	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ffe7 	bl	80010b6 <crc_init>
	while (length--) {
 80010e8:	e009      	b.n	80010fe <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f107 020e 	add.w	r2, r7, #14
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffa7 	bl	800104c <crc_accumulate>
	while (length--) {
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	807a      	strh	r2, [r7, #2]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <crc_calculate+0x18>
        }
        return crcTmp;
 8001108:	89fb      	ldrh	r3, [r7, #14]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	4613      	mov	r3, r2
 800111e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	617b      	str	r3, [r7, #20]
	while (length--) {
 8001124:	e007      	b.n	8001136 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	68f9      	ldr	r1, [r7, #12]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff8b 	bl	800104c <crc_accumulate>
	while (length--) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	80fa      	strh	r2, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f2      	bne.n	8001126 <crc_accumulate_buffer+0x14>
        }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a0e      	ldr	r2, [pc, #56]	@ (800119c <mavlink_sha256_init+0x50>)
 8001164:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <mavlink_sha256_init+0x54>)
 800116a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <mavlink_sha256_init+0x58>)
 8001170:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <mavlink_sha256_init+0x5c>)
 8001176:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <mavlink_sha256_init+0x60>)
 800117c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <mavlink_sha256_init+0x64>)
 8001182:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <mavlink_sha256_init+0x68>)
 8001188:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <mavlink_sha256_init+0x6c>)
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	6a09e667 	.word	0x6a09e667
 80011a0:	bb67ae85 	.word	0xbb67ae85
 80011a4:	3c6ef372 	.word	0x3c6ef372
 80011a8:	a54ff53a 	.word	0xa54ff53a
 80011ac:	510e527f 	.word	0x510e527f
 80011b0:	9b05688c 	.word	0x9b05688c
 80011b4:	1f83d9ab 	.word	0x1f83d9ab
 80011b8:	5be0cd19 	.word	0x5be0cd19

080011bc <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80011bc:	b480      	push	{r7}
 80011be:	b0cf      	sub	sp, #316	@ 0x13c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011ca:	6018      	str	r0, [r3, #0]
 80011cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011d4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80011d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 80011e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 80011f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8001206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800120a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8001216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800121a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8001226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800122a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8001236:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800123a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8001246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800124a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800125c:	e016      	b.n	800128c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800125e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001268:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	4413      	add	r3, r2
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001276:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800127a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001286:	3301      	adds	r3, #1
 8001288:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800128c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001290:	2b0f      	cmp	r3, #15
 8001292:	dde4      	ble.n	800125e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8001294:	2310      	movs	r3, #16
 8001296:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800129a:	e069      	b.n	8001370 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800129c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012a0:	1e9a      	subs	r2, r3, #2
 80012a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	ea4f 4273 	mov.w	r2, r3, ror #17
 80012b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012b6:	1e99      	subs	r1, r3, #2
 80012b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012c4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80012c8:	405a      	eors	r2, r3
 80012ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012ce:	1e99      	subs	r1, r3, #2
 80012d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012dc:	0a9b      	lsrs	r3, r3, #10
 80012de:	405a      	eors	r2, r3
 80012e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012e4:	1fd9      	subs	r1, r3, #7
 80012e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012f2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80012f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012f8:	f1a3 010f 	sub.w	r1, r3, #15
 80012fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001308:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800130c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001310:	f1a3 000f 	sub.w	r0, r3, #15
 8001314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001318:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800131c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001320:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001324:	4059      	eors	r1, r3
 8001326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800132a:	f1a3 000f 	sub.w	r0, r3, #15
 800132e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001332:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001336:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800133e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001344:	f1a3 0110 	sub.w	r1, r3, #16
 8001348:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800134c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001350:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001354:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800135a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800135e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001374:	2b3f      	cmp	r3, #63	@ 0x3f
 8001376:	dd91      	ble.n	800129c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800137e:	e078      	b.n	8001472 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001380:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001384:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001388:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800138c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001390:	405a      	eors	r2, r3
 8001392:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001396:	ea4f 6373 	mov.w	r3, r3, ror #25
 800139a:	405a      	eors	r2, r3
 800139c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80013a0:	441a      	add	r2, r3
 80013a2:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 80013a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013aa:	4019      	ands	r1, r3
 80013ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013b0:	43d8      	mvns	r0, r3
 80013b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013b6:	4003      	ands	r3, r0
 80013b8:	404b      	eors	r3, r1
 80013ba:	441a      	add	r2, r3
 80013bc:	496e      	ldr	r1, [pc, #440]	@ (8001578 <mavlink_sha256_calc+0x3bc>)
 80013be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c6:	441a      	add	r2, r3
 80013c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013d0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80013d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013d8:	4413      	add	r3, r2
 80013da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80013de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80013e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80013ee:	405a      	eors	r2, r3
 80013f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80013f8:	405a      	eors	r2, r3
 80013fa:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 80013fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001402:	4059      	eors	r1, r3
 8001404:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001408:	4019      	ands	r1, r3
 800140a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800140e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001412:	4003      	ands	r3, r0
 8001414:	404b      	eors	r3, r1
 8001416:	4413      	add	r3, r2
 8001418:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 800141c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001420:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8001424:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001428:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 800142c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001430:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8001434:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001438:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800143c:	4413      	add	r3, r2
 800143e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8001442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 800144a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800144e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8001452:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001456:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 800145a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800145e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001462:	4413      	add	r3, r2
 8001464:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8001468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800146c:	3301      	adds	r3, #1
 800146e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001476:	2b3f      	cmp	r3, #63	@ 0x3f
 8001478:	dd82      	ble.n	8001380 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800147a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800147e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800148a:	441a      	add	r2, r3
 800148c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001490:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8001498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800149c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014a8:	441a      	add	r2, r3
 80014aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80014b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014c6:	441a      	add	r2, r3
 80014c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80014d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014e4:	441a      	add	r2, r3
 80014e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80014f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001502:	441a      	add	r2, r3
 8001504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001508:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001514:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001520:	441a      	add	r2, r3
 8001522:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001526:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 800152e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001532:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800153e:	441a      	add	r2, r3
 8001540:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001544:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 800154c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001550:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001558:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800155c:	441a      	add	r2, r3
 800155e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001562:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800156a:	bf00      	nop
 800156c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	08008aa0 	.word	0x08008aa0

0800157c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09c      	sub	sp, #112	@ 0x70
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	441a      	add	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d904      	bls.n	80015b4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80015b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80015be:	e057      	b.n	8001670 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 80015c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015c2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80015c6:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d201      	bcs.n	80015d4 <mavlink_sha256_update+0x58>
            l = len;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80015da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015dc:	4413      	add	r3, r2
 80015de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 fa63 	bl	8006aae <memcpy>
	offset += l;
 80015e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80015ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ec:	4413      	add	r3, r2
 80015ee:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 80015f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015f4:	4413      	add	r3, r2
 80015f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001602:	2b40      	cmp	r3, #64	@ 0x40
 8001604:	d134      	bne.n	8001670 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3328      	adds	r3, #40	@ 0x28
 800160a:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 800160c:	2300      	movs	r3, #0
 800160e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001610:	e023      	b.n	800165a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001618:	4413      	add	r3, r2
 800161a:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 800161c:	f107 0210 	add.w	r2, r7, #16
 8001620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8001628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162a:	3303      	adds	r3, #3
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001630:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001634:	1c9a      	adds	r2, r3, #2
 8001636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001638:	3301      	adds	r3, #1
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800163e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001644:	3302      	adds	r3, #2
 8001646:	7812      	ldrb	r2, [r2, #0]
 8001648:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800164a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800164c:	3303      	adds	r3, #3
 800164e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001654:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001656:	3301      	adds	r3, #1
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
 800165a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800165c:	2b0f      	cmp	r3, #15
 800165e:	ddd8      	ble.n	8001612 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fda8 	bl	80011bc <mavlink_sha256_calc>
	    offset = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1a4      	bne.n	80015c0 <mavlink_sha256_update+0x44>
	}
    }
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3770      	adds	r7, #112	@ 0x70
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b098      	sub	sp, #96	@ 0x60
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001694:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001698:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 800169c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016a0:	3301      	adds	r3, #1
 80016a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3308      	adds	r3, #8
 80016a8:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 80016aa:	2380      	movs	r3, #128	@ 0x80
 80016ac:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	3301      	adds	r3, #1
 80016b4:	2247      	movs	r2, #71	@ 0x47
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 f979 	bl	80069b0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016c4:	3307      	adds	r3, #7
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	3360      	adds	r3, #96	@ 0x60
 80016ca:	443b      	add	r3, r7
 80016cc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0a1a      	lsrs	r2, r3, #8
 80016d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016d8:	3306      	adds	r3, #6
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	3360      	adds	r3, #96	@ 0x60
 80016de:	443b      	add	r3, r7
 80016e0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0c1a      	lsrs	r2, r3, #16
 80016ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016ec:	3305      	adds	r3, #5
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3360      	adds	r3, #96	@ 0x60
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0e1a      	lsrs	r2, r3, #24
 80016fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001700:	3304      	adds	r3, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	3360      	adds	r3, #96	@ 0x60
 8001706:	443b      	add	r3, r7
 8001708:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001712:	3303      	adds	r3, #3
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	3360      	adds	r3, #96	@ 0x60
 8001718:	443b      	add	r3, r7
 800171a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0a1a      	lsrs	r2, r3, #8
 8001724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001726:	3302      	adds	r3, #2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	3360      	adds	r3, #96	@ 0x60
 800172c:	443b      	add	r3, r7
 800172e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0c1a      	lsrs	r2, r3, #16
 8001738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800173a:	3301      	adds	r3, #1
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	3360      	adds	r3, #96	@ 0x60
 8001740:	443b      	add	r3, r7
 8001742:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	0e1b      	lsrs	r3, r3, #24
 800174c:	b2d9      	uxtb	r1, r3
 800174e:	f107 020c 	add.w	r2, r7, #12
 8001752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001754:	4413      	add	r3, r2
 8001756:	460a      	mov	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800175a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800175c:	f103 0208 	add.w	r2, r3, #8
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff08 	bl	800157c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800176c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176e:	78da      	ldrb	r2, [r3, #3]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800177a:	7892      	ldrb	r2, [r2, #2]
 800177c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3302      	adds	r3, #2
 8001782:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001784:	7852      	ldrb	r2, [r2, #1]
 8001786:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3303      	adds	r3, #3
 800178c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3304      	adds	r3, #4
 8001796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001798:	79d2      	ldrb	r2, [r2, #7]
 800179a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3305      	adds	r3, #5
 80017a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017a2:	7992      	ldrb	r2, [r2, #6]
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3760      	adds	r7, #96	@ 0x60
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4a03      	ldr	r2, [pc, #12]	@ (80017d4 <mavlink_get_channel_status+0x24>)
 80017c6:	4413      	add	r3, r2
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	2000028c 	.word	0x2000028c

080017d8 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b0a0      	sub	sp, #128	@ 0x80
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <mavlink_sign_packet+0x20>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <mavlink_sign_packet+0x24>
	    return 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e04f      	b.n	800189c <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	785a      	ldrb	r2, [r3, #1]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800180a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	f107 0110 	add.w	r1, r7, #16
 8001816:	2206      	movs	r2, #6
 8001818:	4618      	mov	r0, r3
 800181a:	f005 f948 	bl	8006aae <memcpy>
	signing->timestamp++;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001824:	1c54      	adds	r4, r2, #1
 8001826:	f143 0500 	adc.w	r5, r3, #0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fc89 	bl	800114c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f103 0110 	add.w	r1, r3, #16
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	2220      	movs	r2, #32
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fe98 	bl	800157c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fe91 	bl	800157c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800185a:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe88 	bl	800157c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	2202      	movs	r2, #2
 8001872:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe80 	bl	800157c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	2207      	movs	r2, #7
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe79 	bl	800157c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1dda      	adds	r2, r3, #7
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fef3 	bl	8001680 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 800189a:	230d      	movs	r3, #13
}
 800189c:	4618      	mov	r0, r3
 800189e:	3780      	adds	r7, #128	@ 0x80
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}

080018a4 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80018b0:	e002      	b.n	80018b8 <_mav_trim_payload+0x14>
		length--;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d906      	bls.n	80018cc <_mav_trim_payload+0x28>
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f2      	beq.n	80018b2 <_mav_trim_payload+0xe>
	}
	return length;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80018da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018dc:	b08f      	sub	sp, #60	@ 0x3c
 80018de:	af04      	add	r7, sp, #16
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	72fb      	strb	r3, [r7, #11]
 80018e8:	4613      	mov	r3, r2
 80018ea:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7b1b      	ldrb	r3, [r3, #12]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <mavlink_finalize_message_buffer+0x4e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <mavlink_finalize_message_buffer+0x4e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <mavlink_finalize_message_buffer+0x4e>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <mavlink_finalize_message_buffer+0x50>
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800192e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 800193a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <mavlink_finalize_message_buffer+0x6c>
 8001942:	230d      	movs	r3, #13
 8001944:	e000      	b.n	8001948 <mavlink_finalize_message_buffer+0x6e>
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800194c:	230a      	movs	r3, #10
 800194e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	22fe      	movs	r2, #254	@ 0xfe
 800195e:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001960:	2306      	movs	r3, #6
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001966:	e002      	b.n	800196e <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	22fd      	movs	r2, #253	@ 0xfd
 800196c:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800196e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <mavlink_finalize_message_buffer+0xb2>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	330c      	adds	r3, #12
 800197a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff8f 	bl	80018a4 <_mav_trim_payload>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	e001      	b.n	8001990 <mavlink_finalize_message_buffer+0xb6>
 800198c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	7afa      	ldrb	r2, [r7, #11]
 8001998:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	7aba      	ldrb	r2, [r7, #10]
 800199e:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80019a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	799a      	ldrb	r2, [r3, #6]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	799b      	ldrb	r3, [r3, #6]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80019e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d013      	beq.n	8001a12 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	799b      	ldrb	r3, [r3, #6]
 80019ee:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	79db      	ldrb	r3, [r3, #7]
 80019f4:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	7a1b      	ldrb	r3, [r3, #8]
 80019fa:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	7a5a      	ldrb	r2, [r3, #9]
 8001a00:	7a99      	ldrb	r1, [r3, #10]
 8001a02:	0209      	lsls	r1, r1, #8
 8001a04:	430a      	orrs	r2, r1
 8001a06:	7adb      	ldrb	r3, [r3, #11]
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	777b      	strb	r3, [r7, #29]
 8001a10:	e030      	b.n	8001a74 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	795b      	ldrb	r3, [r3, #5]
 8001a1c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	799b      	ldrb	r3, [r3, #6]
 8001a22:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	79db      	ldrb	r3, [r3, #7]
 8001a28:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	7a1b      	ldrb	r3, [r3, #8]
 8001a2e:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7a5a      	ldrb	r2, [r3, #9]
 8001a34:	7a99      	ldrb	r1, [r3, #10]
 8001a36:	0209      	lsls	r1, r1, #8
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	7adb      	ldrb	r3, [r3, #11]
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	7a5a      	ldrb	r2, [r3, #9]
 8001a48:	7a99      	ldrb	r1, [r3, #10]
 8001a4a:	0209      	lsls	r1, r1, #8
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	7adb      	ldrb	r3, [r3, #11]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4313      	orrs	r3, r2
 8001a54:	121b      	asrs	r3, r3, #8
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7a5a      	ldrb	r2, [r3, #9]
 8001a60:	7a99      	ldrb	r1, [r3, #10]
 8001a62:	0209      	lsls	r1, r1, #8
 8001a64:	430a      	orrs	r2, r1
 8001a66:	7adb      	ldrb	r3, [r3, #11]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	141b      	asrs	r3, r3, #16
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	3301      	adds	r3, #1
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fb23 	bl	80010d2 <crc_calculate>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f103 010c 	add.w	r1, r3, #12
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f107 0316 	add.w	r3, r7, #22
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fb36 	bl	8001112 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001aa6:	f107 0216 	add.w	r2, r7, #22
 8001aaa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff facb 	bl	800104c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001ab6:	8af9      	ldrh	r1, [r7, #22]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	330c      	adds	r3, #12
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	78d2      	ldrb	r2, [r2, #3]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001ac6:	8afb      	ldrh	r3, [r7, #22]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b299      	uxth	r1, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f103 020c 	add.w	r2, r3, #12
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	78db      	ldrb	r3, [r3, #3]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001ade:	8afa      	ldrh	r2, [r7, #22]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001ae4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01a      	beq.n	8001b22 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	310c      	adds	r1, #12
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001b06:	4401      	add	r1, r0
 8001b08:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 8001b0c:	f107 0018 	add.w	r0, r7, #24
 8001b10:	9102      	str	r1, [sp, #8]
 8001b12:	9201      	str	r2, [sp, #4]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	4633      	mov	r3, r6
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff fe5b 	bl	80017d8 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	78db      	ldrb	r3, [r3, #3]
 8001b26:	461a      	mov	r2, r3
 8001b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	372c      	adds	r7, #44	@ 0x2c
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b48 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	70fb      	strb	r3, [r7, #3]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70bb      	strb	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe23 	bl	80017b0 <mavlink_get_channel_status>
 8001b6a:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001b6c:	78ba      	ldrb	r2, [r7, #2]
 8001b6e:	78f9      	ldrb	r1, [r7, #3]
 8001b70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	7f3b      	ldrb	r3, [r7, #28]
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	7e3b      	ldrb	r3, [r7, #24]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff feaa 	bl	80018da <mavlink_finalize_message_buffer>
 8001b86:	4603      	mov	r3, r0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	70fb      	strb	r3, [r7, #3]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70bb      	strb	r3, [r7, #2]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001baa:	78ba      	ldrb	r2, [r7, #2]
 8001bac:	78f9      	ldrb	r1, [r7, #3]
 8001bae:	7d3b      	ldrb	r3, [r7, #20]
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	7c3b      	ldrb	r3, [r7, #16]
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffc3 	bl	8001b48 <mavlink_finalize_message_chan>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2bfe      	cmp	r3, #254	@ 0xfe
 8001be2:	d13a      	bne.n	8001c5a <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001be8:	2305      	movs	r3, #5
 8001bea:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	789a      	ldrb	r2, [r3, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	7992      	ldrb	r2, [r2, #6]
 8001c04:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3303      	adds	r3, #3
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	79d2      	ldrb	r2, [r2, #7]
 8001c0e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	7a12      	ldrb	r2, [r2, #8]
 8001c18:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	7a5a      	ldrb	r2, [r3, #9]
 8001c1e:	7a99      	ldrb	r1, [r3, #10]
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	430a      	orrs	r2, r1
 8001c24:	7adb      	ldrb	r3, [r3, #11]
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3305      	adds	r3, #5
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1d98      	adds	r0, r3, #6
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f103 010c 	add.w	r1, r3, #12
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	78db      	ldrb	r3, [r3, #3]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f004 ff33 	bl	8006aae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001c48:	7dbb      	ldrb	r3, [r7, #22]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	78d2      	ldrb	r2, [r2, #3]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3301      	adds	r3, #1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e06c      	b.n	8001d34 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe1e 	bl	80018a4 <_mav_trim_payload>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001c6c:	2309      	movs	r3, #9
 8001c6e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	789a      	ldrb	r2, [r3, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3302      	adds	r3, #2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	7912      	ldrb	r2, [r2, #4]
 8001c88:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	7952      	ldrb	r2, [r2, #5]
 8001c92:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	7992      	ldrb	r2, [r2, #6]
 8001c9c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3305      	adds	r3, #5
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	79d2      	ldrb	r2, [r2, #7]
 8001ca6:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3306      	adds	r3, #6
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	7a12      	ldrb	r2, [r2, #8]
 8001cb0:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7a5a      	ldrb	r2, [r3, #9]
 8001cb6:	7a99      	ldrb	r1, [r3, #10]
 8001cb8:	0209      	lsls	r1, r1, #8
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	7adb      	ldrb	r3, [r3, #11]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3307      	adds	r3, #7
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	7a5a      	ldrb	r2, [r3, #9]
 8001cd0:	7a99      	ldrb	r1, [r3, #10]
 8001cd2:	0209      	lsls	r1, r1, #8
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	7adb      	ldrb	r3, [r3, #11]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	0a1a      	lsrs	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7a5a      	ldrb	r2, [r3, #9]
 8001cea:	7a99      	ldrb	r1, [r3, #10]
 8001cec:	0209      	lsls	r1, r1, #8
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	7adb      	ldrb	r3, [r3, #11]
 8001cf2:	041b      	lsls	r3, r3, #16
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	0c1a      	lsrs	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3309      	adds	r3, #9
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f103 000a 	add.w	r0, r3, #10
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f004 fece 	bl	8006aae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001d12:	7dba      	ldrb	r2, [r7, #22]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4413      	add	r3, r2
 8001d18:	3301      	adds	r3, #1
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <mavlink_msg_to_send_buffer+0x164>
 8001d2c:	230d      	movs	r3, #13
 8001d2e:	e000      	b.n	8001d32 <mavlink_msg_to_send_buffer+0x166>
 8001d30:	2300      	movs	r3, #0
 8001d32:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1c98      	adds	r0, r3, #2
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001d62:	7dfa      	ldrb	r2, [r7, #23]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f004 fea2 	bl	8006aae <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001d6a:	7dbb      	ldrb	r3, [r7, #22]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3303      	adds	r3, #3
 8001d80:	b29b      	uxth	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <mavlink_msg_ins_accel_pack>:
 * @param z  Acceleration Z (m/s²)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_ins_accel_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float x, float y, float z)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b08e      	sub	sp, #56	@ 0x38
 8001d8e:	af02      	add	r7, sp, #8
 8001d90:	4603      	mov	r3, r0
 8001d92:	613a      	str	r2, [r7, #16]
 8001d94:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d98:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d9c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001da0:	75fb      	strb	r3, [r7, #23]
 8001da2:	460b      	mov	r3, r1
 8001da4:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 16, z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_INS_ACCEL_LEN);
#else
    mavlink_ins_accel_t packet;
    packet.time_usec = time_usec;
 8001da6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001daa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    packet.x = x;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	623b      	str	r3, [r7, #32]
    packet.y = y;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    packet.z = z;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_INS_ACCEL_LEN);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	f107 0118 	add.w	r1, r7, #24
 8001dc2:	2214      	movs	r2, #20
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 fe72 	bl	8006aae <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_INS_ACCEL;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f062 0237 	orn	r2, r2, #55	@ 0x37
 8001dd2:	725a      	strb	r2, [r3, #9]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	729a      	strb	r2, [r3, #10]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_INS_ACCEL_MIN_LEN, MAVLINK_MSG_ID_INS_ACCEL_LEN, MAVLINK_MSG_ID_INS_ACCEL_CRC);
 8001ddc:	7dba      	ldrb	r2, [r7, #22]
 8001dde:	7df9      	ldrb	r1, [r7, #23]
 8001de0:	231f      	movs	r3, #31
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2314      	movs	r3, #20
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2314      	movs	r3, #20
 8001dea:	6938      	ldr	r0, [r7, #16]
 8001dec:	f7ff fed0 	bl	8001b90 <mavlink_finalize_message>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3730      	adds	r7, #48	@ 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	f5ad 7d38 	sub.w	sp, sp, #736	@ 0x2e0
 8001e04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e06:	f000 fbbf 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0a:	f000 f8c1 	bl	8001f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0e:	f000 f977 	bl	8002100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e12:	f000 f94b 	bl	80020ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e16:	f000 f91b 	bl	8002050 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 8001e1a:	f7ff f863 	bl	8000ee4 <ADXL345_Init>
  uint8_t buf[MAVLINK_MAX_PACKET_LEN];
  mavlink_message_t msg;


  //uint8_t devid = ADXL345_ReadDEVID();
  uint8_t devid = 0;
 8001e1e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001e22:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
  if (ADXL345_ReadDEVID(&devid) == HAL_OK) {
 8001e2a:	f107 037f 	add.w	r3, r7, #127	@ 0x7f
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f8f0 	bl	8001014 <ADXL345_ReadDEVID>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <main+0x52>
      printf("ADXL345 DEVID: 0x%02X\n", devid);
 8001e3a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001e3e:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	484d      	ldr	r0, [pc, #308]	@ (8001f7c <main+0x180>)
 8001e48:	f004 fc12 	bl	8006670 <iprintf>
 8001e4c:	e002      	b.n	8001e54 <main+0x58>
  } else {
      printf("Ошибка чтения DEVID\n");
 8001e4e:	484c      	ldr	r0, [pc, #304]	@ (8001f80 <main+0x184>)
 8001e50:	f004 fc76 	bl	8006740 <puts>
  }

  char msssg[50];
  int len = snprintf(msssg, sizeof(msssg), "ADXL345 DEVID: 0x%X\r\n", devid);
 8001e54:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001e58:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001e62:	4a48      	ldr	r2, [pc, #288]	@ (8001f84 <main+0x188>)
 8001e64:	2132      	movs	r1, #50	@ 0x32
 8001e66:	f004 fc73 	bl	8006750 <sniprintf>
 8001e6a:	f8c7 02cc 	str.w	r0, [r7, #716]	@ 0x2cc
  HAL_UART_Transmit(&huart2, (uint8_t*)msssg, len, HAL_MAX_DELAY);
 8001e6e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e7c:	4842      	ldr	r0, [pc, #264]	@ (8001f88 <main+0x18c>)
 8001e7e:	f002 ff17 	bl	8004cb0 <HAL_UART_Transmit>
    /* USER CODE BEGIN 3 */

	  {
	          float ax, ay, az;

	          uint64_t time_usec = HAL_GetTick() * 1000; // миллисекунды → мкс
 8001e82:	f000 fbe7 	bl	8002654 <HAL_GetTick>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	469a      	mov	sl, r3
 8001e94:	4693      	mov	fp, r2
 8001e96:	e9c7 abb0 	strd	sl, fp, [r7, #704]	@ 0x2c0

	          ADXL345_ReadAccel(&ax, &ay, &az);
 8001e9a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e9e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001ea2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f834 	bl	8000f14 <ADXL345_ReadAccel>

	          mavlink_msg_ins_accel_pack(
 8001eac:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001eb0:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001ebc:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001ec8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001ed4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8001ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8001edc:	eeb0 1a66 	vmov.f32	s2, s13
 8001ee0:	eef0 0a47 	vmov.f32	s1, s14
 8001ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee8:	460a      	mov	r2, r1
 8001eea:	21c8      	movs	r1, #200	@ 0xc8
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ff4c 	bl	8001d8a <mavlink_msg_ins_accel_pack>
	              &msg,
	              time_usec,
	              ax, ay, az
	          );

	          uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 8001ef2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001ef6:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe65 	bl	8001bcc <mavlink_msg_to_send_buffer>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f8a7 32be 	strh.w	r3, [r7, #702]	@ 0x2be
	          //HAL_UART_Transmit(&huart2, buf, len, HAL_MAX_DELAY);

	          char buf[64];
	          sprintf(buf, "%.3f %.3f %.3f\n", ax, ay, az);
 8001f08:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001f0c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb20 	bl	8000558 <__aeabi_f2d>
 8001f18:	4680      	mov	r8, r0
 8001f1a:	4689      	mov	r9, r1
 8001f1c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001f20:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb16 	bl	8000558 <__aeabi_f2d>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001f34:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb0c 	bl	8000558 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4638      	mov	r0, r7
 8001f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f4a:	e9cd 4500 	strd	r4, r5, [sp]
 8001f4e:	4642      	mov	r2, r8
 8001f50:	464b      	mov	r3, r9
 8001f52:	490e      	ldr	r1, [pc, #56]	@ (8001f8c <main+0x190>)
 8001f54:	f004 fc32 	bl	80067bc <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001f58:	463b      	mov	r3, r7
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe f990 	bl	8000280 <strlen>
 8001f60:	4603      	mov	r3, r0
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4639      	mov	r1, r7
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f6a:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <main+0x18c>)
 8001f6c:	f002 fea0 	bl	8004cb0 <HAL_UART_Transmit>

	          HAL_Delay(20); // 50 Гц
 8001f70:	2014      	movs	r0, #20
 8001f72:	f000 fb7b 	bl	800266c <HAL_Delay>
	  {
 8001f76:	bf00      	nop
 8001f78:	e783      	b.n	8001e82 <main+0x86>
 8001f7a:	bf00      	nop
 8001f7c:	08008a40 	.word	0x08008a40
 8001f80:	08008a58 	.word	0x08008a58
 8001f84:	08008a78 	.word	0x08008a78
 8001f88:	20000244 	.word	0x20000244
 8001f8c:	08008a90 	.word	0x08008a90

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	@ 0x50
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2230      	movs	r2, #48	@ 0x30
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fd06 	bl	80069b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <SystemClock_Config+0xb8>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <SystemClock_Config+0xb8>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <SystemClock_Config+0xb8>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <SystemClock_Config+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <SystemClock_Config+0xbc>)
 8001fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <SystemClock_Config+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	4618      	mov	r0, r3
 8002006:	f002 f9ab 	bl	8004360 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002010:	f000 f8b8 	bl	8002184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	230f      	movs	r3, #15
 8002016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fc0e 	bl	8004850 <HAL_RCC_ClockConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800203a:	f000 f8a3 	bl	8002184 <Error_Handler>
  }
}
 800203e:	bf00      	nop
 8002040:	3750      	adds	r7, #80	@ 0x50
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000

08002050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002056:	4a13      	ldr	r2, [pc, #76]	@ (80020a4 <MX_I2C1_Init+0x54>)
 8002058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_I2C1_Init+0x50>)
 800205c:	4a12      	ldr	r2, [pc, #72]	@ (80020a8 <MX_I2C1_Init+0x58>)
 800205e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_I2C1_Init+0x50>)
 800206e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_I2C1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_I2C1_Init+0x50>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208c:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <MX_I2C1_Init+0x50>)
 800208e:	f000 fe53 	bl	8002d38 <HAL_I2C_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002098:	f000 f874 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200001f0 	.word	0x200001f0
 80020a4:	40005400 	.word	0x40005400
 80020a8:	00061a80 	.word	0x00061a80

080020ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <MX_USART2_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020e4:	f002 fd94 	bl	8004c10 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f000 f849 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000244 	.word	0x20000244
 80020fc:	40004400 	.word	0x40004400

08002100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b18      	ldr	r3, [pc, #96]	@ (800217c <MX_GPIO_Init+0x7c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a17      	ldr	r2, [pc, #92]	@ (800217c <MX_GPIO_Init+0x7c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <MX_GPIO_Init+0x7c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_GPIO_Init+0x7c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a10      	ldr	r2, [pc, #64]	@ (800217c <MX_GPIO_Init+0x7c>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_GPIO_Init+0x7c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	2110      	movs	r1, #16
 8002152:	480b      	ldr	r0, [pc, #44]	@ (8002180 <MX_GPIO_Init+0x80>)
 8002154:	f000 fdd6 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002158:	2310      	movs	r3, #16
 800215a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4619      	mov	r1, r3
 800216e:	4804      	ldr	r0, [pc, #16]	@ (8002180 <MX_GPIO_Init+0x80>)
 8002170:	f000 fc44 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <Error_Handler+0x8>

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <HAL_MspInit+0x4c>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <HAL_MspInit+0x4c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_I2C_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12b      	bne.n	800225a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23c0      	movs	r3, #192	@ 0xc0
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002222:	2312      	movs	r3, #18
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222e:	2304      	movs	r3, #4
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <HAL_I2C_MspInit+0x8c>)
 800223a:	f000 fbdf 	bl	80029fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40005400 	.word	0x40005400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400

08002270 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_UART_MspInit+0x94>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d133      	bne.n	80022fa <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_UART_MspInit+0x98>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <HAL_UART_MspInit+0x98>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ca:	230c      	movs	r3, #12
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022da:	2307      	movs	r3, #7
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4809      	ldr	r0, [pc, #36]	@ (800230c <HAL_UART_MspInit+0x9c>)
 80022e6:	f000 fb89 	bl	80029fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2026      	movs	r0, #38	@ 0x26
 80022f0:	f000 fabb 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022f4:	2026      	movs	r0, #38	@ 0x26
 80022f6:	f000 fad4 	bl	80028a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40004400 	.word	0x40004400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <NMI_Handler+0x4>

08002318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <MemManage_Handler+0x4>

08002328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <UsageFault_Handler+0x4>

08002338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002366:	f000 f961 	bl	800262c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <USART2_IRQHandler+0x10>)
 8002376:	f002 fd27 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000244 	.word	0x20000244

08002384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_kill>:

int _kill(int pid, int sig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800239e:	f004 fb59 	bl	8006a54 <__errno>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2216      	movs	r2, #22
 80023a6:	601a      	str	r2, [r3, #0]
  return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe7 	bl	8002394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023c6:	bf00      	nop
 80023c8:	e7fd      	b.n	80023c6 <_exit+0x12>

080023ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e00a      	b.n	80023f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023dc:	f3af 8000 	nop.w
 80023e0:	4601      	mov	r1, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	60ba      	str	r2, [r7, #8]
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbf0      	blt.n	80023dc <_read+0x12>
  }

  return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e009      	b.n	800242a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	60ba      	str	r2, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3301      	adds	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	dbf1      	blt.n	8002416 <_write+0x12>
  }
  return len;
 8002432:	687b      	ldr	r3, [r7, #4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <_close>:

int _close(int file)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002464:	605a      	str	r2, [r3, #4]
  return 0;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_isatty>:

int _isatty(int file)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f004 fabe 	bl	8006a54 <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20010000 	.word	0x20010000
 8002504:	00000400 	.word	0x00000400
 8002508:	200002ec 	.word	0x200002ec
 800250c:	20000440 	.word	0x20000440

08002510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800256c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002538:	f7ff ffea 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	@ (8002570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	@ (8002574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f004 fa7d 	bl	8006a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7ff fc49 	bl	8001dfc <main>
  bx  lr    
 800256a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002578:	08008f3c 	.word	0x08008f3c
  ldr r2, =_sbss
 800257c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002580:	20000440 	.word	0x20000440

08002584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <HAL_Init+0x40>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_Init+0x40>)
 800259e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <HAL_Init+0x40>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 f94f 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b6:	200f      	movs	r0, #15
 80025b8:	f000 f808 	bl	80025cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7ff fde8 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00

080025cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d4:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_InitTick+0x54>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_InitTick+0x58>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f967 	bl	80028be <HAL_SYSTICK_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00e      	b.n	8002618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d80a      	bhi.n	8002616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002600:	2200      	movs	r2, #0
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002608:	f000 f92f 	bl	800286a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800260c:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <HAL_InitTick+0x5c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000000 	.word	0x20000000
 8002624:	20000008 	.word	0x20000008
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_IncTick+0x20>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_IncTick+0x24>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4413      	add	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_IncTick+0x24>)
 800263e:	6013      	str	r3, [r2, #0]
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000008 	.word	0x20000008
 8002650:	200002f0 	.word	0x200002f0

08002654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return uwTick;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_GetTick+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	200002f0 	.word	0x200002f0

0800266c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff ffee 	bl	8002654 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002684:	d005      	beq.n	8002692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_Delay+0x44>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002692:	bf00      	nop
 8002694:	f7ff ffde 	bl	8002654 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d8f7      	bhi.n	8002694 <HAL_Delay+0x28>
  {
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000008 	.word	0x20000008

080026b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026d0:	4013      	ands	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002700:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <__NVIC_GetPriorityGrouping+0x18>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f003 0307 	and.w	r3, r3, #7
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db0b      	blt.n	8002742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	4907      	ldr	r1, [pc, #28]	@ (8002750 <__NVIC_EnableIRQ+0x38>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100

08002754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	6039      	str	r1, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	db0a      	blt.n	800277e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	490c      	ldr	r1, [pc, #48]	@ (80027a0 <__NVIC_SetPriority+0x4c>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800277c:	e00a      	b.n	8002794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <__NVIC_SetPriority+0x50>)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3b04      	subs	r3, #4
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	440b      	add	r3, r1
 8002792:	761a      	strb	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1c3 0307 	rsb	r3, r3, #7
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf28      	it	cs
 80027c6:	2304      	movcs	r3, #4
 80027c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d902      	bls.n	80027d8 <NVIC_EncodePriority+0x30>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b03      	subs	r3, #3
 80027d6:	e000      	b.n	80027da <NVIC_EncodePriority+0x32>
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43d9      	mvns	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	4313      	orrs	r3, r2
         );
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002834:	f7ff ff8e 	bl	8002754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff29 	bl	80026b4 <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff3e 	bl	80026fc <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff8e 	bl	80027a8 <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5d 	bl	8002754 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff31 	bl	8002718 <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa2 	bl	8002810 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff feb6 	bl	8002654 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d008      	beq.n	8002908 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2280      	movs	r2, #128	@ 0x80
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e052      	b.n	80029ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0216 	bic.w	r2, r2, #22
 8002916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002926:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <HAL_DMA_Abort+0x62>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0208 	bic.w	r2, r2, #8
 8002946:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002958:	e013      	b.n	8002982 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295a:	f7ff fe7b 	bl	8002654 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b05      	cmp	r3, #5
 8002966:	d90c      	bls.n	8002982 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e015      	b.n	80029ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e4      	bne.n	800295a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	223f      	movs	r2, #63	@ 0x3f
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d004      	beq.n	80029d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e00c      	b.n	80029ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2205      	movs	r2, #5
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e159      	b.n	8002ccc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 8148 	bne.w	8002cc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d005      	beq.n	8002a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d017      	beq.n	8002aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d123      	bne.n	8002b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a2 	beq.w	8002cc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b57      	ldr	r3, [pc, #348]	@ (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	4a56      	ldr	r2, [pc, #344]	@ (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b92:	4b54      	ldr	r3, [pc, #336]	@ (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9e:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a49      	ldr	r2, [pc, #292]	@ (8002cec <HAL_GPIO_Init+0x2f0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x202>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a48      	ldr	r2, [pc, #288]	@ (8002cf0 <HAL_GPIO_Init+0x2f4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x1fe>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a47      	ldr	r2, [pc, #284]	@ (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x1fa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a46      	ldr	r2, [pc, #280]	@ (8002cf8 <HAL_GPIO_Init+0x2fc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x1f6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a45      	ldr	r2, [pc, #276]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x1f2>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	@ (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a2f      	ldr	r2, [pc, #188]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c72:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c96:	4a1a      	ldr	r2, [pc, #104]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9c:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f aea2 	bls.w	8002a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e12b      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fa3e 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	@ 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f001 ff10 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a81      	ldr	r2, [pc, #516]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d807      	bhi.n	8002dbc <HAL_I2C_Init+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a80      	ldr	r2, [pc, #512]	@ (8002fb0 <HAL_I2C_Init+0x278>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e006      	b.n	8002dca <HAL_I2C_Init+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb4 <HAL_I2C_Init+0x27c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e7      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a78      	ldr	r2, [pc, #480]	@ (8002fb8 <HAL_I2C_Init+0x280>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <HAL_I2C_Init+0xd4>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	e009      	b.n	8002e20 <HAL_I2C_Init+0xe8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	4a69      	ldr	r2, [pc, #420]	@ (8002fbc <HAL_I2C_Init+0x284>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	495c      	ldr	r1, [pc, #368]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d819      	bhi.n	8002e74 <HAL_I2C_Init+0x13c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e59      	subs	r1, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e54:	400b      	ands	r3, r1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_I2C_Init+0x138>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e59      	subs	r1, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	e051      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e04f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_I2C_Init+0x168>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_I2C_Init+0x18e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x196>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e022      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_I2C_Init+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e58      	subs	r0, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6911      	ldr	r1, [r2, #16]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	000186a0 	.word	0x000186a0
 8002fb0:	001e847f 	.word	0x001e847f
 8002fb4:	003d08ff 	.word	0x003d08ff
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff fb3e 	bl	8002654 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f040 80e0 	bne.w	80031a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4970      	ldr	r1, [pc, #448]	@ (80031b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 ff7e 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0d3      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_I2C_Master_Transmit+0x50>
 800300c:	2302      	movs	r3, #2
 800300e:	e0cc      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d007      	beq.n	8003036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	@ 0x21
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2210      	movs	r2, #16
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a50      	ldr	r2, [pc, #320]	@ (80031b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fd00 	bl	8003a84 <I2C_MasterRequestWrite>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08d      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a4:	e066      	b.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f001 f83c 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06b      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d11b      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x188>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f001 f833 	bl	80041b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e01a      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d194      	bne.n	80030a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	00100002 	.word	0x00100002
 80031b8:	ffff0000 	.word	0xffff0000

080031bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
 80031cc:	4613      	mov	r3, r2
 80031ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff fa40 	bl	8002654 <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 8217 	bne.w	8003612 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	497c      	ldr	r1, [pc, #496]	@ (80033e0 <HAL_I2C_Master_Receive+0x224>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fe80 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	e20a      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_I2C_Master_Receive+0x50>
 8003208:	2302      	movs	r3, #2
 800320a:	e203      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d007      	beq.n	8003232 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2222      	movs	r2, #34	@ 0x22
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2210      	movs	r2, #16
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	893a      	ldrh	r2, [r7, #8]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a5c      	ldr	r2, [pc, #368]	@ (80033e4 <HAL_I2C_Master_Receive+0x228>)
 8003272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fc84 	bl	8003b88 <I2C_MasterRequestRead>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c4      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e198      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11b      	bne.n	80032fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e178      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d11b      	bne.n	800333a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003310:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	e158      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003360:	e144      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	2b03      	cmp	r3, #3
 8003368:	f200 80f1 	bhi.w	800354e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b01      	cmp	r3, #1
 8003372:	d123      	bne.n	80033bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003376:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 ff65 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e145      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033ba:	e117      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d14e      	bne.n	8003462 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	4906      	ldr	r1, [pc, #24]	@ (80033e8 <HAL_I2C_Master_Receive+0x22c>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fd90 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e11a      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
 80033de:	bf00      	nop
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000
 80033e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003460:	e0c4      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	2200      	movs	r2, #0
 800346a:	496c      	ldr	r1, [pc, #432]	@ (800361c <HAL_I2C_Master_Receive+0x460>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fd41 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0cb      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	4955      	ldr	r1, [pc, #340]	@ (800361c <HAL_I2C_Master_Receive+0x460>)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fd13 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e09d      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800354c:	e04e      	b.n	80035ec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fe78 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e058      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d124      	bne.n	80035ec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f aeb6 	bne.w	8003362 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3728      	adds	r7, #40	@ 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	00010004 	.word	0x00010004

08003620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800363a:	f7ff f80b 	bl	8002654 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	f040 8214 	bne.w	8003a76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2319      	movs	r3, #25
 8003654:	2201      	movs	r2, #1
 8003656:	497b      	ldr	r1, [pc, #492]	@ (8003844 <HAL_I2C_Mem_Read+0x224>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fc4b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	e207      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Mem_Read+0x56>
 8003672:	2302      	movs	r3, #2
 8003674:	e200      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d007      	beq.n	800369c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2222      	movs	r2, #34	@ 0x22
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a5b      	ldr	r2, [pc, #364]	@ (8003848 <HAL_I2C_Mem_Read+0x228>)
 80036dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036de:	88f8      	ldrh	r0, [r7, #6]
 80036e0:	893a      	ldrh	r2, [r7, #8]
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4603      	mov	r3, r0
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb18 	bl	8003d24 <I2C_RequestMemoryRead>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1bc      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e190      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	2b01      	cmp	r3, #1
 8003734:	d11b      	bne.n	800376e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e170      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	2b02      	cmp	r3, #2
 8003774:	d11b      	bne.n	80037ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003784:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	e150      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037c4:	e144      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f200 80f1 	bhi.w	80039b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d123      	bne.n	8003820 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fd33 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e145      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800381e:	e117      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b02      	cmp	r3, #2
 8003826:	d14e      	bne.n	80038c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382e:	2200      	movs	r2, #0
 8003830:	4906      	ldr	r1, [pc, #24]	@ (800384c <HAL_I2C_Mem_Read+0x22c>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fb5e 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e11a      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
 8003842:	bf00      	nop
 8003844:	00100002 	.word	0x00100002
 8003848:	ffff0000 	.word	0xffff0000
 800384c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038c4:	e0c4      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	2200      	movs	r2, #0
 80038ce:	496c      	ldr	r1, [pc, #432]	@ (8003a80 <HAL_I2C_Mem_Read+0x460>)
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb0f 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0cb      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2200      	movs	r2, #0
 800392a:	4955      	ldr	r1, [pc, #340]	@ (8003a80 <HAL_I2C_Mem_Read+0x460>)
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fae1 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e09d      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b0:	e04e      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fc46 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e058      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d124      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d107      	bne.n	8003a1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f aeb6 	bne.w	80037c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3728      	adds	r7, #40	@ 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	00010004 	.word	0x00010004

08003a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d006      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d003      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aac:	d108      	bne.n	8003ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00b      	b.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d107      	bne.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fa05 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d103      	bne.n	8003b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e035      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b14:	d108      	bne.n	8003b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	e01b      	b.n	8003b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	11db      	asrs	r3, r3, #7
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f063 030f 	orn	r3, r3, #15
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	490e      	ldr	r1, [pc, #56]	@ (8003b80 <I2C_MasterRequestWrite+0xfc>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa4e 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e010      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b56:	897b      	ldrh	r3, [r7, #10]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4907      	ldr	r1, [pc, #28]	@ (8003b84 <I2C_MasterRequestWrite+0x100>)
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa3e 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00010008 	.word	0x00010008
 8003b84:	00010002 	.word	0x00010002

08003b88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	460b      	mov	r3, r1
 8003b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d006      	beq.n	8003bc2 <I2C_MasterRequestRead+0x3a>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d003      	beq.n	8003bc2 <I2C_MasterRequestRead+0x3a>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bc0:	d108      	bne.n	8003bd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e00b      	b.n	8003bec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	2b11      	cmp	r3, #17
 8003bda:	d107      	bne.n	8003bec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f97b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d103      	bne.n	8003c1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e079      	b.n	8003d14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c28:	d108      	bne.n	8003c3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e05f      	b.n	8003cfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c3c:	897b      	ldrh	r3, [r7, #10]
 8003c3e:	11db      	asrs	r3, r3, #7
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0306 	and.w	r3, r3, #6
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f063 030f 	orn	r3, r3, #15
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4930      	ldr	r1, [pc, #192]	@ (8003d1c <I2C_MasterRequestRead+0x194>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f9c4 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e054      	b.n	8003d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c6a:	897b      	ldrh	r3, [r7, #10]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4929      	ldr	r1, [pc, #164]	@ (8003d20 <I2C_MasterRequestRead+0x198>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f9b4 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e044      	b.n	8003d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f919 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd6:	d103      	bne.n	8003ce0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e017      	b.n	8003d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ce4:	897b      	ldrh	r3, [r7, #10]
 8003ce6:	11db      	asrs	r3, r3, #7
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 0306 	and.w	r3, r3, #6
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f063 030e 	orn	r3, r3, #14
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4907      	ldr	r1, [pc, #28]	@ (8003d20 <I2C_MasterRequestRead+0x198>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f970 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	00010008 	.word	0x00010008
 8003d20:	00010002 	.word	0x00010002

08003d24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8c2 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d103      	bne.n	8003d8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0aa      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d92:	897b      	ldrh	r3, [r7, #10]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	4952      	ldr	r1, [pc, #328]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f91d 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e097      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f9a8 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e076      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	e021      	b.n	8003e50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f982 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e050      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e46:	893b      	ldrh	r3, [r7, #8]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	6a39      	ldr	r1, [r7, #32]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f967 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d107      	bne.n	8003e78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e035      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f82b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e013      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	6a3a      	ldr	r2, [r7, #32]
 8003ed4:	4906      	ldr	r1, [pc, #24]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f886 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010002 	.word	0x00010002

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e048      	b.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f0c:	d044      	beq.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fba1 	bl	8002654 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d139      	bne.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10d      	bne.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	e00c      	b.n	8003f64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d116      	bne.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e023      	b.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10d      	bne.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	e00c      	b.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d093      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff6:	e071      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d123      	bne.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0204 	orr.w	r2, r3, #4
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e067      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004056:	d041      	beq.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe fafc 	bl	8002654 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d136      	bne.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d10c      	bne.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	e00b      	b.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e021      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10c      	bne.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e00b      	b.n	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f af6d 	bne.w	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004134:	e034      	b.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f8e3 	bl	8004302 <I2C_IsAcknowledgeFailed>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e034      	b.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800414c:	d028      	beq.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fe fa81 	bl	8002654 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11d      	bne.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	d016      	beq.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e007      	b.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d1c3      	bne.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c4:	e034      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f89b 	bl	8004302 <I2C_IsAcknowledgeFailed>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e034      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041dc:	d028      	beq.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7fe fa39 	bl	8002654 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11d      	bne.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d016      	beq.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d1c3      	bne.n	80041c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004254:	e049      	b.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b10      	cmp	r3, #16
 8004262:	d119      	bne.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e030      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004298:	f7fe f9dc 	bl	8002654 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d016      	beq.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e007      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d1ae      	bne.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d11b      	bne.n	8004352 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004322:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f043 0204 	orr.w	r2, r3, #4
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e267      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d075      	beq.n	800446a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800437e:	4b88      	ldr	r3, [pc, #544]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b85      	ldr	r3, [pc, #532]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004392:	2b08      	cmp	r3, #8
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4b82      	ldr	r3, [pc, #520]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a2:	d10b      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b7e      	ldr	r3, [pc, #504]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <HAL_RCC_OscConfig+0x108>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d157      	bne.n	8004468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e242      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x74>
 80043c6:	4b76      	ldr	r3, [pc, #472]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a75      	ldr	r2, [pc, #468]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01d      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b70      	ldr	r3, [pc, #448]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6f      	ldr	r2, [pc, #444]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b6d      	ldr	r3, [pc, #436]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6c      	ldr	r2, [pc, #432]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043f8:	4b69      	ldr	r3, [pc, #420]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b66      	ldr	r3, [pc, #408]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800440e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fe f91c 	bl	8002654 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fe f918 	bl	8002654 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e207      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b5b      	ldr	r3, [pc, #364]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0xc0>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fe f908 	bl	8002654 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7fe f904 	bl	8002654 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1f3      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0xe8>
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004476:	4b4a      	ldr	r3, [pc, #296]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b47      	ldr	r3, [pc, #284]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800448a:	2b08      	cmp	r3, #8
 800448c:	d11c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b44      	ldr	r3, [pc, #272]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1c7      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4937      	ldr	r1, [pc, #220]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c6:	e03a      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <HAL_RCC_OscConfig+0x244>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fe f8bd 	bl	8002654 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044de:	f7fe f8b9 	bl	8002654 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1a8      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	4b2b      	ldr	r3, [pc, #172]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	4b28      	ldr	r3, [pc, #160]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4925      	ldr	r1, [pc, #148]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004512:	4b24      	ldr	r3, [pc, #144]	@ (80045a4 <HAL_RCC_OscConfig+0x244>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe f89c 	bl	8002654 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7fe f898 	bl	8002654 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e187      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d036      	beq.n	80045b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fe f87c 	bl	8002654 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7fe f878 	bl	8002654 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e167      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x200>
 800457e:	e01b      	b.n	80045b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fe f865 	bl	8002654 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	e00e      	b.n	80045ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458e:	f7fe f861 	bl	8002654 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d907      	bls.n	80045ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e150      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000
 80045a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b88      	ldr	r3, [pc, #544]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ea      	bne.n	800458e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8097 	beq.w	80046f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b81      	ldr	r3, [pc, #516]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b7d      	ldr	r3, [pc, #500]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	4a7c      	ldr	r2, [pc, #496]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e6:	4b7a      	ldr	r3, [pc, #488]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b74      	ldr	r3, [pc, #464]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fe f821 	bl	8002654 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fe f81d 	bl	8002654 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e10c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x2ea>
 800463c:	4b64      	ldr	r3, [pc, #400]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a63      	ldr	r2, [pc, #396]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x30c>
 8004652:	4b5f      	ldr	r3, [pc, #380]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	4a5e      	ldr	r2, [pc, #376]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	@ 0x70
 800465e:	4b5c      	ldr	r3, [pc, #368]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	4a5b      	ldr	r2, [pc, #364]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	@ 0x70
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800466c:	4b58      	ldr	r3, [pc, #352]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a57      	ldr	r2, [pc, #348]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
 8004678:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	4a54      	ldr	r2, [pc, #336]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 0304 	bic.w	r3, r3, #4
 8004682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd ffe2 	bl	8002654 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd ffde 	bl	8002654 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0cb      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCC_OscConfig+0x334>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fd ffcc 	bl	8002654 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd ffc8 	bl	8002654 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b5      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d6:	4b3e      	ldr	r3, [pc, #248]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ee      	bne.n	80046c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	4a38      	ldr	r2, [pc, #224]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a1 	beq.w	8004840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fe:	4b34      	ldr	r3, [pc, #208]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b08      	cmp	r3, #8
 8004708:	d05c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d141      	bne.n	8004796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd ff9c 	bl	8002654 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd ff98 	bl	8002654 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	491b      	ldr	r1, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fd ff71 	bl	8002654 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd ff6d 	bl	8002654 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e05c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x416>
 8004794:	e054      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd ff5a 	bl	8002654 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd ff56 	bl	8002654 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e045      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
 80047c2:	e03d      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e038      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x4ec>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d028      	beq.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d121      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cc      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b68      	ldr	r3, [pc, #416]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90c      	bls.n	800488c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b65      	ldr	r3, [pc, #404]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d044      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e06f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e067      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b37      	ldr	r3, [pc, #220]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4934      	ldr	r1, [pc, #208]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fd fe88 	bl	8002654 <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fd fe84 	bl	8002654 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b25      	ldr	r3, [pc, #148]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20c      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c2:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fde8 	bl	80025cc <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08008ba0 	.word	0x08008ba0
 8004a14:	20000000 	.word	0x20000000
 8004a18:	20000004 	.word	0x20000004

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b090      	sub	sp, #64	@ 0x40
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80a1 	bhi.w	8004b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e09b      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b53      	ldr	r3, [pc, #332]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a54:	e09b      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a5a:	e098      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b4d      	ldr	r3, [pc, #308]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d028      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b4a      	ldr	r3, [pc, #296]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a84:	2100      	movs	r1, #0
 8004a86:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a88:	fb03 f201 	mul.w	r2, r3, r1
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	4a43      	ldr	r2, [pc, #268]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a96:	fba0 1202 	umull	r1, r2, r0, r2
 8004a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa2:	4413      	add	r3, r2
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	61fa      	str	r2, [r7, #28]
 8004aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ab6:	f7fc f87f 	bl	8000bb8 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4613      	mov	r3, r2
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ac2:	e053      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	2200      	movs	r2, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	617a      	str	r2, [r7, #20]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ad6:	f04f 0b00 	mov.w	fp, #0
 8004ada:	4652      	mov	r2, sl
 8004adc:	465b      	mov	r3, fp
 8004ade:	f04f 0000 	mov.w	r0, #0
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	0159      	lsls	r1, r3, #5
 8004ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aec:	0150      	lsls	r0, r2, #5
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	ebb2 080a 	subs.w	r8, r2, sl
 8004af6:	eb63 090b 	sbc.w	r9, r3, fp
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b12:	eb63 0509 	sbc.w	r5, r3, r9
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	00eb      	lsls	r3, r5, #3
 8004b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b24:	00e2      	lsls	r2, r4, #3
 8004b26:	4614      	mov	r4, r2
 8004b28:	461d      	mov	r5, r3
 8004b2a:	eb14 030a 	adds.w	r3, r4, sl
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	eb45 030b 	adc.w	r3, r5, fp
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b42:	4629      	mov	r1, r5
 8004b44:	028b      	lsls	r3, r1, #10
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	028a      	lsls	r2, r1, #10
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b56:	2200      	movs	r2, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	60fa      	str	r2, [r7, #12]
 8004b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b60:	f7fc f82a 	bl	8000bb8 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3740      	adds	r7, #64	@ 0x40
 8004b94:	46bd      	mov	sp, r7
 8004b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	017d7840 	.word	0x017d7840

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bac:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000000 	.word	0x20000000

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc4:	f7ff fff0 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0a9b      	lsrs	r3, r3, #10
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4903      	ldr	r1, [pc, #12]	@ (8004be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	08008bb0 	.word	0x08008bb0

08004be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bec:	f7ff ffdc 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0b5b      	lsrs	r3, r3, #13
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	08008bb0 	.word	0x08008bb0

08004c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e042      	b.n	8004ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd fb1a 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	@ 0x24
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fd7f 	bl	8005758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d175      	bne.n	8004dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Transmit+0x2c>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e06e      	b.n	8004dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	@ 0x21
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cee:	f7fd fcb1 	bl	8002654 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d08:	d108      	bne.n	8004d1c <HAL_UART_Transmit+0x6c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d24:	e02e      	b.n	8004d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fb1d 	bl	8005370 <UART_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e03a      	b.n	8004dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3302      	adds	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e007      	b.n	8004d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cb      	bne.n	8004d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	@ 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fae9 	bl	8005370 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e006      	b.n	8004dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ba      	sub	sp, #232	@ 0xe8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fbd7 	bl	80055da <UART_Receive_IT>
      return;
 8004e2c:	e273      	b.n	8005316 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80de 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80d1 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
 8004e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f043 0202 	orr.w	r2, r3, #2
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
 8004ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 820a 	beq.w	800530c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb62 	bl	80055da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_UART_IRQHandler+0x17a>
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04f      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa6d 	bl	8005422 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d141      	bne.n	8004fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d9      	bne.n	8004f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d013      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	4a8a      	ldr	r2, [pc, #552]	@ (80051d8 <HAL_UART_IRQHandler+0x410>)
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd fcfd 	bl	80029b6 <HAL_DMA_Abort_IT>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e00e      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9b6 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	e00a      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9b2 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe0:	e006      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9ae 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fee:	e18d      	b.n	800530c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	bf00      	nop
    return;
 8004ff2:	e18b      	b.n	800530c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 8167 	bne.w	80052cc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8160 	beq.w	80052cc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8159 	beq.w	80052cc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	f040 80ce 	bne.w	80051dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a9 	beq.w	80051a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	429a      	cmp	r2, r3
 8005060:	f080 80a2 	bcs.w	80051a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005076:	f000 8088 	beq.w	800518a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1d9      	bne.n	800507a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e1      	bne.n	80050c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800512c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800516c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800516e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800517a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e3      	bne.n	8005148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd fba6 	bl	80028d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005198:	b29b      	uxth	r3, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8d9 	bl	8005358 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051a6:	e0b3      	b.n	8005310 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051b0:	429a      	cmp	r2, r3
 80051b2:	f040 80ad 	bne.w	8005310 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c0:	f040 80a6 	bne.w	8005310 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8c1 	bl	8005358 <HAL_UARTEx_RxEventCallback>
      return;
 80051d6:	e09b      	b.n	8005310 <HAL_UART_IRQHandler+0x548>
 80051d8:	080054e9 	.word	0x080054e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 808e 	beq.w	8005314 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80051f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8089 	beq.w	8005314 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005226:	647a      	str	r2, [r7, #68]	@ 0x44
 8005228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800522c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	623b      	str	r3, [r7, #32]
   return(result);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800525e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e3      	bne.n	800523a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0310 	bic.w	r3, r3, #16
 8005296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e3      	bne.n	8005280 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f847 	bl	8005358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ca:	e023      	b.n	8005314 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_UART_IRQHandler+0x524>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f910 	bl	800550a <UART_Transmit_IT>
    return;
 80052ea:	e014      	b.n	8005316 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <HAL_UART_IRQHandler+0x54e>
 80052f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f950 	bl	80055aa <UART_EndTransmit_IT>
    return;
 800530a:	e004      	b.n	8005316 <HAL_UART_IRQHandler+0x54e>
    return;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_UART_IRQHandler+0x54e>
      return;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_UART_IRQHandler+0x54e>
      return;
 8005314:	bf00      	nop
  }
}
 8005316:	37e8      	adds	r7, #232	@ 0xe8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005380:	e03b      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005388:	d037      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538a:	f7fd f963 	bl	8002654 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e03a      	b.n	800541a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d023      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b80      	cmp	r3, #128	@ 0x80
 80053b6:	d020      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b40      	cmp	r3, #64	@ 0x40
 80053bc:	d01d      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d116      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f81d 	bl	8005422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2208      	movs	r2, #8
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e00f      	b.n	800541a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	429a      	cmp	r2, r3
 8005416:	d0b4      	beq.n	8005382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005422:	b480      	push	{r7}
 8005424:	b095      	sub	sp, #84	@ 0x54
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800544a:	643a      	str	r2, [r7, #64]	@ 0x40
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	61fb      	str	r3, [r7, #28]
   return(result);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800547e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	2b01      	cmp	r3, #1
 8005498:	d119      	bne.n	80054ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0310 	bic.w	r3, r3, #16
 80054b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ba:	61ba      	str	r2, [r7, #24]
 80054bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6979      	ldr	r1, [r7, #20]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054dc:	bf00      	nop
 80054de:	3754      	adds	r7, #84	@ 0x54
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff ff21 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b21      	cmp	r3, #33	@ 0x21
 800551c:	d13e      	bne.n	800559c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005526:	d114      	bne.n	8005552 <UART_Transmit_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d110      	bne.n	8005552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	e008      	b.n	8005564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6211      	str	r1, [r2, #32]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10f      	bne.n	8005598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fea6 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	@ 0x30
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b22      	cmp	r3, #34	@ 0x22
 80055f4:	f040 80aa 	bne.w	800574c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005600:	d115      	bne.n	800562e <UART_Receive_IT+0x54>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d111      	bne.n	800562e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	b29a      	uxth	r2, r3
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	1c9a      	adds	r2, r3, #2
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	@ 0x28
 800562c:	e024      	b.n	8005678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d007      	beq.n	800564e <UART_Receive_IT+0x74>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005688:	2b00      	cmp	r3, #0
 800568a:	d15d      	bne.n	8005748 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0220 	bic.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d135      	bne.n	800573e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f8:	623a      	str	r2, [r7, #32]
 80056fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	61bb      	str	r3, [r7, #24]
   return(result);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d10a      	bne.n	8005730 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fe0e 	bl	8005358 <HAL_UARTEx_RxEventCallback>
 800573c:	e002      	b.n	8005744 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fdf6 	bl	8005330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e002      	b.n	800574e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	@ 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800575c:	b0c0      	sub	sp, #256	@ 0x100
 800575e:	af00      	add	r7, sp, #0
 8005760:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	68d9      	ldr	r1, [r3, #12]
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	ea40 0301 	orr.w	r3, r0, r1
 8005780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	431a      	orrs	r2, r3
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	431a      	orrs	r2, r3
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057b0:	f021 010c 	bic.w	r1, r1, #12
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057be:	430b      	orrs	r3, r1
 80057c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	6999      	ldr	r1, [r3, #24]
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	ea40 0301 	orr.w	r3, r0, r1
 80057de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005a24 <UART_SetConfig+0x2cc>)
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d005      	beq.n	80057f8 <UART_SetConfig+0xa0>
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005a28 <UART_SetConfig+0x2d0>)
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d104      	bne.n	8005802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7ff f9f6 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 80057fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005800:	e003      	b.n	800580a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005802:	f7ff f9dd 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8005806:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005814:	f040 810c 	bne.w	8005a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581c:	2200      	movs	r2, #0
 800581e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005822:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	1891      	adds	r1, r2, r2
 8005830:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005832:	415b      	adcs	r3, r3
 8005834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800583a:	4621      	mov	r1, r4
 800583c:	eb12 0801 	adds.w	r8, r2, r1
 8005840:	4629      	mov	r1, r5
 8005842:	eb43 0901 	adc.w	r9, r3, r1
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585a:	4690      	mov	r8, r2
 800585c:	4699      	mov	r9, r3
 800585e:	4623      	mov	r3, r4
 8005860:	eb18 0303 	adds.w	r3, r8, r3
 8005864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005868:	462b      	mov	r3, r5
 800586a:	eb49 0303 	adc.w	r3, r9, r3
 800586e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800587e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005886:	460b      	mov	r3, r1
 8005888:	18db      	adds	r3, r3, r3
 800588a:	653b      	str	r3, [r7, #80]	@ 0x50
 800588c:	4613      	mov	r3, r2
 800588e:	eb42 0303 	adc.w	r3, r2, r3
 8005892:	657b      	str	r3, [r7, #84]	@ 0x54
 8005894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800589c:	f7fb f98c 	bl	8000bb8 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4b61      	ldr	r3, [pc, #388]	@ (8005a2c <UART_SetConfig+0x2d4>)
 80058a6:	fba3 2302 	umull	r2, r3, r3, r2
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	011c      	lsls	r4, r3, #4
 80058ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	1891      	adds	r1, r2, r2
 80058c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058c8:	415b      	adcs	r3, r3
 80058ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058d0:	4641      	mov	r1, r8
 80058d2:	eb12 0a01 	adds.w	sl, r2, r1
 80058d6:	4649      	mov	r1, r9
 80058d8:	eb43 0b01 	adc.w	fp, r3, r1
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f0:	4692      	mov	sl, r2
 80058f2:	469b      	mov	fp, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	eb1a 0303 	adds.w	r3, sl, r3
 80058fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058fe:	464b      	mov	r3, r9
 8005900:	eb4b 0303 	adc.w	r3, fp, r3
 8005904:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005914:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800591c:	460b      	mov	r3, r1
 800591e:	18db      	adds	r3, r3, r3
 8005920:	643b      	str	r3, [r7, #64]	@ 0x40
 8005922:	4613      	mov	r3, r2
 8005924:	eb42 0303 	adc.w	r3, r2, r3
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800592e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005932:	f7fb f941 	bl	8000bb8 <__aeabi_uldivmod>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4611      	mov	r1, r2
 800593c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a2c <UART_SetConfig+0x2d4>)
 800593e:	fba3 2301 	umull	r2, r3, r3, r1
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2264      	movs	r2, #100	@ 0x64
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	1acb      	subs	r3, r1, r3
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005952:	4b36      	ldr	r3, [pc, #216]	@ (8005a2c <UART_SetConfig+0x2d4>)
 8005954:	fba3 2302 	umull	r2, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005960:	441c      	add	r4, r3
 8005962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800596c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	1891      	adds	r1, r2, r2
 800597a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800597c:	415b      	adcs	r3, r3
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005984:	4641      	mov	r1, r8
 8005986:	1851      	adds	r1, r2, r1
 8005988:	6339      	str	r1, [r7, #48]	@ 0x30
 800598a:	4649      	mov	r1, r9
 800598c:	414b      	adcs	r3, r1
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800599c:	4659      	mov	r1, fp
 800599e:	00cb      	lsls	r3, r1, #3
 80059a0:	4651      	mov	r1, sl
 80059a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059a6:	4651      	mov	r1, sl
 80059a8:	00ca      	lsls	r2, r1, #3
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	4642      	mov	r2, r8
 80059b2:	189b      	adds	r3, r3, r2
 80059b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b8:	464b      	mov	r3, r9
 80059ba:	460a      	mov	r2, r1
 80059bc:	eb42 0303 	adc.w	r3, r2, r3
 80059c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059d8:	460b      	mov	r3, r1
 80059da:	18db      	adds	r3, r3, r3
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	4613      	mov	r3, r2
 80059e0:	eb42 0303 	adc.w	r3, r2, r3
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059ee:	f7fb f8e3 	bl	8000bb8 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <UART_SetConfig+0x2d4>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	@ 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	3332      	adds	r3, #50	@ 0x32
 8005a0a:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <UART_SetConfig+0x2d4>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f003 0207 	and.w	r2, r3, #7
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4422      	add	r2, r4
 8005a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a20:	e106      	b.n	8005c30 <UART_SetConfig+0x4d8>
 8005a22:	bf00      	nop
 8005a24:	40011000 	.word	0x40011000
 8005a28:	40011400 	.word	0x40011400
 8005a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a42:	4642      	mov	r2, r8
 8005a44:	464b      	mov	r3, r9
 8005a46:	1891      	adds	r1, r2, r2
 8005a48:	6239      	str	r1, [r7, #32]
 8005a4a:	415b      	adcs	r3, r3
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a52:	4641      	mov	r1, r8
 8005a54:	1854      	adds	r4, r2, r1
 8005a56:	4649      	mov	r1, r9
 8005a58:	eb43 0501 	adc.w	r5, r3, r1
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	00eb      	lsls	r3, r5, #3
 8005a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a6a:	00e2      	lsls	r2, r4, #3
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	461d      	mov	r5, r3
 8005a70:	4643      	mov	r3, r8
 8005a72:	18e3      	adds	r3, r4, r3
 8005a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a78:	464b      	mov	r3, r9
 8005a7a:	eb45 0303 	adc.w	r3, r5, r3
 8005a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	008b      	lsls	r3, r1, #2
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	008a      	lsls	r2, r1, #2
 8005aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ab0:	f7fb f882 	bl	8000bb8 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4b60      	ldr	r3, [pc, #384]	@ (8005c3c <UART_SetConfig+0x4e4>)
 8005aba:	fba3 2302 	umull	r2, r3, r3, r2
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	011c      	lsls	r4, r3, #4
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005acc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	61b9      	str	r1, [r7, #24]
 8005adc:	415b      	adcs	r3, r3
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	1851      	adds	r1, r2, r1
 8005ae8:	6139      	str	r1, [r7, #16]
 8005aea:	4649      	mov	r1, r9
 8005aec:	414b      	adcs	r3, r1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005afc:	4659      	mov	r1, fp
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b06:	4651      	mov	r1, sl
 8005b08:	00ca      	lsls	r2, r1, #3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4642      	mov	r2, r8
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b18:	464b      	mov	r3, r9
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	eb42 0303 	adc.w	r3, r2, r3
 8005b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	008b      	lsls	r3, r1, #2
 8005b40:	4641      	mov	r1, r8
 8005b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b46:	4641      	mov	r1, r8
 8005b48:	008a      	lsls	r2, r1, #2
 8005b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b4e:	f7fb f833 	bl	8000bb8 <__aeabi_uldivmod>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <UART_SetConfig+0x4e4>)
 8005b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2264      	movs	r2, #100	@ 0x64
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	1acb      	subs	r3, r1, r3
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	@ 0x32
 8005b6c:	4a33      	ldr	r2, [pc, #204]	@ (8005c3c <UART_SetConfig+0x4e4>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b78:	441c      	add	r4, r3
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	1891      	adds	r1, r2, r2
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	415b      	adcs	r3, r3
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b98:	4641      	mov	r1, r8
 8005b9a:	1851      	adds	r1, r2, r1
 8005b9c:	6039      	str	r1, [r7, #0]
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	414b      	adcs	r3, r1
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	00cb      	lsls	r3, r1, #3
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bba:	4651      	mov	r1, sl
 8005bbc:	00ca      	lsls	r2, r1, #3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bca:	464b      	mov	r3, r9
 8005bcc:	460a      	mov	r2, r1
 8005bce:	eb42 0303 	adc.w	r3, r2, r3
 8005bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bde:	667a      	str	r2, [r7, #100]	@ 0x64
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bec:	4649      	mov	r1, r9
 8005bee:	008b      	lsls	r3, r1, #2
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	008a      	lsls	r2, r1, #2
 8005bfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bfe:	f7fa ffdb 	bl	8000bb8 <__aeabi_uldivmod>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <UART_SetConfig+0x4e4>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2164      	movs	r1, #100	@ 0x64
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	3332      	adds	r3, #50	@ 0x32
 8005c1a:	4a08      	ldr	r2, [pc, #32]	@ (8005c3c <UART_SetConfig+0x4e4>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	f003 020f 	and.w	r2, r3, #15
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4422      	add	r2, r4
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c36:	46bd      	mov	sp, r7
 8005c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3c:	51eb851f 	.word	0x51eb851f

08005c40 <__cvt>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	ec57 6b10 	vmov	r6, r7, d0
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	463b      	mov	r3, r7
 8005c50:	bfbb      	ittet	lt
 8005c52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c56:	461f      	movlt	r7, r3
 8005c58:	2300      	movge	r3, #0
 8005c5a:	232d      	movlt	r3, #45	@ 0x2d
 8005c5c:	700b      	strb	r3, [r1, #0]
 8005c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c64:	4691      	mov	r9, r2
 8005c66:	f023 0820 	bic.w	r8, r3, #32
 8005c6a:	bfbc      	itt	lt
 8005c6c:	4632      	movlt	r2, r6
 8005c6e:	4616      	movlt	r6, r2
 8005c70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c74:	d005      	beq.n	8005c82 <__cvt+0x42>
 8005c76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c7a:	d100      	bne.n	8005c7e <__cvt+0x3e>
 8005c7c:	3401      	adds	r4, #1
 8005c7e:	2102      	movs	r1, #2
 8005c80:	e000      	b.n	8005c84 <__cvt+0x44>
 8005c82:	2103      	movs	r1, #3
 8005c84:	ab03      	add	r3, sp, #12
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	ab02      	add	r3, sp, #8
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	ec47 6b10 	vmov	d0, r6, r7
 8005c90:	4653      	mov	r3, sl
 8005c92:	4622      	mov	r2, r4
 8005c94:	f000 ffa4 	bl	8006be0 <_dtoa_r>
 8005c98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	d119      	bne.n	8005cd4 <__cvt+0x94>
 8005ca0:	f019 0f01 	tst.w	r9, #1
 8005ca4:	d00e      	beq.n	8005cc4 <__cvt+0x84>
 8005ca6:	eb00 0904 	add.w	r9, r0, r4
 8005caa:	2200      	movs	r2, #0
 8005cac:	2300      	movs	r3, #0
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa ff11 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cb6:	b108      	cbz	r0, 8005cbc <__cvt+0x7c>
 8005cb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cbc:	2230      	movs	r2, #48	@ 0x30
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	454b      	cmp	r3, r9
 8005cc2:	d31e      	bcc.n	8005d02 <__cvt+0xc2>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cc8:	1b5b      	subs	r3, r3, r5
 8005cca:	4628      	mov	r0, r5
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	b004      	add	sp, #16
 8005cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cd8:	eb00 0904 	add.w	r9, r0, r4
 8005cdc:	d1e5      	bne.n	8005caa <__cvt+0x6a>
 8005cde:	7803      	ldrb	r3, [r0, #0]
 8005ce0:	2b30      	cmp	r3, #48	@ 0x30
 8005ce2:	d10a      	bne.n	8005cfa <__cvt+0xba>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cf0:	b918      	cbnz	r0, 8005cfa <__cvt+0xba>
 8005cf2:	f1c4 0401 	rsb	r4, r4, #1
 8005cf6:	f8ca 4000 	str.w	r4, [sl]
 8005cfa:	f8da 3000 	ldr.w	r3, [sl]
 8005cfe:	4499      	add	r9, r3
 8005d00:	e7d3      	b.n	8005caa <__cvt+0x6a>
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	9103      	str	r1, [sp, #12]
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	e7d9      	b.n	8005cbe <__cvt+0x7e>

08005d0a <__exponent>:
 8005d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	bfba      	itte	lt
 8005d10:	4249      	neglt	r1, r1
 8005d12:	232d      	movlt	r3, #45	@ 0x2d
 8005d14:	232b      	movge	r3, #43	@ 0x2b
 8005d16:	2909      	cmp	r1, #9
 8005d18:	7002      	strb	r2, [r0, #0]
 8005d1a:	7043      	strb	r3, [r0, #1]
 8005d1c:	dd29      	ble.n	8005d72 <__exponent+0x68>
 8005d1e:	f10d 0307 	add.w	r3, sp, #7
 8005d22:	461d      	mov	r5, r3
 8005d24:	270a      	movs	r7, #10
 8005d26:	461a      	mov	r2, r3
 8005d28:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d2c:	fb07 1416 	mls	r4, r7, r6, r1
 8005d30:	3430      	adds	r4, #48	@ 0x30
 8005d32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d36:	460c      	mov	r4, r1
 8005d38:	2c63      	cmp	r4, #99	@ 0x63
 8005d3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005d3e:	4631      	mov	r1, r6
 8005d40:	dcf1      	bgt.n	8005d26 <__exponent+0x1c>
 8005d42:	3130      	adds	r1, #48	@ 0x30
 8005d44:	1e94      	subs	r4, r2, #2
 8005d46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d4a:	1c41      	adds	r1, r0, #1
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	42ab      	cmp	r3, r5
 8005d50:	d30a      	bcc.n	8005d68 <__exponent+0x5e>
 8005d52:	f10d 0309 	add.w	r3, sp, #9
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	42ac      	cmp	r4, r5
 8005d5a:	bf88      	it	hi
 8005d5c:	2300      	movhi	r3, #0
 8005d5e:	3302      	adds	r3, #2
 8005d60:	4403      	add	r3, r0
 8005d62:	1a18      	subs	r0, r3, r0
 8005d64:	b003      	add	sp, #12
 8005d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d70:	e7ed      	b.n	8005d4e <__exponent+0x44>
 8005d72:	2330      	movs	r3, #48	@ 0x30
 8005d74:	3130      	adds	r1, #48	@ 0x30
 8005d76:	7083      	strb	r3, [r0, #2]
 8005d78:	70c1      	strb	r1, [r0, #3]
 8005d7a:	1d03      	adds	r3, r0, #4
 8005d7c:	e7f1      	b.n	8005d62 <__exponent+0x58>
	...

08005d80 <_printf_float>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	b08d      	sub	sp, #52	@ 0x34
 8005d86:	460c      	mov	r4, r1
 8005d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	4605      	mov	r5, r0
 8005d92:	f000 fe15 	bl	80069c0 <_localeconv_r>
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fa fa70 	bl	8000280 <strlen>
 8005da0:	2300      	movs	r3, #0
 8005da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005da4:	f8d8 3000 	ldr.w	r3, [r8]
 8005da8:	9005      	str	r0, [sp, #20]
 8005daa:	3307      	adds	r3, #7
 8005dac:	f023 0307 	bic.w	r3, r3, #7
 8005db0:	f103 0208 	add.w	r2, r3, #8
 8005db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005db8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dbc:	f8c8 2000 	str.w	r2, [r8]
 8005dc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005dc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005dc8:	9307      	str	r3, [sp, #28]
 8005dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8006048 <_printf_float+0x2c8>)
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ddc:	f7fa feae 	bl	8000b3c <__aeabi_dcmpun>
 8005de0:	bb70      	cbnz	r0, 8005e40 <_printf_float+0xc0>
 8005de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de6:	4b98      	ldr	r3, [pc, #608]	@ (8006048 <_printf_float+0x2c8>)
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dec:	f7fa fe88 	bl	8000b00 <__aeabi_dcmple>
 8005df0:	bb30      	cbnz	r0, 8005e40 <_printf_float+0xc0>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fe77 	bl	8000aec <__aeabi_dcmplt>
 8005dfe:	b110      	cbz	r0, 8005e06 <_printf_float+0x86>
 8005e00:	232d      	movs	r3, #45	@ 0x2d
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e06:	4a91      	ldr	r2, [pc, #580]	@ (800604c <_printf_float+0x2cc>)
 8005e08:	4b91      	ldr	r3, [pc, #580]	@ (8006050 <_printf_float+0x2d0>)
 8005e0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e0e:	bf8c      	ite	hi
 8005e10:	4690      	movhi	r8, r2
 8005e12:	4698      	movls	r8, r3
 8005e14:	2303      	movs	r3, #3
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	f02b 0304 	bic.w	r3, fp, #4
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	f04f 0900 	mov.w	r9, #0
 8005e22:	9700      	str	r7, [sp, #0]
 8005e24:	4633      	mov	r3, r6
 8005e26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 f9d2 	bl	80061d4 <_printf_common>
 8005e30:	3001      	adds	r0, #1
 8005e32:	f040 808d 	bne.w	8005f50 <_printf_float+0x1d0>
 8005e36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e3a:	b00d      	add	sp, #52	@ 0x34
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	4642      	mov	r2, r8
 8005e42:	464b      	mov	r3, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	4649      	mov	r1, r9
 8005e48:	f7fa fe78 	bl	8000b3c <__aeabi_dcmpun>
 8005e4c:	b140      	cbz	r0, 8005e60 <_printf_float+0xe0>
 8005e4e:	464b      	mov	r3, r9
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bfbc      	itt	lt
 8005e54:	232d      	movlt	r3, #45	@ 0x2d
 8005e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006054 <_printf_float+0x2d4>)
 8005e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8006058 <_printf_float+0x2d8>)
 8005e5e:	e7d4      	b.n	8005e0a <_printf_float+0x8a>
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e66:	9206      	str	r2, [sp, #24]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	d13b      	bne.n	8005ee4 <_printf_float+0x164>
 8005e6c:	2306      	movs	r3, #6
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e74:	2300      	movs	r3, #0
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	9303      	str	r3, [sp, #12]
 8005e7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e80:	ab09      	add	r3, sp, #36	@ 0x24
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	6861      	ldr	r1, [r4, #4]
 8005e86:	ec49 8b10 	vmov	d0, r8, r9
 8005e8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7ff fed6 	bl	8005c40 <__cvt>
 8005e94:	9b06      	ldr	r3, [sp, #24]
 8005e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e98:	2b47      	cmp	r3, #71	@ 0x47
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	d129      	bne.n	8005ef2 <_printf_float+0x172>
 8005e9e:	1cc8      	adds	r0, r1, #3
 8005ea0:	db02      	blt.n	8005ea8 <_printf_float+0x128>
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	dd41      	ble.n	8005f2c <_printf_float+0x1ac>
 8005ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005eac:	fa5f fa8a 	uxtb.w	sl, sl
 8005eb0:	3901      	subs	r1, #1
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005eb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005eba:	f7ff ff26 	bl	8005d0a <__exponent>
 8005ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ec0:	1813      	adds	r3, r2, r0
 8005ec2:	2a01      	cmp	r2, #1
 8005ec4:	4681      	mov	r9, r0
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	dc02      	bgt.n	8005ed0 <_printf_float+0x150>
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	07d2      	lsls	r2, r2, #31
 8005ece:	d501      	bpl.n	8005ed4 <_printf_float+0x154>
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0a2      	beq.n	8005e22 <_printf_float+0xa2>
 8005edc:	232d      	movs	r3, #45	@ 0x2d
 8005ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ee2:	e79e      	b.n	8005e22 <_printf_float+0xa2>
 8005ee4:	9a06      	ldr	r2, [sp, #24]
 8005ee6:	2a47      	cmp	r2, #71	@ 0x47
 8005ee8:	d1c2      	bne.n	8005e70 <_printf_float+0xf0>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1c0      	bne.n	8005e70 <_printf_float+0xf0>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e7bd      	b.n	8005e6e <_printf_float+0xee>
 8005ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ef6:	d9db      	bls.n	8005eb0 <_printf_float+0x130>
 8005ef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005efc:	d118      	bne.n	8005f30 <_printf_float+0x1b0>
 8005efe:	2900      	cmp	r1, #0
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	dd0b      	ble.n	8005f1c <_printf_float+0x19c>
 8005f04:	6121      	str	r1, [r4, #16]
 8005f06:	b913      	cbnz	r3, 8005f0e <_printf_float+0x18e>
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	07d0      	lsls	r0, r2, #31
 8005f0c:	d502      	bpl.n	8005f14 <_printf_float+0x194>
 8005f0e:	3301      	adds	r3, #1
 8005f10:	440b      	add	r3, r1
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	e7db      	b.n	8005ed4 <_printf_float+0x154>
 8005f1c:	b913      	cbnz	r3, 8005f24 <_printf_float+0x1a4>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	07d2      	lsls	r2, r2, #31
 8005f22:	d501      	bpl.n	8005f28 <_printf_float+0x1a8>
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7f4      	b.n	8005f12 <_printf_float+0x192>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f2      	b.n	8005f12 <_printf_float+0x192>
 8005f2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f32:	4299      	cmp	r1, r3
 8005f34:	db05      	blt.n	8005f42 <_printf_float+0x1c2>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6121      	str	r1, [r4, #16]
 8005f3a:	07d8      	lsls	r0, r3, #31
 8005f3c:	d5ea      	bpl.n	8005f14 <_printf_float+0x194>
 8005f3e:	1c4b      	adds	r3, r1, #1
 8005f40:	e7e7      	b.n	8005f12 <_printf_float+0x192>
 8005f42:	2900      	cmp	r1, #0
 8005f44:	bfd4      	ite	le
 8005f46:	f1c1 0202 	rsble	r2, r1, #2
 8005f4a:	2201      	movgt	r2, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	e7e0      	b.n	8005f12 <_printf_float+0x192>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	055a      	lsls	r2, r3, #21
 8005f54:	d407      	bmi.n	8005f66 <_printf_float+0x1e6>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	4642      	mov	r2, r8
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	d12b      	bne.n	8005fbc <_printf_float+0x23c>
 8005f64:	e767      	b.n	8005e36 <_printf_float+0xb6>
 8005f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f6a:	f240 80dd 	bls.w	8006128 <_printf_float+0x3a8>
 8005f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f72:	2200      	movs	r2, #0
 8005f74:	2300      	movs	r3, #0
 8005f76:	f7fa fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d033      	beq.n	8005fe6 <_printf_float+0x266>
 8005f7e:	4a37      	ldr	r2, [pc, #220]	@ (800605c <_printf_float+0x2dc>)
 8005f80:	2301      	movs	r3, #1
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f af54 	beq.w	8005e36 <_printf_float+0xb6>
 8005f8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f92:	4543      	cmp	r3, r8
 8005f94:	db02      	blt.n	8005f9c <_printf_float+0x21c>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	07d8      	lsls	r0, r3, #31
 8005f9a:	d50f      	bpl.n	8005fbc <_printf_float+0x23c>
 8005f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f af45 	beq.w	8005e36 <_printf_float+0xb6>
 8005fac:	f04f 0900 	mov.w	r9, #0
 8005fb0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005fb4:	f104 0a1a 	add.w	sl, r4, #26
 8005fb8:	45c8      	cmp	r8, r9
 8005fba:	dc09      	bgt.n	8005fd0 <_printf_float+0x250>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	f100 8103 	bmi.w	80061ca <_printf_float+0x44a>
 8005fc4:	68e0      	ldr	r0, [r4, #12]
 8005fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fc8:	4298      	cmp	r0, r3
 8005fca:	bfb8      	it	lt
 8005fcc:	4618      	movlt	r0, r3
 8005fce:	e734      	b.n	8005e3a <_printf_float+0xba>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f43f af2b 	beq.w	8005e36 <_printf_float+0xb6>
 8005fe0:	f109 0901 	add.w	r9, r9, #1
 8005fe4:	e7e8      	b.n	8005fb8 <_printf_float+0x238>
 8005fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc39      	bgt.n	8006060 <_printf_float+0x2e0>
 8005fec:	4a1b      	ldr	r2, [pc, #108]	@ (800605c <_printf_float+0x2dc>)
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f af1d 	beq.w	8005e36 <_printf_float+0xb6>
 8005ffc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006000:	ea59 0303 	orrs.w	r3, r9, r3
 8006004:	d102      	bne.n	800600c <_printf_float+0x28c>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	07d9      	lsls	r1, r3, #31
 800600a:	d5d7      	bpl.n	8005fbc <_printf_float+0x23c>
 800600c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af0d 	beq.w	8005e36 <_printf_float+0xb6>
 800601c:	f04f 0a00 	mov.w	sl, #0
 8006020:	f104 0b1a 	add.w	fp, r4, #26
 8006024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006026:	425b      	negs	r3, r3
 8006028:	4553      	cmp	r3, sl
 800602a:	dc01      	bgt.n	8006030 <_printf_float+0x2b0>
 800602c:	464b      	mov	r3, r9
 800602e:	e793      	b.n	8005f58 <_printf_float+0x1d8>
 8006030:	2301      	movs	r3, #1
 8006032:	465a      	mov	r2, fp
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f aefb 	beq.w	8005e36 <_printf_float+0xb6>
 8006040:	f10a 0a01 	add.w	sl, sl, #1
 8006044:	e7ee      	b.n	8006024 <_printf_float+0x2a4>
 8006046:	bf00      	nop
 8006048:	7fefffff 	.word	0x7fefffff
 800604c:	08008bbc 	.word	0x08008bbc
 8006050:	08008bb8 	.word	0x08008bb8
 8006054:	08008bc4 	.word	0x08008bc4
 8006058:	08008bc0 	.word	0x08008bc0
 800605c:	08008bc8 	.word	0x08008bc8
 8006060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006062:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006066:	4553      	cmp	r3, sl
 8006068:	bfa8      	it	ge
 800606a:	4653      	movge	r3, sl
 800606c:	2b00      	cmp	r3, #0
 800606e:	4699      	mov	r9, r3
 8006070:	dc36      	bgt.n	80060e0 <_printf_float+0x360>
 8006072:	f04f 0b00 	mov.w	fp, #0
 8006076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800607a:	f104 021a 	add.w	r2, r4, #26
 800607e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006080:	9306      	str	r3, [sp, #24]
 8006082:	eba3 0309 	sub.w	r3, r3, r9
 8006086:	455b      	cmp	r3, fp
 8006088:	dc31      	bgt.n	80060ee <_printf_float+0x36e>
 800608a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608c:	459a      	cmp	sl, r3
 800608e:	dc3a      	bgt.n	8006106 <_printf_float+0x386>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	07da      	lsls	r2, r3, #31
 8006094:	d437      	bmi.n	8006106 <_printf_float+0x386>
 8006096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006098:	ebaa 0903 	sub.w	r9, sl, r3
 800609c:	9b06      	ldr	r3, [sp, #24]
 800609e:	ebaa 0303 	sub.w	r3, sl, r3
 80060a2:	4599      	cmp	r9, r3
 80060a4:	bfa8      	it	ge
 80060a6:	4699      	movge	r9, r3
 80060a8:	f1b9 0f00 	cmp.w	r9, #0
 80060ac:	dc33      	bgt.n	8006116 <_printf_float+0x396>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060b6:	f104 0b1a 	add.w	fp, r4, #26
 80060ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060bc:	ebaa 0303 	sub.w	r3, sl, r3
 80060c0:	eba3 0309 	sub.w	r3, r3, r9
 80060c4:	4543      	cmp	r3, r8
 80060c6:	f77f af79 	ble.w	8005fbc <_printf_float+0x23c>
 80060ca:	2301      	movs	r3, #1
 80060cc:	465a      	mov	r2, fp
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f aeae 	beq.w	8005e36 <_printf_float+0xb6>
 80060da:	f108 0801 	add.w	r8, r8, #1
 80060de:	e7ec      	b.n	80060ba <_printf_float+0x33a>
 80060e0:	4642      	mov	r2, r8
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	d1c2      	bne.n	8006072 <_printf_float+0x2f2>
 80060ec:	e6a3      	b.n	8005e36 <_printf_float+0xb6>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	9206      	str	r2, [sp, #24]
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f ae9c 	beq.w	8005e36 <_printf_float+0xb6>
 80060fe:	9a06      	ldr	r2, [sp, #24]
 8006100:	f10b 0b01 	add.w	fp, fp, #1
 8006104:	e7bb      	b.n	800607e <_printf_float+0x2fe>
 8006106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	d1c0      	bne.n	8006096 <_printf_float+0x316>
 8006114:	e68f      	b.n	8005e36 <_printf_float+0xb6>
 8006116:	9a06      	ldr	r2, [sp, #24]
 8006118:	464b      	mov	r3, r9
 800611a:	4442      	add	r2, r8
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	d1c3      	bne.n	80060ae <_printf_float+0x32e>
 8006126:	e686      	b.n	8005e36 <_printf_float+0xb6>
 8006128:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800612c:	f1ba 0f01 	cmp.w	sl, #1
 8006130:	dc01      	bgt.n	8006136 <_printf_float+0x3b6>
 8006132:	07db      	lsls	r3, r3, #31
 8006134:	d536      	bpl.n	80061a4 <_printf_float+0x424>
 8006136:	2301      	movs	r3, #1
 8006138:	4642      	mov	r2, r8
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f ae78 	beq.w	8005e36 <_printf_float+0xb6>
 8006146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f ae70 	beq.w	8005e36 <_printf_float+0xb6>
 8006156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800615a:	2200      	movs	r2, #0
 800615c:	2300      	movs	r3, #0
 800615e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006162:	f7fa fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006166:	b9c0      	cbnz	r0, 800619a <_printf_float+0x41a>
 8006168:	4653      	mov	r3, sl
 800616a:	f108 0201 	add.w	r2, r8, #1
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	d10c      	bne.n	8006192 <_printf_float+0x412>
 8006178:	e65d      	b.n	8005e36 <_printf_float+0xb6>
 800617a:	2301      	movs	r3, #1
 800617c:	465a      	mov	r2, fp
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae56 	beq.w	8005e36 <_printf_float+0xb6>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	45d0      	cmp	r8, sl
 8006190:	dbf3      	blt.n	800617a <_printf_float+0x3fa>
 8006192:	464b      	mov	r3, r9
 8006194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006198:	e6df      	b.n	8005f5a <_printf_float+0x1da>
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	f104 0b1a 	add.w	fp, r4, #26
 80061a2:	e7f4      	b.n	800618e <_printf_float+0x40e>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4642      	mov	r2, r8
 80061a8:	e7e1      	b.n	800616e <_printf_float+0x3ee>
 80061aa:	2301      	movs	r3, #1
 80061ac:	464a      	mov	r2, r9
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	f43f ae3e 	beq.w	8005e36 <_printf_float+0xb6>
 80061ba:	f108 0801 	add.w	r8, r8, #1
 80061be:	68e3      	ldr	r3, [r4, #12]
 80061c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061c2:	1a5b      	subs	r3, r3, r1
 80061c4:	4543      	cmp	r3, r8
 80061c6:	dcf0      	bgt.n	80061aa <_printf_float+0x42a>
 80061c8:	e6fc      	b.n	8005fc4 <_printf_float+0x244>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	f104 0919 	add.w	r9, r4, #25
 80061d2:	e7f4      	b.n	80061be <_printf_float+0x43e>

080061d4 <_printf_common>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	4616      	mov	r6, r2
 80061da:	4698      	mov	r8, r3
 80061dc:	688a      	ldr	r2, [r1, #8]
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bfb8      	it	lt
 80061e8:	4613      	movlt	r3, r2
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061f0:	4607      	mov	r7, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	b10a      	cbz	r2, 80061fa <_printf_common+0x26>
 80061f6:	3301      	adds	r3, #1
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	6833      	ldrmi	r3, [r6, #0]
 8006202:	3302      	addmi	r3, #2
 8006204:	6033      	strmi	r3, [r6, #0]
 8006206:	6825      	ldr	r5, [r4, #0]
 8006208:	f015 0506 	ands.w	r5, r5, #6
 800620c:	d106      	bne.n	800621c <_printf_common+0x48>
 800620e:	f104 0a19 	add.w	sl, r4, #25
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	6832      	ldr	r2, [r6, #0]
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	42ab      	cmp	r3, r5
 800621a:	dc26      	bgt.n	800626a <_printf_common+0x96>
 800621c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	3b00      	subs	r3, #0
 8006224:	bf18      	it	ne
 8006226:	2301      	movne	r3, #1
 8006228:	0692      	lsls	r2, r2, #26
 800622a:	d42b      	bmi.n	8006284 <_printf_common+0xb0>
 800622c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006230:	4641      	mov	r1, r8
 8006232:	4638      	mov	r0, r7
 8006234:	47c8      	blx	r9
 8006236:	3001      	adds	r0, #1
 8006238:	d01e      	beq.n	8006278 <_printf_common+0xa4>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	2b04      	cmp	r3, #4
 8006244:	bf02      	ittt	eq
 8006246:	68e5      	ldreq	r5, [r4, #12]
 8006248:	6833      	ldreq	r3, [r6, #0]
 800624a:	1aed      	subeq	r5, r5, r3
 800624c:	68a3      	ldr	r3, [r4, #8]
 800624e:	bf0c      	ite	eq
 8006250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006254:	2500      	movne	r5, #0
 8006256:	4293      	cmp	r3, r2
 8006258:	bfc4      	itt	gt
 800625a:	1a9b      	subgt	r3, r3, r2
 800625c:	18ed      	addgt	r5, r5, r3
 800625e:	2600      	movs	r6, #0
 8006260:	341a      	adds	r4, #26
 8006262:	42b5      	cmp	r5, r6
 8006264:	d11a      	bne.n	800629c <_printf_common+0xc8>
 8006266:	2000      	movs	r0, #0
 8006268:	e008      	b.n	800627c <_printf_common+0xa8>
 800626a:	2301      	movs	r3, #1
 800626c:	4652      	mov	r2, sl
 800626e:	4641      	mov	r1, r8
 8006270:	4638      	mov	r0, r7
 8006272:	47c8      	blx	r9
 8006274:	3001      	adds	r0, #1
 8006276:	d103      	bne.n	8006280 <_printf_common+0xac>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006280:	3501      	adds	r5, #1
 8006282:	e7c6      	b.n	8006212 <_printf_common+0x3e>
 8006284:	18e1      	adds	r1, r4, r3
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	2030      	movs	r0, #48	@ 0x30
 800628a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800628e:	4422      	add	r2, r4
 8006290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006298:	3302      	adds	r3, #2
 800629a:	e7c7      	b.n	800622c <_printf_common+0x58>
 800629c:	2301      	movs	r3, #1
 800629e:	4622      	mov	r2, r4
 80062a0:	4641      	mov	r1, r8
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c8      	blx	r9
 80062a6:	3001      	adds	r0, #1
 80062a8:	d0e6      	beq.n	8006278 <_printf_common+0xa4>
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7d9      	b.n	8006262 <_printf_common+0x8e>
	...

080062b0 <_printf_i>:
 80062b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	7e0f      	ldrb	r7, [r1, #24]
 80062b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062b8:	2f78      	cmp	r7, #120	@ 0x78
 80062ba:	4691      	mov	r9, r2
 80062bc:	4680      	mov	r8, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	469a      	mov	sl, r3
 80062c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062c6:	d807      	bhi.n	80062d8 <_printf_i+0x28>
 80062c8:	2f62      	cmp	r7, #98	@ 0x62
 80062ca:	d80a      	bhi.n	80062e2 <_printf_i+0x32>
 80062cc:	2f00      	cmp	r7, #0
 80062ce:	f000 80d1 	beq.w	8006474 <_printf_i+0x1c4>
 80062d2:	2f58      	cmp	r7, #88	@ 0x58
 80062d4:	f000 80b8 	beq.w	8006448 <_printf_i+0x198>
 80062d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062e0:	e03a      	b.n	8006358 <_printf_i+0xa8>
 80062e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062e6:	2b15      	cmp	r3, #21
 80062e8:	d8f6      	bhi.n	80062d8 <_printf_i+0x28>
 80062ea:	a101      	add	r1, pc, #4	@ (adr r1, 80062f0 <_printf_i+0x40>)
 80062ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f0:	08006349 	.word	0x08006349
 80062f4:	0800635d 	.word	0x0800635d
 80062f8:	080062d9 	.word	0x080062d9
 80062fc:	080062d9 	.word	0x080062d9
 8006300:	080062d9 	.word	0x080062d9
 8006304:	080062d9 	.word	0x080062d9
 8006308:	0800635d 	.word	0x0800635d
 800630c:	080062d9 	.word	0x080062d9
 8006310:	080062d9 	.word	0x080062d9
 8006314:	080062d9 	.word	0x080062d9
 8006318:	080062d9 	.word	0x080062d9
 800631c:	0800645b 	.word	0x0800645b
 8006320:	08006387 	.word	0x08006387
 8006324:	08006415 	.word	0x08006415
 8006328:	080062d9 	.word	0x080062d9
 800632c:	080062d9 	.word	0x080062d9
 8006330:	0800647d 	.word	0x0800647d
 8006334:	080062d9 	.word	0x080062d9
 8006338:	08006387 	.word	0x08006387
 800633c:	080062d9 	.word	0x080062d9
 8006340:	080062d9 	.word	0x080062d9
 8006344:	0800641d 	.word	0x0800641d
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6032      	str	r2, [r6, #0]
 8006350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006358:	2301      	movs	r3, #1
 800635a:	e09c      	b.n	8006496 <_printf_i+0x1e6>
 800635c:	6833      	ldr	r3, [r6, #0]
 800635e:	6820      	ldr	r0, [r4, #0]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	6031      	str	r1, [r6, #0]
 8006364:	0606      	lsls	r6, r0, #24
 8006366:	d501      	bpl.n	800636c <_printf_i+0xbc>
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	e003      	b.n	8006374 <_printf_i+0xc4>
 800636c:	0645      	lsls	r5, r0, #25
 800636e:	d5fb      	bpl.n	8006368 <_printf_i+0xb8>
 8006370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006374:	2d00      	cmp	r5, #0
 8006376:	da03      	bge.n	8006380 <_printf_i+0xd0>
 8006378:	232d      	movs	r3, #45	@ 0x2d
 800637a:	426d      	negs	r5, r5
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006380:	4858      	ldr	r0, [pc, #352]	@ (80064e4 <_printf_i+0x234>)
 8006382:	230a      	movs	r3, #10
 8006384:	e011      	b.n	80063aa <_printf_i+0xfa>
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	0608      	lsls	r0, r1, #24
 800638c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006390:	d402      	bmi.n	8006398 <_printf_i+0xe8>
 8006392:	0649      	lsls	r1, r1, #25
 8006394:	bf48      	it	mi
 8006396:	b2ad      	uxthmi	r5, r5
 8006398:	2f6f      	cmp	r7, #111	@ 0x6f
 800639a:	4852      	ldr	r0, [pc, #328]	@ (80064e4 <_printf_i+0x234>)
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	bf14      	ite	ne
 80063a0:	230a      	movne	r3, #10
 80063a2:	2308      	moveq	r3, #8
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063aa:	6866      	ldr	r6, [r4, #4]
 80063ac:	60a6      	str	r6, [r4, #8]
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	db05      	blt.n	80063be <_printf_i+0x10e>
 80063b2:	6821      	ldr	r1, [r4, #0]
 80063b4:	432e      	orrs	r6, r5
 80063b6:	f021 0104 	bic.w	r1, r1, #4
 80063ba:	6021      	str	r1, [r4, #0]
 80063bc:	d04b      	beq.n	8006456 <_printf_i+0x1a6>
 80063be:	4616      	mov	r6, r2
 80063c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80063c4:	fb03 5711 	mls	r7, r3, r1, r5
 80063c8:	5dc7      	ldrb	r7, [r0, r7]
 80063ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ce:	462f      	mov	r7, r5
 80063d0:	42bb      	cmp	r3, r7
 80063d2:	460d      	mov	r5, r1
 80063d4:	d9f4      	bls.n	80063c0 <_printf_i+0x110>
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d10b      	bne.n	80063f2 <_printf_i+0x142>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	07df      	lsls	r7, r3, #31
 80063de:	d508      	bpl.n	80063f2 <_printf_i+0x142>
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	6861      	ldr	r1, [r4, #4]
 80063e4:	4299      	cmp	r1, r3
 80063e6:	bfde      	ittt	le
 80063e8:	2330      	movle	r3, #48	@ 0x30
 80063ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80063f2:	1b92      	subs	r2, r2, r6
 80063f4:	6122      	str	r2, [r4, #16]
 80063f6:	f8cd a000 	str.w	sl, [sp]
 80063fa:	464b      	mov	r3, r9
 80063fc:	aa03      	add	r2, sp, #12
 80063fe:	4621      	mov	r1, r4
 8006400:	4640      	mov	r0, r8
 8006402:	f7ff fee7 	bl	80061d4 <_printf_common>
 8006406:	3001      	adds	r0, #1
 8006408:	d14a      	bne.n	80064a0 <_printf_i+0x1f0>
 800640a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800640e:	b004      	add	sp, #16
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f043 0320 	orr.w	r3, r3, #32
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	4832      	ldr	r0, [pc, #200]	@ (80064e8 <_printf_i+0x238>)
 800641e:	2778      	movs	r7, #120	@ 0x78
 8006420:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	6831      	ldr	r1, [r6, #0]
 8006428:	061f      	lsls	r7, r3, #24
 800642a:	f851 5b04 	ldr.w	r5, [r1], #4
 800642e:	d402      	bmi.n	8006436 <_printf_i+0x186>
 8006430:	065f      	lsls	r7, r3, #25
 8006432:	bf48      	it	mi
 8006434:	b2ad      	uxthmi	r5, r5
 8006436:	6031      	str	r1, [r6, #0]
 8006438:	07d9      	lsls	r1, r3, #31
 800643a:	bf44      	itt	mi
 800643c:	f043 0320 	orrmi.w	r3, r3, #32
 8006440:	6023      	strmi	r3, [r4, #0]
 8006442:	b11d      	cbz	r5, 800644c <_printf_i+0x19c>
 8006444:	2310      	movs	r3, #16
 8006446:	e7ad      	b.n	80063a4 <_printf_i+0xf4>
 8006448:	4826      	ldr	r0, [pc, #152]	@ (80064e4 <_printf_i+0x234>)
 800644a:	e7e9      	b.n	8006420 <_printf_i+0x170>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	f023 0320 	bic.w	r3, r3, #32
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	e7f6      	b.n	8006444 <_printf_i+0x194>
 8006456:	4616      	mov	r6, r2
 8006458:	e7bd      	b.n	80063d6 <_printf_i+0x126>
 800645a:	6833      	ldr	r3, [r6, #0]
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	6961      	ldr	r1, [r4, #20]
 8006460:	1d18      	adds	r0, r3, #4
 8006462:	6030      	str	r0, [r6, #0]
 8006464:	062e      	lsls	r6, r5, #24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	d501      	bpl.n	800646e <_printf_i+0x1be>
 800646a:	6019      	str	r1, [r3, #0]
 800646c:	e002      	b.n	8006474 <_printf_i+0x1c4>
 800646e:	0668      	lsls	r0, r5, #25
 8006470:	d5fb      	bpl.n	800646a <_printf_i+0x1ba>
 8006472:	8019      	strh	r1, [r3, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	4616      	mov	r6, r2
 800647a:	e7bc      	b.n	80063f6 <_printf_i+0x146>
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	6032      	str	r2, [r6, #0]
 8006482:	681e      	ldr	r6, [r3, #0]
 8006484:	6862      	ldr	r2, [r4, #4]
 8006486:	2100      	movs	r1, #0
 8006488:	4630      	mov	r0, r6
 800648a:	f7f9 fea9 	bl	80001e0 <memchr>
 800648e:	b108      	cbz	r0, 8006494 <_printf_i+0x1e4>
 8006490:	1b80      	subs	r0, r0, r6
 8006492:	6060      	str	r0, [r4, #4]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2300      	movs	r3, #0
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649e:	e7aa      	b.n	80063f6 <_printf_i+0x146>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	4632      	mov	r2, r6
 80064a4:	4649      	mov	r1, r9
 80064a6:	4640      	mov	r0, r8
 80064a8:	47d0      	blx	sl
 80064aa:	3001      	adds	r0, #1
 80064ac:	d0ad      	beq.n	800640a <_printf_i+0x15a>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	079b      	lsls	r3, r3, #30
 80064b2:	d413      	bmi.n	80064dc <_printf_i+0x22c>
 80064b4:	68e0      	ldr	r0, [r4, #12]
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	4298      	cmp	r0, r3
 80064ba:	bfb8      	it	lt
 80064bc:	4618      	movlt	r0, r3
 80064be:	e7a6      	b.n	800640e <_printf_i+0x15e>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4632      	mov	r2, r6
 80064c4:	4649      	mov	r1, r9
 80064c6:	4640      	mov	r0, r8
 80064c8:	47d0      	blx	sl
 80064ca:	3001      	adds	r0, #1
 80064cc:	d09d      	beq.n	800640a <_printf_i+0x15a>
 80064ce:	3501      	adds	r5, #1
 80064d0:	68e3      	ldr	r3, [r4, #12]
 80064d2:	9903      	ldr	r1, [sp, #12]
 80064d4:	1a5b      	subs	r3, r3, r1
 80064d6:	42ab      	cmp	r3, r5
 80064d8:	dcf2      	bgt.n	80064c0 <_printf_i+0x210>
 80064da:	e7eb      	b.n	80064b4 <_printf_i+0x204>
 80064dc:	2500      	movs	r5, #0
 80064de:	f104 0619 	add.w	r6, r4, #25
 80064e2:	e7f5      	b.n	80064d0 <_printf_i+0x220>
 80064e4:	08008bca 	.word	0x08008bca
 80064e8:	08008bdb 	.word	0x08008bdb

080064ec <std>:
 80064ec:	2300      	movs	r3, #0
 80064ee:	b510      	push	{r4, lr}
 80064f0:	4604      	mov	r4, r0
 80064f2:	e9c0 3300 	strd	r3, r3, [r0]
 80064f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064fa:	6083      	str	r3, [r0, #8]
 80064fc:	8181      	strh	r1, [r0, #12]
 80064fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006500:	81c2      	strh	r2, [r0, #14]
 8006502:	6183      	str	r3, [r0, #24]
 8006504:	4619      	mov	r1, r3
 8006506:	2208      	movs	r2, #8
 8006508:	305c      	adds	r0, #92	@ 0x5c
 800650a:	f000 fa51 	bl	80069b0 <memset>
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x58>)
 8006510:	6263      	str	r3, [r4, #36]	@ 0x24
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <std+0x5c>)
 8006514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <std+0x60>)
 8006518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800651a:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <std+0x64>)
 800651c:	6323      	str	r3, [r4, #48]	@ 0x30
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <std+0x68>)
 8006520:	6224      	str	r4, [r4, #32]
 8006522:	429c      	cmp	r4, r3
 8006524:	d006      	beq.n	8006534 <std+0x48>
 8006526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800652a:	4294      	cmp	r4, r2
 800652c:	d002      	beq.n	8006534 <std+0x48>
 800652e:	33d0      	adds	r3, #208	@ 0xd0
 8006530:	429c      	cmp	r4, r3
 8006532:	d105      	bne.n	8006540 <std+0x54>
 8006534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653c:	f000 bab4 	b.w	8006aa8 <__retarget_lock_init_recursive>
 8006540:	bd10      	pop	{r4, pc}
 8006542:	bf00      	nop
 8006544:	08006801 	.word	0x08006801
 8006548:	08006823 	.word	0x08006823
 800654c:	0800685b 	.word	0x0800685b
 8006550:	0800687f 	.word	0x0800687f
 8006554:	200002f4 	.word	0x200002f4

08006558 <stdio_exit_handler>:
 8006558:	4a02      	ldr	r2, [pc, #8]	@ (8006564 <stdio_exit_handler+0xc>)
 800655a:	4903      	ldr	r1, [pc, #12]	@ (8006568 <stdio_exit_handler+0x10>)
 800655c:	4803      	ldr	r0, [pc, #12]	@ (800656c <stdio_exit_handler+0x14>)
 800655e:	f000 b869 	b.w	8006634 <_fwalk_sglue>
 8006562:	bf00      	nop
 8006564:	2000000c 	.word	0x2000000c
 8006568:	080086b1 	.word	0x080086b1
 800656c:	2000001c 	.word	0x2000001c

08006570 <cleanup_stdio>:
 8006570:	6841      	ldr	r1, [r0, #4]
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <cleanup_stdio+0x34>)
 8006574:	4299      	cmp	r1, r3
 8006576:	b510      	push	{r4, lr}
 8006578:	4604      	mov	r4, r0
 800657a:	d001      	beq.n	8006580 <cleanup_stdio+0x10>
 800657c:	f002 f898 	bl	80086b0 <_fflush_r>
 8006580:	68a1      	ldr	r1, [r4, #8]
 8006582:	4b09      	ldr	r3, [pc, #36]	@ (80065a8 <cleanup_stdio+0x38>)
 8006584:	4299      	cmp	r1, r3
 8006586:	d002      	beq.n	800658e <cleanup_stdio+0x1e>
 8006588:	4620      	mov	r0, r4
 800658a:	f002 f891 	bl	80086b0 <_fflush_r>
 800658e:	68e1      	ldr	r1, [r4, #12]
 8006590:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <cleanup_stdio+0x3c>)
 8006592:	4299      	cmp	r1, r3
 8006594:	d004      	beq.n	80065a0 <cleanup_stdio+0x30>
 8006596:	4620      	mov	r0, r4
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f002 b888 	b.w	80086b0 <_fflush_r>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	200002f4 	.word	0x200002f4
 80065a8:	2000035c 	.word	0x2000035c
 80065ac:	200003c4 	.word	0x200003c4

080065b0 <global_stdio_init.part.0>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <global_stdio_init.part.0+0x30>)
 80065b4:	4c0b      	ldr	r4, [pc, #44]	@ (80065e4 <global_stdio_init.part.0+0x34>)
 80065b6:	4a0c      	ldr	r2, [pc, #48]	@ (80065e8 <global_stdio_init.part.0+0x38>)
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	4620      	mov	r0, r4
 80065bc:	2200      	movs	r2, #0
 80065be:	2104      	movs	r1, #4
 80065c0:	f7ff ff94 	bl	80064ec <std>
 80065c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065c8:	2201      	movs	r2, #1
 80065ca:	2109      	movs	r1, #9
 80065cc:	f7ff ff8e 	bl	80064ec <std>
 80065d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065d4:	2202      	movs	r2, #2
 80065d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065da:	2112      	movs	r1, #18
 80065dc:	f7ff bf86 	b.w	80064ec <std>
 80065e0:	2000042c 	.word	0x2000042c
 80065e4:	200002f4 	.word	0x200002f4
 80065e8:	08006559 	.word	0x08006559

080065ec <__sfp_lock_acquire>:
 80065ec:	4801      	ldr	r0, [pc, #4]	@ (80065f4 <__sfp_lock_acquire+0x8>)
 80065ee:	f000 ba5c 	b.w	8006aaa <__retarget_lock_acquire_recursive>
 80065f2:	bf00      	nop
 80065f4:	20000435 	.word	0x20000435

080065f8 <__sfp_lock_release>:
 80065f8:	4801      	ldr	r0, [pc, #4]	@ (8006600 <__sfp_lock_release+0x8>)
 80065fa:	f000 ba57 	b.w	8006aac <__retarget_lock_release_recursive>
 80065fe:	bf00      	nop
 8006600:	20000435 	.word	0x20000435

08006604 <__sinit>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	f7ff fff0 	bl	80065ec <__sfp_lock_acquire>
 800660c:	6a23      	ldr	r3, [r4, #32]
 800660e:	b11b      	cbz	r3, 8006618 <__sinit+0x14>
 8006610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006614:	f7ff bff0 	b.w	80065f8 <__sfp_lock_release>
 8006618:	4b04      	ldr	r3, [pc, #16]	@ (800662c <__sinit+0x28>)
 800661a:	6223      	str	r3, [r4, #32]
 800661c:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <__sinit+0x2c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f5      	bne.n	8006610 <__sinit+0xc>
 8006624:	f7ff ffc4 	bl	80065b0 <global_stdio_init.part.0>
 8006628:	e7f2      	b.n	8006610 <__sinit+0xc>
 800662a:	bf00      	nop
 800662c:	08006571 	.word	0x08006571
 8006630:	2000042c 	.word	0x2000042c

08006634 <_fwalk_sglue>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	4607      	mov	r7, r0
 800663a:	4688      	mov	r8, r1
 800663c:	4614      	mov	r4, r2
 800663e:	2600      	movs	r6, #0
 8006640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006644:	f1b9 0901 	subs.w	r9, r9, #1
 8006648:	d505      	bpl.n	8006656 <_fwalk_sglue+0x22>
 800664a:	6824      	ldr	r4, [r4, #0]
 800664c:	2c00      	cmp	r4, #0
 800664e:	d1f7      	bne.n	8006640 <_fwalk_sglue+0xc>
 8006650:	4630      	mov	r0, r6
 8006652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d907      	bls.n	800666c <_fwalk_sglue+0x38>
 800665c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006660:	3301      	adds	r3, #1
 8006662:	d003      	beq.n	800666c <_fwalk_sglue+0x38>
 8006664:	4629      	mov	r1, r5
 8006666:	4638      	mov	r0, r7
 8006668:	47c0      	blx	r8
 800666a:	4306      	orrs	r6, r0
 800666c:	3568      	adds	r5, #104	@ 0x68
 800666e:	e7e9      	b.n	8006644 <_fwalk_sglue+0x10>

08006670 <iprintf>:
 8006670:	b40f      	push	{r0, r1, r2, r3}
 8006672:	b507      	push	{r0, r1, r2, lr}
 8006674:	4906      	ldr	r1, [pc, #24]	@ (8006690 <iprintf+0x20>)
 8006676:	ab04      	add	r3, sp, #16
 8006678:	6808      	ldr	r0, [r1, #0]
 800667a:	f853 2b04 	ldr.w	r2, [r3], #4
 800667e:	6881      	ldr	r1, [r0, #8]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	f001 fe79 	bl	8008378 <_vfiprintf_r>
 8006686:	b003      	add	sp, #12
 8006688:	f85d eb04 	ldr.w	lr, [sp], #4
 800668c:	b004      	add	sp, #16
 800668e:	4770      	bx	lr
 8006690:	20000018 	.word	0x20000018

08006694 <_puts_r>:
 8006694:	6a03      	ldr	r3, [r0, #32]
 8006696:	b570      	push	{r4, r5, r6, lr}
 8006698:	6884      	ldr	r4, [r0, #8]
 800669a:	4605      	mov	r5, r0
 800669c:	460e      	mov	r6, r1
 800669e:	b90b      	cbnz	r3, 80066a4 <_puts_r+0x10>
 80066a0:	f7ff ffb0 	bl	8006604 <__sinit>
 80066a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d405      	bmi.n	80066b6 <_puts_r+0x22>
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	0598      	lsls	r0, r3, #22
 80066ae:	d402      	bmi.n	80066b6 <_puts_r+0x22>
 80066b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066b2:	f000 f9fa 	bl	8006aaa <__retarget_lock_acquire_recursive>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	0719      	lsls	r1, r3, #28
 80066ba:	d502      	bpl.n	80066c2 <_puts_r+0x2e>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d135      	bne.n	800672e <_puts_r+0x9a>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f91d 	bl	8006904 <__swsetup_r>
 80066ca:	b380      	cbz	r0, 800672e <_puts_r+0x9a>
 80066cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80066d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066d2:	07da      	lsls	r2, r3, #31
 80066d4:	d405      	bmi.n	80066e2 <_puts_r+0x4e>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	059b      	lsls	r3, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_puts_r+0x4e>
 80066dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066de:	f000 f9e5 	bl	8006aac <__retarget_lock_release_recursive>
 80066e2:	4628      	mov	r0, r5
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	da04      	bge.n	80066f4 <_puts_r+0x60>
 80066ea:	69a2      	ldr	r2, [r4, #24]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	dc17      	bgt.n	8006720 <_puts_r+0x8c>
 80066f0:	290a      	cmp	r1, #10
 80066f2:	d015      	beq.n	8006720 <_puts_r+0x8c>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006702:	3b01      	subs	r3, #1
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	2900      	cmp	r1, #0
 8006708:	d1ed      	bne.n	80066e6 <_puts_r+0x52>
 800670a:	2b00      	cmp	r3, #0
 800670c:	da11      	bge.n	8006732 <_puts_r+0x9e>
 800670e:	4622      	mov	r2, r4
 8006710:	210a      	movs	r1, #10
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f8b7 	bl	8006886 <__swbuf_r>
 8006718:	3001      	adds	r0, #1
 800671a:	d0d7      	beq.n	80066cc <_puts_r+0x38>
 800671c:	250a      	movs	r5, #10
 800671e:	e7d7      	b.n	80066d0 <_puts_r+0x3c>
 8006720:	4622      	mov	r2, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 f8af 	bl	8006886 <__swbuf_r>
 8006728:	3001      	adds	r0, #1
 800672a:	d1e7      	bne.n	80066fc <_puts_r+0x68>
 800672c:	e7ce      	b.n	80066cc <_puts_r+0x38>
 800672e:	3e01      	subs	r6, #1
 8006730:	e7e4      	b.n	80066fc <_puts_r+0x68>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	220a      	movs	r2, #10
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	e7ee      	b.n	800671c <_puts_r+0x88>
	...

08006740 <puts>:
 8006740:	4b02      	ldr	r3, [pc, #8]	@ (800674c <puts+0xc>)
 8006742:	4601      	mov	r1, r0
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f7ff bfa5 	b.w	8006694 <_puts_r>
 800674a:	bf00      	nop
 800674c:	20000018 	.word	0x20000018

08006750 <sniprintf>:
 8006750:	b40c      	push	{r2, r3}
 8006752:	b530      	push	{r4, r5, lr}
 8006754:	4b18      	ldr	r3, [pc, #96]	@ (80067b8 <sniprintf+0x68>)
 8006756:	1e0c      	subs	r4, r1, #0
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	b09d      	sub	sp, #116	@ 0x74
 800675c:	da08      	bge.n	8006770 <sniprintf+0x20>
 800675e:	238b      	movs	r3, #139	@ 0x8b
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006766:	b01d      	add	sp, #116	@ 0x74
 8006768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676c:	b002      	add	sp, #8
 800676e:	4770      	bx	lr
 8006770:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006774:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800677e:	bf14      	ite	ne
 8006780:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006784:	4623      	moveq	r3, r4
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	9307      	str	r3, [sp, #28]
 800678a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800678e:	9002      	str	r0, [sp, #8]
 8006790:	9006      	str	r0, [sp, #24]
 8006792:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006796:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006798:	ab21      	add	r3, sp, #132	@ 0x84
 800679a:	a902      	add	r1, sp, #8
 800679c:	4628      	mov	r0, r5
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f001 fcc4 	bl	800812c <_svfiprintf_r>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	bfbc      	itt	lt
 80067a8:	238b      	movlt	r3, #139	@ 0x8b
 80067aa:	602b      	strlt	r3, [r5, #0]
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	d0da      	beq.n	8006766 <sniprintf+0x16>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e7d6      	b.n	8006766 <sniprintf+0x16>
 80067b8:	20000018 	.word	0x20000018

080067bc <siprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	b510      	push	{r4, lr}
 80067c0:	b09d      	sub	sp, #116	@ 0x74
 80067c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	9006      	str	r0, [sp, #24]
 80067c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067cc:	480a      	ldr	r0, [pc, #40]	@ (80067f8 <siprintf+0x3c>)
 80067ce:	9107      	str	r1, [sp, #28]
 80067d0:	9104      	str	r1, [sp, #16]
 80067d2:	490a      	ldr	r1, [pc, #40]	@ (80067fc <siprintf+0x40>)
 80067d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	2400      	movs	r4, #0
 80067dc:	a902      	add	r1, sp, #8
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80067e4:	f001 fca2 	bl	800812c <_svfiprintf_r>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	701c      	strb	r4, [r3, #0]
 80067ec:	b01d      	add	sp, #116	@ 0x74
 80067ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f2:	b003      	add	sp, #12
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000018 	.word	0x20000018
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <__sread>:
 8006800:	b510      	push	{r4, lr}
 8006802:	460c      	mov	r4, r1
 8006804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006808:	f000 f900 	bl	8006a0c <_read_r>
 800680c:	2800      	cmp	r0, #0
 800680e:	bfab      	itete	ge
 8006810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006812:	89a3      	ldrhlt	r3, [r4, #12]
 8006814:	181b      	addge	r3, r3, r0
 8006816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800681a:	bfac      	ite	ge
 800681c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800681e:	81a3      	strhlt	r3, [r4, #12]
 8006820:	bd10      	pop	{r4, pc}

08006822 <__swrite>:
 8006822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	461f      	mov	r7, r3
 8006828:	898b      	ldrh	r3, [r1, #12]
 800682a:	05db      	lsls	r3, r3, #23
 800682c:	4605      	mov	r5, r0
 800682e:	460c      	mov	r4, r1
 8006830:	4616      	mov	r6, r2
 8006832:	d505      	bpl.n	8006840 <__swrite+0x1e>
 8006834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006838:	2302      	movs	r3, #2
 800683a:	2200      	movs	r2, #0
 800683c:	f000 f8d4 	bl	80069e8 <_lseek_r>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	4628      	mov	r0, r5
 8006852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	f000 b8eb 	b.w	8006a30 <_write_r>

0800685a <__sseek>:
 800685a:	b510      	push	{r4, lr}
 800685c:	460c      	mov	r4, r1
 800685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006862:	f000 f8c1 	bl	80069e8 <_lseek_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	bf15      	itete	ne
 800686c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800686e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006876:	81a3      	strheq	r3, [r4, #12]
 8006878:	bf18      	it	ne
 800687a:	81a3      	strhne	r3, [r4, #12]
 800687c:	bd10      	pop	{r4, pc}

0800687e <__sclose>:
 800687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006882:	f000 b8a1 	b.w	80069c8 <_close_r>

08006886 <__swbuf_r>:
 8006886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006888:	460e      	mov	r6, r1
 800688a:	4614      	mov	r4, r2
 800688c:	4605      	mov	r5, r0
 800688e:	b118      	cbz	r0, 8006898 <__swbuf_r+0x12>
 8006890:	6a03      	ldr	r3, [r0, #32]
 8006892:	b90b      	cbnz	r3, 8006898 <__swbuf_r+0x12>
 8006894:	f7ff feb6 	bl	8006604 <__sinit>
 8006898:	69a3      	ldr	r3, [r4, #24]
 800689a:	60a3      	str	r3, [r4, #8]
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	071a      	lsls	r2, r3, #28
 80068a0:	d501      	bpl.n	80068a6 <__swbuf_r+0x20>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	b943      	cbnz	r3, 80068b8 <__swbuf_r+0x32>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f82b 	bl	8006904 <__swsetup_r>
 80068ae:	b118      	cbz	r0, 80068b8 <__swbuf_r+0x32>
 80068b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80068b4:	4638      	mov	r0, r7
 80068b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	6922      	ldr	r2, [r4, #16]
 80068bc:	1a98      	subs	r0, r3, r2
 80068be:	6963      	ldr	r3, [r4, #20]
 80068c0:	b2f6      	uxtb	r6, r6
 80068c2:	4283      	cmp	r3, r0
 80068c4:	4637      	mov	r7, r6
 80068c6:	dc05      	bgt.n	80068d4 <__swbuf_r+0x4e>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f001 fef0 	bl	80086b0 <_fflush_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1ed      	bne.n	80068b0 <__swbuf_r+0x2a>
 80068d4:	68a3      	ldr	r3, [r4, #8]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	60a3      	str	r3, [r4, #8]
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	6022      	str	r2, [r4, #0]
 80068e0:	701e      	strb	r6, [r3, #0]
 80068e2:	6962      	ldr	r2, [r4, #20]
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d004      	beq.n	80068f4 <__swbuf_r+0x6e>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d5e1      	bpl.n	80068b4 <__swbuf_r+0x2e>
 80068f0:	2e0a      	cmp	r6, #10
 80068f2:	d1df      	bne.n	80068b4 <__swbuf_r+0x2e>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f001 feda 	bl	80086b0 <_fflush_r>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0d9      	beq.n	80068b4 <__swbuf_r+0x2e>
 8006900:	e7d6      	b.n	80068b0 <__swbuf_r+0x2a>
	...

08006904 <__swsetup_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <__swsetup_r+0xa8>)
 8006908:	4605      	mov	r5, r0
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	460c      	mov	r4, r1
 800690e:	b118      	cbz	r0, 8006918 <__swsetup_r+0x14>
 8006910:	6a03      	ldr	r3, [r0, #32]
 8006912:	b90b      	cbnz	r3, 8006918 <__swsetup_r+0x14>
 8006914:	f7ff fe76 	bl	8006604 <__sinit>
 8006918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691c:	0719      	lsls	r1, r3, #28
 800691e:	d422      	bmi.n	8006966 <__swsetup_r+0x62>
 8006920:	06da      	lsls	r2, r3, #27
 8006922:	d407      	bmi.n	8006934 <__swsetup_r+0x30>
 8006924:	2209      	movs	r2, #9
 8006926:	602a      	str	r2, [r5, #0]
 8006928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006932:	e033      	b.n	800699c <__swsetup_r+0x98>
 8006934:	0758      	lsls	r0, r3, #29
 8006936:	d512      	bpl.n	800695e <__swsetup_r+0x5a>
 8006938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800693a:	b141      	cbz	r1, 800694e <__swsetup_r+0x4a>
 800693c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006940:	4299      	cmp	r1, r3
 8006942:	d002      	beq.n	800694a <__swsetup_r+0x46>
 8006944:	4628      	mov	r0, r5
 8006946:	f000 ff1b 	bl	8007780 <_free_r>
 800694a:	2300      	movs	r3, #0
 800694c:	6363      	str	r3, [r4, #52]	@ 0x34
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	2300      	movs	r3, #0
 8006958:	6063      	str	r3, [r4, #4]
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f043 0308 	orr.w	r3, r3, #8
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	b94b      	cbnz	r3, 800697e <__swsetup_r+0x7a>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006974:	d003      	beq.n	800697e <__swsetup_r+0x7a>
 8006976:	4621      	mov	r1, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f001 fee7 	bl	800874c <__smakebuf_r>
 800697e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006982:	f013 0201 	ands.w	r2, r3, #1
 8006986:	d00a      	beq.n	800699e <__swsetup_r+0x9a>
 8006988:	2200      	movs	r2, #0
 800698a:	60a2      	str	r2, [r4, #8]
 800698c:	6962      	ldr	r2, [r4, #20]
 800698e:	4252      	negs	r2, r2
 8006990:	61a2      	str	r2, [r4, #24]
 8006992:	6922      	ldr	r2, [r4, #16]
 8006994:	b942      	cbnz	r2, 80069a8 <__swsetup_r+0xa4>
 8006996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800699a:	d1c5      	bne.n	8006928 <__swsetup_r+0x24>
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	0799      	lsls	r1, r3, #30
 80069a0:	bf58      	it	pl
 80069a2:	6962      	ldrpl	r2, [r4, #20]
 80069a4:	60a2      	str	r2, [r4, #8]
 80069a6:	e7f4      	b.n	8006992 <__swsetup_r+0x8e>
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7f7      	b.n	800699c <__swsetup_r+0x98>
 80069ac:	20000018 	.word	0x20000018

080069b0 <memset>:
 80069b0:	4402      	add	r2, r0
 80069b2:	4603      	mov	r3, r0
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d100      	bne.n	80069ba <memset+0xa>
 80069b8:	4770      	bx	lr
 80069ba:	f803 1b01 	strb.w	r1, [r3], #1
 80069be:	e7f9      	b.n	80069b4 <memset+0x4>

080069c0 <_localeconv_r>:
 80069c0:	4800      	ldr	r0, [pc, #0]	@ (80069c4 <_localeconv_r+0x4>)
 80069c2:	4770      	bx	lr
 80069c4:	20000158 	.word	0x20000158

080069c8 <_close_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d06      	ldr	r5, [pc, #24]	@ (80069e4 <_close_r+0x1c>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fb fd32 	bl	800243c <_close>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_close_r+0x1a>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_close_r+0x1a>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000430 	.word	0x20000430

080069e8 <_lseek_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	@ (8006a08 <_lseek_r+0x20>)
 80069ec:	4604      	mov	r4, r0
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7fb fd47 	bl	800248a <_lseek>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_lseek_r+0x1e>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_lseek_r+0x1e>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20000430 	.word	0x20000430

08006a0c <_read_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	@ (8006a2c <_read_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fb fcd5 	bl	80023ca <_read>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_read_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_read_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000430 	.word	0x20000430

08006a30 <_write_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	@ (8006a50 <_write_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fb fce0 	bl	8002404 <_write>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_write_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_write_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000430 	.word	0x20000430

08006a54 <__errno>:
 8006a54:	4b01      	ldr	r3, [pc, #4]	@ (8006a5c <__errno+0x8>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000018 	.word	0x20000018

08006a60 <__libc_init_array>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4d0d      	ldr	r5, [pc, #52]	@ (8006a98 <__libc_init_array+0x38>)
 8006a64:	4c0d      	ldr	r4, [pc, #52]	@ (8006a9c <__libc_init_array+0x3c>)
 8006a66:	1b64      	subs	r4, r4, r5
 8006a68:	10a4      	asrs	r4, r4, #2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	d109      	bne.n	8006a84 <__libc_init_array+0x24>
 8006a70:	4d0b      	ldr	r5, [pc, #44]	@ (8006aa0 <__libc_init_array+0x40>)
 8006a72:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa4 <__libc_init_array+0x44>)
 8006a74:	f001 ffd8 	bl	8008a28 <_init>
 8006a78:	1b64      	subs	r4, r4, r5
 8006a7a:	10a4      	asrs	r4, r4, #2
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	42a6      	cmp	r6, r4
 8006a80:	d105      	bne.n	8006a8e <__libc_init_array+0x2e>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a88:	4798      	blx	r3
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7ee      	b.n	8006a6c <__libc_init_array+0xc>
 8006a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a92:	4798      	blx	r3
 8006a94:	3601      	adds	r6, #1
 8006a96:	e7f2      	b.n	8006a7e <__libc_init_array+0x1e>
 8006a98:	08008f34 	.word	0x08008f34
 8006a9c:	08008f34 	.word	0x08008f34
 8006aa0:	08008f34 	.word	0x08008f34
 8006aa4:	08008f38 	.word	0x08008f38

08006aa8 <__retarget_lock_init_recursive>:
 8006aa8:	4770      	bx	lr

08006aaa <__retarget_lock_acquire_recursive>:
 8006aaa:	4770      	bx	lr

08006aac <__retarget_lock_release_recursive>:
 8006aac:	4770      	bx	lr

08006aae <memcpy>:
 8006aae:	440a      	add	r2, r1
 8006ab0:	4291      	cmp	r1, r2
 8006ab2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ab6:	d100      	bne.n	8006aba <memcpy+0xc>
 8006ab8:	4770      	bx	lr
 8006aba:	b510      	push	{r4, lr}
 8006abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac4:	4291      	cmp	r1, r2
 8006ac6:	d1f9      	bne.n	8006abc <memcpy+0xe>
 8006ac8:	bd10      	pop	{r4, pc}

08006aca <quorem>:
 8006aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ace:	6903      	ldr	r3, [r0, #16]
 8006ad0:	690c      	ldr	r4, [r1, #16]
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	db7e      	blt.n	8006bd6 <quorem+0x10c>
 8006ad8:	3c01      	subs	r4, #1
 8006ada:	f101 0814 	add.w	r8, r1, #20
 8006ade:	00a3      	lsls	r3, r4, #2
 8006ae0:	f100 0514 	add.w	r5, r0, #20
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af4:	3301      	adds	r3, #1
 8006af6:	429a      	cmp	r2, r3
 8006af8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b00:	d32e      	bcc.n	8006b60 <quorem+0x96>
 8006b02:	f04f 0a00 	mov.w	sl, #0
 8006b06:	46c4      	mov	ip, r8
 8006b08:	46ae      	mov	lr, r5
 8006b0a:	46d3      	mov	fp, sl
 8006b0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b10:	b298      	uxth	r0, r3
 8006b12:	fb06 a000 	mla	r0, r6, r0, sl
 8006b16:	0c02      	lsrs	r2, r0, #16
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	fb06 2303 	mla	r3, r6, r3, r2
 8006b1e:	f8de 2000 	ldr.w	r2, [lr]
 8006b22:	b280      	uxth	r0, r0
 8006b24:	b292      	uxth	r2, r2
 8006b26:	1a12      	subs	r2, r2, r0
 8006b28:	445a      	add	r2, fp
 8006b2a:	f8de 0000 	ldr.w	r0, [lr]
 8006b2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b42:	45e1      	cmp	r9, ip
 8006b44:	f84e 2b04 	str.w	r2, [lr], #4
 8006b48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b4c:	d2de      	bcs.n	8006b0c <quorem+0x42>
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	58eb      	ldr	r3, [r5, r3]
 8006b52:	b92b      	cbnz	r3, 8006b60 <quorem+0x96>
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	d32f      	bcc.n	8006bbe <quorem+0xf4>
 8006b5e:	613c      	str	r4, [r7, #16]
 8006b60:	4638      	mov	r0, r7
 8006b62:	f001 f97f 	bl	8007e64 <__mcmp>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	db25      	blt.n	8006bb6 <quorem+0xec>
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b72:	f8d1 c000 	ldr.w	ip, [r1]
 8006b76:	fa1f fe82 	uxth.w	lr, r2
 8006b7a:	fa1f f38c 	uxth.w	r3, ip
 8006b7e:	eba3 030e 	sub.w	r3, r3, lr
 8006b82:	4403      	add	r3, r0
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b94:	45c1      	cmp	r9, r8
 8006b96:	f841 3b04 	str.w	r3, [r1], #4
 8006b9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b9e:	d2e6      	bcs.n	8006b6e <quorem+0xa4>
 8006ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba8:	b922      	cbnz	r2, 8006bb4 <quorem+0xea>
 8006baa:	3b04      	subs	r3, #4
 8006bac:	429d      	cmp	r5, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	d30b      	bcc.n	8006bca <quorem+0x100>
 8006bb2:	613c      	str	r4, [r7, #16]
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	b003      	add	sp, #12
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	3b04      	subs	r3, #4
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d1cb      	bne.n	8006b5e <quorem+0x94>
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	e7c6      	b.n	8006b58 <quorem+0x8e>
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	3b04      	subs	r3, #4
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	d1ef      	bne.n	8006bb2 <quorem+0xe8>
 8006bd2:	3c01      	subs	r4, #1
 8006bd4:	e7ea      	b.n	8006bac <quorem+0xe2>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e7ee      	b.n	8006bb8 <quorem+0xee>
 8006bda:	0000      	movs	r0, r0
 8006bdc:	0000      	movs	r0, r0
	...

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	69c7      	ldr	r7, [r0, #28]
 8006be6:	b097      	sub	sp, #92	@ 0x5c
 8006be8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006bec:	ec55 4b10 	vmov	r4, r5, d0
 8006bf0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006bf2:	9107      	str	r1, [sp, #28]
 8006bf4:	4681      	mov	r9, r0
 8006bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bf8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006bfa:	b97f      	cbnz	r7, 8006c1c <_dtoa_r+0x3c>
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	f000 fe09 	bl	8007814 <malloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	f8c9 001c 	str.w	r0, [r9, #28]
 8006c08:	b920      	cbnz	r0, 8006c14 <_dtoa_r+0x34>
 8006c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8006eb0 <_dtoa_r+0x2d0>)
 8006c0c:	21ef      	movs	r1, #239	@ 0xef
 8006c0e:	48a9      	ldr	r0, [pc, #676]	@ (8006eb4 <_dtoa_r+0x2d4>)
 8006c10:	f001 fe24 	bl	800885c <__assert_func>
 8006c14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c18:	6007      	str	r7, [r0, #0]
 8006c1a:	60c7      	str	r7, [r0, #12]
 8006c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	b159      	cbz	r1, 8006c3c <_dtoa_r+0x5c>
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	604a      	str	r2, [r1, #4]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4093      	lsls	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
 8006c2e:	4648      	mov	r0, r9
 8006c30:	f000 fee6 	bl	8007a00 <_Bfree>
 8006c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	1e2b      	subs	r3, r5, #0
 8006c3e:	bfb9      	ittee	lt
 8006c40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c44:	9305      	strlt	r3, [sp, #20]
 8006c46:	2300      	movge	r3, #0
 8006c48:	6033      	strge	r3, [r6, #0]
 8006c4a:	9f05      	ldr	r7, [sp, #20]
 8006c4c:	4b9a      	ldr	r3, [pc, #616]	@ (8006eb8 <_dtoa_r+0x2d8>)
 8006c4e:	bfbc      	itt	lt
 8006c50:	2201      	movlt	r2, #1
 8006c52:	6032      	strlt	r2, [r6, #0]
 8006c54:	43bb      	bics	r3, r7
 8006c56:	d112      	bne.n	8006c7e <_dtoa_r+0x9e>
 8006c58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c64:	4323      	orrs	r3, r4
 8006c66:	f000 855a 	beq.w	800771e <_dtoa_r+0xb3e>
 8006c6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006ecc <_dtoa_r+0x2ec>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 855c 	beq.w	800772e <_dtoa_r+0xb4e>
 8006c76:	f10a 0303 	add.w	r3, sl, #3
 8006c7a:	f000 bd56 	b.w	800772a <_dtoa_r+0xb4a>
 8006c7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006c82:	2200      	movs	r2, #0
 8006c84:	ec51 0b17 	vmov	r0, r1, d7
 8006c88:	2300      	movs	r3, #0
 8006c8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006c8e:	f7f9 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c92:	4680      	mov	r8, r0
 8006c94:	b158      	cbz	r0, 8006cae <_dtoa_r+0xce>
 8006c96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c9e:	b113      	cbz	r3, 8006ca6 <_dtoa_r+0xc6>
 8006ca0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ca2:	4b86      	ldr	r3, [pc, #536]	@ (8006ebc <_dtoa_r+0x2dc>)
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006ed0 <_dtoa_r+0x2f0>
 8006caa:	f000 bd40 	b.w	800772e <_dtoa_r+0xb4e>
 8006cae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006cb2:	aa14      	add	r2, sp, #80	@ 0x50
 8006cb4:	a915      	add	r1, sp, #84	@ 0x54
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	f001 f984 	bl	8007fc4 <__d2b>
 8006cbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006cc0:	9002      	str	r0, [sp, #8]
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d078      	beq.n	8006db8 <_dtoa_r+0x1d8>
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b76      	ldr	r3, [pc, #472]	@ (8006ec0 <_dtoa_r+0x2e0>)
 8006ce6:	f7f9 fad7 	bl	8000298 <__aeabi_dsub>
 8006cea:	a36b      	add	r3, pc, #428	@ (adr r3, 8006e98 <_dtoa_r+0x2b8>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fc8a 	bl	8000608 <__aeabi_dmul>
 8006cf4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ea0 <_dtoa_r+0x2c0>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 facf 	bl	800029c <__adddf3>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4630      	mov	r0, r6
 8006d02:	460d      	mov	r5, r1
 8006d04:	f7f9 fc16 	bl	8000534 <__aeabi_i2d>
 8006d08:	a367      	add	r3, pc, #412	@ (adr r3, 8006ea8 <_dtoa_r+0x2c8>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fc7b 	bl	8000608 <__aeabi_dmul>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fabf 	bl	800029c <__adddf3>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
 8006d22:	f7f9 ff21 	bl	8000b68 <__aeabi_d2iz>
 8006d26:	2200      	movs	r2, #0
 8006d28:	4607      	mov	r7, r0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f7f9 fedc 	bl	8000aec <__aeabi_dcmplt>
 8006d34:	b140      	cbz	r0, 8006d48 <_dtoa_r+0x168>
 8006d36:	4638      	mov	r0, r7
 8006d38:	f7f9 fbfc 	bl	8000534 <__aeabi_i2d>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	462b      	mov	r3, r5
 8006d40:	f7f9 feca 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d44:	b900      	cbnz	r0, 8006d48 <_dtoa_r+0x168>
 8006d46:	3f01      	subs	r7, #1
 8006d48:	2f16      	cmp	r7, #22
 8006d4a:	d852      	bhi.n	8006df2 <_dtoa_r+0x212>
 8006d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec4 <_dtoa_r+0x2e4>)
 8006d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d5a:	f7f9 fec7 	bl	8000aec <__aeabi_dcmplt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d049      	beq.n	8006df6 <_dtoa_r+0x216>
 8006d62:	3f01      	subs	r7, #1
 8006d64:	2300      	movs	r3, #0
 8006d66:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d6a:	1b9b      	subs	r3, r3, r6
 8006d6c:	1e5a      	subs	r2, r3, #1
 8006d6e:	bf45      	ittet	mi
 8006d70:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d74:	9300      	strmi	r3, [sp, #0]
 8006d76:	2300      	movpl	r3, #0
 8006d78:	2300      	movmi	r3, #0
 8006d7a:	9206      	str	r2, [sp, #24]
 8006d7c:	bf54      	ite	pl
 8006d7e:	9300      	strpl	r3, [sp, #0]
 8006d80:	9306      	strmi	r3, [sp, #24]
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	db39      	blt.n	8006dfa <_dtoa_r+0x21a>
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	970d      	str	r7, [sp, #52]	@ 0x34
 8006d8a:	443b      	add	r3, r7
 8006d8c:	9306      	str	r3, [sp, #24]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9308      	str	r3, [sp, #32]
 8006d92:	9b07      	ldr	r3, [sp, #28]
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d863      	bhi.n	8006e60 <_dtoa_r+0x280>
 8006d98:	2b05      	cmp	r3, #5
 8006d9a:	bfc4      	itt	gt
 8006d9c:	3b04      	subgt	r3, #4
 8006d9e:	9307      	strgt	r3, [sp, #28]
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	f1a3 0302 	sub.w	r3, r3, #2
 8006da6:	bfcc      	ite	gt
 8006da8:	2400      	movgt	r4, #0
 8006daa:	2401      	movle	r4, #1
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d863      	bhi.n	8006e78 <_dtoa_r+0x298>
 8006db0:	e8df f003 	tbb	[pc, r3]
 8006db4:	2b375452 	.word	0x2b375452
 8006db8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006dbc:	441e      	add	r6, r3
 8006dbe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	bfc1      	itttt	gt
 8006dc6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006dca:	409f      	lslgt	r7, r3
 8006dcc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dd4:	bfd6      	itet	le
 8006dd6:	f1c3 0320 	rsble	r3, r3, #32
 8006dda:	ea47 0003 	orrgt.w	r0, r7, r3
 8006dde:	fa04 f003 	lslle.w	r0, r4, r3
 8006de2:	f7f9 fb97 	bl	8000514 <__aeabi_ui2d>
 8006de6:	2201      	movs	r2, #1
 8006de8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006dec:	3e01      	subs	r6, #1
 8006dee:	9212      	str	r2, [sp, #72]	@ 0x48
 8006df0:	e776      	b.n	8006ce0 <_dtoa_r+0x100>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7b7      	b.n	8006d66 <_dtoa_r+0x186>
 8006df6:	9010      	str	r0, [sp, #64]	@ 0x40
 8006df8:	e7b6      	b.n	8006d68 <_dtoa_r+0x188>
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	1bdb      	subs	r3, r3, r7
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	427b      	negs	r3, r7
 8006e02:	9308      	str	r3, [sp, #32]
 8006e04:	2300      	movs	r3, #0
 8006e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e08:	e7c3      	b.n	8006d92 <_dtoa_r+0x1b2>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e10:	eb07 0b03 	add.w	fp, r7, r3
 8006e14:	f10b 0301 	add.w	r3, fp, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	9303      	str	r3, [sp, #12]
 8006e1c:	bfb8      	it	lt
 8006e1e:	2301      	movlt	r3, #1
 8006e20:	e006      	b.n	8006e30 <_dtoa_r+0x250>
 8006e22:	2301      	movs	r3, #1
 8006e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dd28      	ble.n	8006e7e <_dtoa_r+0x29e>
 8006e2c:	469b      	mov	fp, r3
 8006e2e:	9303      	str	r3, [sp, #12]
 8006e30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006e34:	2100      	movs	r1, #0
 8006e36:	2204      	movs	r2, #4
 8006e38:	f102 0514 	add.w	r5, r2, #20
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	d926      	bls.n	8006e8e <_dtoa_r+0x2ae>
 8006e40:	6041      	str	r1, [r0, #4]
 8006e42:	4648      	mov	r0, r9
 8006e44:	f000 fd9c 	bl	8007980 <_Balloc>
 8006e48:	4682      	mov	sl, r0
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d142      	bne.n	8006ed4 <_dtoa_r+0x2f4>
 8006e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec8 <_dtoa_r+0x2e8>)
 8006e50:	4602      	mov	r2, r0
 8006e52:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e56:	e6da      	b.n	8006c0e <_dtoa_r+0x2e>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e7e3      	b.n	8006e24 <_dtoa_r+0x244>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e7d5      	b.n	8006e0c <_dtoa_r+0x22c>
 8006e60:	2401      	movs	r4, #1
 8006e62:	2300      	movs	r3, #0
 8006e64:	9307      	str	r3, [sp, #28]
 8006e66:	9409      	str	r4, [sp, #36]	@ 0x24
 8006e68:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e72:	2312      	movs	r3, #18
 8006e74:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e76:	e7db      	b.n	8006e30 <_dtoa_r+0x250>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	e7f4      	b.n	8006e68 <_dtoa_r+0x288>
 8006e7e:	f04f 0b01 	mov.w	fp, #1
 8006e82:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e86:	465b      	mov	r3, fp
 8006e88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006e8c:	e7d0      	b.n	8006e30 <_dtoa_r+0x250>
 8006e8e:	3101      	adds	r1, #1
 8006e90:	0052      	lsls	r2, r2, #1
 8006e92:	e7d1      	b.n	8006e38 <_dtoa_r+0x258>
 8006e94:	f3af 8000 	nop.w
 8006e98:	636f4361 	.word	0x636f4361
 8006e9c:	3fd287a7 	.word	0x3fd287a7
 8006ea0:	8b60c8b3 	.word	0x8b60c8b3
 8006ea4:	3fc68a28 	.word	0x3fc68a28
 8006ea8:	509f79fb 	.word	0x509f79fb
 8006eac:	3fd34413 	.word	0x3fd34413
 8006eb0:	08008bf9 	.word	0x08008bf9
 8006eb4:	08008c10 	.word	0x08008c10
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	08008bc9 	.word	0x08008bc9
 8006ec0:	3ff80000 	.word	0x3ff80000
 8006ec4:	08008d60 	.word	0x08008d60
 8006ec8:	08008c68 	.word	0x08008c68
 8006ecc:	08008bf5 	.word	0x08008bf5
 8006ed0:	08008bc8 	.word	0x08008bc8
 8006ed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ed8:	6018      	str	r0, [r3, #0]
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	2b0e      	cmp	r3, #14
 8006ede:	f200 80a1 	bhi.w	8007024 <_dtoa_r+0x444>
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	f000 809e 	beq.w	8007024 <_dtoa_r+0x444>
 8006ee8:	2f00      	cmp	r7, #0
 8006eea:	dd33      	ble.n	8006f54 <_dtoa_r+0x374>
 8006eec:	4b9c      	ldr	r3, [pc, #624]	@ (8007160 <_dtoa_r+0x580>)
 8006eee:	f007 020f 	and.w	r2, r7, #15
 8006ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef6:	ed93 7b00 	vldr	d7, [r3]
 8006efa:	05f8      	lsls	r0, r7, #23
 8006efc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006f00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f04:	d516      	bpl.n	8006f34 <_dtoa_r+0x354>
 8006f06:	4b97      	ldr	r3, [pc, #604]	@ (8007164 <_dtoa_r+0x584>)
 8006f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f10:	f7f9 fca4 	bl	800085c <__aeabi_ddiv>
 8006f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f18:	f004 040f 	and.w	r4, r4, #15
 8006f1c:	2603      	movs	r6, #3
 8006f1e:	4d91      	ldr	r5, [pc, #580]	@ (8007164 <_dtoa_r+0x584>)
 8006f20:	b954      	cbnz	r4, 8006f38 <_dtoa_r+0x358>
 8006f22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f2a:	f7f9 fc97 	bl	800085c <__aeabi_ddiv>
 8006f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f32:	e028      	b.n	8006f86 <_dtoa_r+0x3a6>
 8006f34:	2602      	movs	r6, #2
 8006f36:	e7f2      	b.n	8006f1e <_dtoa_r+0x33e>
 8006f38:	07e1      	lsls	r1, r4, #31
 8006f3a:	d508      	bpl.n	8006f4e <_dtoa_r+0x36e>
 8006f3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f44:	f7f9 fb60 	bl	8000608 <__aeabi_dmul>
 8006f48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	1064      	asrs	r4, r4, #1
 8006f50:	3508      	adds	r5, #8
 8006f52:	e7e5      	b.n	8006f20 <_dtoa_r+0x340>
 8006f54:	f000 80af 	beq.w	80070b6 <_dtoa_r+0x4d6>
 8006f58:	427c      	negs	r4, r7
 8006f5a:	4b81      	ldr	r3, [pc, #516]	@ (8007160 <_dtoa_r+0x580>)
 8006f5c:	4d81      	ldr	r5, [pc, #516]	@ (8007164 <_dtoa_r+0x584>)
 8006f5e:	f004 020f 	and.w	r2, r4, #15
 8006f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f6e:	f7f9 fb4b 	bl	8000608 <__aeabi_dmul>
 8006f72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f76:	1124      	asrs	r4, r4, #4
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2602      	movs	r6, #2
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	f040 808f 	bne.w	80070a0 <_dtoa_r+0x4c0>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d3      	bne.n	8006f2e <_dtoa_r+0x34e>
 8006f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8094 	beq.w	80070ba <_dtoa_r+0x4da>
 8006f92:	4b75      	ldr	r3, [pc, #468]	@ (8007168 <_dtoa_r+0x588>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fda7 	bl	8000aec <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f000 808b 	beq.w	80070ba <_dtoa_r+0x4da>
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8087 	beq.w	80070ba <_dtoa_r+0x4da>
 8006fac:	f1bb 0f00 	cmp.w	fp, #0
 8006fb0:	dd34      	ble.n	800701c <_dtoa_r+0x43c>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800716c <_dtoa_r+0x58c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 fb25 	bl	8000608 <__aeabi_dmul>
 8006fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	465c      	mov	r4, fp
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7f9 fab2 	bl	8000534 <__aeabi_i2d>
 8006fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd4:	f7f9 fb18 	bl	8000608 <__aeabi_dmul>
 8006fd8:	4b65      	ldr	r3, [pc, #404]	@ (8007170 <_dtoa_r+0x590>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f7f9 f95e 	bl	800029c <__adddf3>
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fe6:	2c00      	cmp	r4, #0
 8006fe8:	d16a      	bne.n	80070c0 <_dtoa_r+0x4e0>
 8006fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fee:	4b61      	ldr	r3, [pc, #388]	@ (8007174 <_dtoa_r+0x594>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f7f9 f951 	bl	8000298 <__aeabi_dsub>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4633      	mov	r3, r6
 8007002:	f7f9 fd91 	bl	8000b28 <__aeabi_dcmpgt>
 8007006:	2800      	cmp	r0, #0
 8007008:	f040 8298 	bne.w	800753c <_dtoa_r+0x95c>
 800700c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007010:	462a      	mov	r2, r5
 8007012:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007016:	f7f9 fd69 	bl	8000aec <__aeabi_dcmplt>
 800701a:	bb38      	cbnz	r0, 800706c <_dtoa_r+0x48c>
 800701c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007020:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007024:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	f2c0 8157 	blt.w	80072da <_dtoa_r+0x6fa>
 800702c:	2f0e      	cmp	r7, #14
 800702e:	f300 8154 	bgt.w	80072da <_dtoa_r+0x6fa>
 8007032:	4b4b      	ldr	r3, [pc, #300]	@ (8007160 <_dtoa_r+0x580>)
 8007034:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007038:	ed93 7b00 	vldr	d7, [r3]
 800703c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800703e:	2b00      	cmp	r3, #0
 8007040:	ed8d 7b00 	vstr	d7, [sp]
 8007044:	f280 80e5 	bge.w	8007212 <_dtoa_r+0x632>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f300 80e1 	bgt.w	8007212 <_dtoa_r+0x632>
 8007050:	d10c      	bne.n	800706c <_dtoa_r+0x48c>
 8007052:	4b48      	ldr	r3, [pc, #288]	@ (8007174 <_dtoa_r+0x594>)
 8007054:	2200      	movs	r2, #0
 8007056:	ec51 0b17 	vmov	r0, r1, d7
 800705a:	f7f9 fad5 	bl	8000608 <__aeabi_dmul>
 800705e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007062:	f7f9 fd57 	bl	8000b14 <__aeabi_dcmpge>
 8007066:	2800      	cmp	r0, #0
 8007068:	f000 8266 	beq.w	8007538 <_dtoa_r+0x958>
 800706c:	2400      	movs	r4, #0
 800706e:	4625      	mov	r5, r4
 8007070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007072:	4656      	mov	r6, sl
 8007074:	ea6f 0803 	mvn.w	r8, r3
 8007078:	2700      	movs	r7, #0
 800707a:	4621      	mov	r1, r4
 800707c:	4648      	mov	r0, r9
 800707e:	f000 fcbf 	bl	8007a00 <_Bfree>
 8007082:	2d00      	cmp	r5, #0
 8007084:	f000 80bd 	beq.w	8007202 <_dtoa_r+0x622>
 8007088:	b12f      	cbz	r7, 8007096 <_dtoa_r+0x4b6>
 800708a:	42af      	cmp	r7, r5
 800708c:	d003      	beq.n	8007096 <_dtoa_r+0x4b6>
 800708e:	4639      	mov	r1, r7
 8007090:	4648      	mov	r0, r9
 8007092:	f000 fcb5 	bl	8007a00 <_Bfree>
 8007096:	4629      	mov	r1, r5
 8007098:	4648      	mov	r0, r9
 800709a:	f000 fcb1 	bl	8007a00 <_Bfree>
 800709e:	e0b0      	b.n	8007202 <_dtoa_r+0x622>
 80070a0:	07e2      	lsls	r2, r4, #31
 80070a2:	d505      	bpl.n	80070b0 <_dtoa_r+0x4d0>
 80070a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070a8:	f7f9 faae 	bl	8000608 <__aeabi_dmul>
 80070ac:	3601      	adds	r6, #1
 80070ae:	2301      	movs	r3, #1
 80070b0:	1064      	asrs	r4, r4, #1
 80070b2:	3508      	adds	r5, #8
 80070b4:	e762      	b.n	8006f7c <_dtoa_r+0x39c>
 80070b6:	2602      	movs	r6, #2
 80070b8:	e765      	b.n	8006f86 <_dtoa_r+0x3a6>
 80070ba:	9c03      	ldr	r4, [sp, #12]
 80070bc:	46b8      	mov	r8, r7
 80070be:	e784      	b.n	8006fca <_dtoa_r+0x3ea>
 80070c0:	4b27      	ldr	r3, [pc, #156]	@ (8007160 <_dtoa_r+0x580>)
 80070c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070cc:	4454      	add	r4, sl
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d054      	beq.n	800717c <_dtoa_r+0x59c>
 80070d2:	4929      	ldr	r1, [pc, #164]	@ (8007178 <_dtoa_r+0x598>)
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7f9 fbc1 	bl	800085c <__aeabi_ddiv>
 80070da:	4633      	mov	r3, r6
 80070dc:	462a      	mov	r2, r5
 80070de:	f7f9 f8db 	bl	8000298 <__aeabi_dsub>
 80070e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070e6:	4656      	mov	r6, sl
 80070e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ec:	f7f9 fd3c 	bl	8000b68 <__aeabi_d2iz>
 80070f0:	4605      	mov	r5, r0
 80070f2:	f7f9 fa1f 	bl	8000534 <__aeabi_i2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070fe:	f7f9 f8cb 	bl	8000298 <__aeabi_dsub>
 8007102:	3530      	adds	r5, #48	@ 0x30
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800710c:	f806 5b01 	strb.w	r5, [r6], #1
 8007110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007114:	f7f9 fcea 	bl	8000aec <__aeabi_dcmplt>
 8007118:	2800      	cmp	r0, #0
 800711a:	d172      	bne.n	8007202 <_dtoa_r+0x622>
 800711c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007120:	4911      	ldr	r1, [pc, #68]	@ (8007168 <_dtoa_r+0x588>)
 8007122:	2000      	movs	r0, #0
 8007124:	f7f9 f8b8 	bl	8000298 <__aeabi_dsub>
 8007128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800712c:	f7f9 fcde 	bl	8000aec <__aeabi_dcmplt>
 8007130:	2800      	cmp	r0, #0
 8007132:	f040 80b4 	bne.w	800729e <_dtoa_r+0x6be>
 8007136:	42a6      	cmp	r6, r4
 8007138:	f43f af70 	beq.w	800701c <_dtoa_r+0x43c>
 800713c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007140:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <_dtoa_r+0x58c>)
 8007142:	2200      	movs	r2, #0
 8007144:	f7f9 fa60 	bl	8000608 <__aeabi_dmul>
 8007148:	4b08      	ldr	r3, [pc, #32]	@ (800716c <_dtoa_r+0x58c>)
 800714a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800714e:	2200      	movs	r2, #0
 8007150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007154:	f7f9 fa58 	bl	8000608 <__aeabi_dmul>
 8007158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800715c:	e7c4      	b.n	80070e8 <_dtoa_r+0x508>
 800715e:	bf00      	nop
 8007160:	08008d60 	.word	0x08008d60
 8007164:	08008d38 	.word	0x08008d38
 8007168:	3ff00000 	.word	0x3ff00000
 800716c:	40240000 	.word	0x40240000
 8007170:	401c0000 	.word	0x401c0000
 8007174:	40140000 	.word	0x40140000
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	f7f9 fa42 	bl	8000608 <__aeabi_dmul>
 8007184:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007188:	9413      	str	r4, [sp, #76]	@ 0x4c
 800718a:	4656      	mov	r6, sl
 800718c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007190:	f7f9 fcea 	bl	8000b68 <__aeabi_d2iz>
 8007194:	4605      	mov	r5, r0
 8007196:	f7f9 f9cd 	bl	8000534 <__aeabi_i2d>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a2:	f7f9 f879 	bl	8000298 <__aeabi_dsub>
 80071a6:	3530      	adds	r5, #48	@ 0x30
 80071a8:	f806 5b01 	strb.w	r5, [r6], #1
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	d124      	bne.n	8007206 <_dtoa_r+0x626>
 80071bc:	4baf      	ldr	r3, [pc, #700]	@ (800747c <_dtoa_r+0x89c>)
 80071be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071c2:	f7f9 f86b 	bl	800029c <__adddf3>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ce:	f7f9 fcab 	bl	8000b28 <__aeabi_dcmpgt>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d163      	bne.n	800729e <_dtoa_r+0x6be>
 80071d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071da:	49a8      	ldr	r1, [pc, #672]	@ (800747c <_dtoa_r+0x89c>)
 80071dc:	2000      	movs	r0, #0
 80071de:	f7f9 f85b 	bl	8000298 <__aeabi_dsub>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ea:	f7f9 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f43f af14 	beq.w	800701c <_dtoa_r+0x43c>
 80071f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071f6:	1e73      	subs	r3, r6, #1
 80071f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071fe:	2b30      	cmp	r3, #48	@ 0x30
 8007200:	d0f8      	beq.n	80071f4 <_dtoa_r+0x614>
 8007202:	4647      	mov	r7, r8
 8007204:	e03b      	b.n	800727e <_dtoa_r+0x69e>
 8007206:	4b9e      	ldr	r3, [pc, #632]	@ (8007480 <_dtoa_r+0x8a0>)
 8007208:	f7f9 f9fe 	bl	8000608 <__aeabi_dmul>
 800720c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007210:	e7bc      	b.n	800718c <_dtoa_r+0x5ac>
 8007212:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007216:	4656      	mov	r6, sl
 8007218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 fb1c 	bl	800085c <__aeabi_ddiv>
 8007224:	f7f9 fca0 	bl	8000b68 <__aeabi_d2iz>
 8007228:	4680      	mov	r8, r0
 800722a:	f7f9 f983 	bl	8000534 <__aeabi_i2d>
 800722e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007232:	f7f9 f9e9 	bl	8000608 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007242:	f7f9 f829 	bl	8000298 <__aeabi_dsub>
 8007246:	f806 4b01 	strb.w	r4, [r6], #1
 800724a:	9d03      	ldr	r5, [sp, #12]
 800724c:	eba6 040a 	sub.w	r4, r6, sl
 8007250:	42a5      	cmp	r5, r4
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	d133      	bne.n	80072c0 <_dtoa_r+0x6e0>
 8007258:	f7f9 f820 	bl	800029c <__adddf3>
 800725c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	f7f9 fc60 	bl	8000b28 <__aeabi_dcmpgt>
 8007268:	b9c0      	cbnz	r0, 800729c <_dtoa_r+0x6bc>
 800726a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 8007276:	b110      	cbz	r0, 800727e <_dtoa_r+0x69e>
 8007278:	f018 0f01 	tst.w	r8, #1
 800727c:	d10e      	bne.n	800729c <_dtoa_r+0x6bc>
 800727e:	9902      	ldr	r1, [sp, #8]
 8007280:	4648      	mov	r0, r9
 8007282:	f000 fbbd 	bl	8007a00 <_Bfree>
 8007286:	2300      	movs	r3, #0
 8007288:	7033      	strb	r3, [r6, #0]
 800728a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800728c:	3701      	adds	r7, #1
 800728e:	601f      	str	r7, [r3, #0]
 8007290:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 824b 	beq.w	800772e <_dtoa_r+0xb4e>
 8007298:	601e      	str	r6, [r3, #0]
 800729a:	e248      	b.n	800772e <_dtoa_r+0xb4e>
 800729c:	46b8      	mov	r8, r7
 800729e:	4633      	mov	r3, r6
 80072a0:	461e      	mov	r6, r3
 80072a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a6:	2a39      	cmp	r2, #57	@ 0x39
 80072a8:	d106      	bne.n	80072b8 <_dtoa_r+0x6d8>
 80072aa:	459a      	cmp	sl, r3
 80072ac:	d1f8      	bne.n	80072a0 <_dtoa_r+0x6c0>
 80072ae:	2230      	movs	r2, #48	@ 0x30
 80072b0:	f108 0801 	add.w	r8, r8, #1
 80072b4:	f88a 2000 	strb.w	r2, [sl]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	3201      	adds	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e7a0      	b.n	8007202 <_dtoa_r+0x622>
 80072c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007480 <_dtoa_r+0x8a0>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f9 f9a0 	bl	8000608 <__aeabi_dmul>
 80072c8:	2200      	movs	r2, #0
 80072ca:	2300      	movs	r3, #0
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f7f9 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d09f      	beq.n	8007218 <_dtoa_r+0x638>
 80072d8:	e7d1      	b.n	800727e <_dtoa_r+0x69e>
 80072da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80ea 	beq.w	80074b6 <_dtoa_r+0x8d6>
 80072e2:	9a07      	ldr	r2, [sp, #28]
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	f300 80cd 	bgt.w	8007484 <_dtoa_r+0x8a4>
 80072ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	f000 80c1 	beq.w	8007474 <_dtoa_r+0x894>
 80072f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072f6:	9c08      	ldr	r4, [sp, #32]
 80072f8:	9e00      	ldr	r6, [sp, #0]
 80072fa:	9a00      	ldr	r2, [sp, #0]
 80072fc:	441a      	add	r2, r3
 80072fe:	9200      	str	r2, [sp, #0]
 8007300:	9a06      	ldr	r2, [sp, #24]
 8007302:	2101      	movs	r1, #1
 8007304:	441a      	add	r2, r3
 8007306:	4648      	mov	r0, r9
 8007308:	9206      	str	r2, [sp, #24]
 800730a:	f000 fc2d 	bl	8007b68 <__i2b>
 800730e:	4605      	mov	r5, r0
 8007310:	b166      	cbz	r6, 800732c <_dtoa_r+0x74c>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd09      	ble.n	800732c <_dtoa_r+0x74c>
 8007318:	42b3      	cmp	r3, r6
 800731a:	9a00      	ldr	r2, [sp, #0]
 800731c:	bfa8      	it	ge
 800731e:	4633      	movge	r3, r6
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	9200      	str	r2, [sp, #0]
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	1af6      	subs	r6, r6, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	9b08      	ldr	r3, [sp, #32]
 800732e:	b30b      	cbz	r3, 8007374 <_dtoa_r+0x794>
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80c6 	beq.w	80074c4 <_dtoa_r+0x8e4>
 8007338:	2c00      	cmp	r4, #0
 800733a:	f000 80c0 	beq.w	80074be <_dtoa_r+0x8de>
 800733e:	4629      	mov	r1, r5
 8007340:	4622      	mov	r2, r4
 8007342:	4648      	mov	r0, r9
 8007344:	f000 fcc8 	bl	8007cd8 <__pow5mult>
 8007348:	9a02      	ldr	r2, [sp, #8]
 800734a:	4601      	mov	r1, r0
 800734c:	4605      	mov	r5, r0
 800734e:	4648      	mov	r0, r9
 8007350:	f000 fc20 	bl	8007b94 <__multiply>
 8007354:	9902      	ldr	r1, [sp, #8]
 8007356:	4680      	mov	r8, r0
 8007358:	4648      	mov	r0, r9
 800735a:	f000 fb51 	bl	8007a00 <_Bfree>
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	1b1b      	subs	r3, r3, r4
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	f000 80b1 	beq.w	80074ca <_dtoa_r+0x8ea>
 8007368:	9a08      	ldr	r2, [sp, #32]
 800736a:	4641      	mov	r1, r8
 800736c:	4648      	mov	r0, r9
 800736e:	f000 fcb3 	bl	8007cd8 <__pow5mult>
 8007372:	9002      	str	r0, [sp, #8]
 8007374:	2101      	movs	r1, #1
 8007376:	4648      	mov	r0, r9
 8007378:	f000 fbf6 	bl	8007b68 <__i2b>
 800737c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800737e:	4604      	mov	r4, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81d8 	beq.w	8007736 <_dtoa_r+0xb56>
 8007386:	461a      	mov	r2, r3
 8007388:	4601      	mov	r1, r0
 800738a:	4648      	mov	r0, r9
 800738c:	f000 fca4 	bl	8007cd8 <__pow5mult>
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	2b01      	cmp	r3, #1
 8007394:	4604      	mov	r4, r0
 8007396:	f300 809f 	bgt.w	80074d8 <_dtoa_r+0x8f8>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8097 	bne.w	80074d0 <_dtoa_r+0x8f0>
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 8093 	bne.w	80074d4 <_dtoa_r+0x8f4>
 80073ae:	9b05      	ldr	r3, [sp, #20]
 80073b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073b4:	0d1b      	lsrs	r3, r3, #20
 80073b6:	051b      	lsls	r3, r3, #20
 80073b8:	b133      	cbz	r3, 80073c8 <_dtoa_r+0x7e8>
 80073ba:	9b00      	ldr	r3, [sp, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9b06      	ldr	r3, [sp, #24]
 80073c2:	3301      	adds	r3, #1
 80073c4:	9306      	str	r3, [sp, #24]
 80073c6:	2301      	movs	r3, #1
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 81b8 	beq.w	8007742 <_dtoa_r+0xb62>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073d8:	6918      	ldr	r0, [r3, #16]
 80073da:	f000 fb79 	bl	8007ad0 <__hi0bits>
 80073de:	f1c0 0020 	rsb	r0, r0, #32
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	4418      	add	r0, r3
 80073e6:	f010 001f 	ands.w	r0, r0, #31
 80073ea:	f000 8082 	beq.w	80074f2 <_dtoa_r+0x912>
 80073ee:	f1c0 0320 	rsb	r3, r0, #32
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	dd73      	ble.n	80074de <_dtoa_r+0x8fe>
 80073f6:	9b00      	ldr	r3, [sp, #0]
 80073f8:	f1c0 001c 	rsb	r0, r0, #28
 80073fc:	4403      	add	r3, r0
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	9b06      	ldr	r3, [sp, #24]
 8007402:	4403      	add	r3, r0
 8007404:	4406      	add	r6, r0
 8007406:	9306      	str	r3, [sp, #24]
 8007408:	9b00      	ldr	r3, [sp, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd05      	ble.n	800741a <_dtoa_r+0x83a>
 800740e:	9902      	ldr	r1, [sp, #8]
 8007410:	461a      	mov	r2, r3
 8007412:	4648      	mov	r0, r9
 8007414:	f000 fcba 	bl	8007d8c <__lshift>
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd05      	ble.n	800742c <_dtoa_r+0x84c>
 8007420:	4621      	mov	r1, r4
 8007422:	461a      	mov	r2, r3
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fcb1 	bl	8007d8c <__lshift>
 800742a:	4604      	mov	r4, r0
 800742c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d061      	beq.n	80074f6 <_dtoa_r+0x916>
 8007432:	9802      	ldr	r0, [sp, #8]
 8007434:	4621      	mov	r1, r4
 8007436:	f000 fd15 	bl	8007e64 <__mcmp>
 800743a:	2800      	cmp	r0, #0
 800743c:	da5b      	bge.n	80074f6 <_dtoa_r+0x916>
 800743e:	2300      	movs	r3, #0
 8007440:	9902      	ldr	r1, [sp, #8]
 8007442:	220a      	movs	r2, #10
 8007444:	4648      	mov	r0, r9
 8007446:	f000 fafd 	bl	8007a44 <__multadd>
 800744a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744c:	9002      	str	r0, [sp, #8]
 800744e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8177 	beq.w	8007746 <_dtoa_r+0xb66>
 8007458:	4629      	mov	r1, r5
 800745a:	2300      	movs	r3, #0
 800745c:	220a      	movs	r2, #10
 800745e:	4648      	mov	r0, r9
 8007460:	f000 faf0 	bl	8007a44 <__multadd>
 8007464:	f1bb 0f00 	cmp.w	fp, #0
 8007468:	4605      	mov	r5, r0
 800746a:	dc6f      	bgt.n	800754c <_dtoa_r+0x96c>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	2b02      	cmp	r3, #2
 8007470:	dc49      	bgt.n	8007506 <_dtoa_r+0x926>
 8007472:	e06b      	b.n	800754c <_dtoa_r+0x96c>
 8007474:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800747a:	e73c      	b.n	80072f6 <_dtoa_r+0x716>
 800747c:	3fe00000 	.word	0x3fe00000
 8007480:	40240000 	.word	0x40240000
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	1e5c      	subs	r4, r3, #1
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	42a3      	cmp	r3, r4
 800748c:	db09      	blt.n	80074a2 <_dtoa_r+0x8c2>
 800748e:	1b1c      	subs	r4, r3, r4
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f6bf af30 	bge.w	80072f8 <_dtoa_r+0x718>
 8007498:	9b00      	ldr	r3, [sp, #0]
 800749a:	9a03      	ldr	r2, [sp, #12]
 800749c:	1a9e      	subs	r6, r3, r2
 800749e:	2300      	movs	r3, #0
 80074a0:	e72b      	b.n	80072fa <_dtoa_r+0x71a>
 80074a2:	9b08      	ldr	r3, [sp, #32]
 80074a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074a6:	9408      	str	r4, [sp, #32]
 80074a8:	1ae3      	subs	r3, r4, r3
 80074aa:	441a      	add	r2, r3
 80074ac:	9e00      	ldr	r6, [sp, #0]
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80074b2:	2400      	movs	r4, #0
 80074b4:	e721      	b.n	80072fa <_dtoa_r+0x71a>
 80074b6:	9c08      	ldr	r4, [sp, #32]
 80074b8:	9e00      	ldr	r6, [sp, #0]
 80074ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80074bc:	e728      	b.n	8007310 <_dtoa_r+0x730>
 80074be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80074c2:	e751      	b.n	8007368 <_dtoa_r+0x788>
 80074c4:	9a08      	ldr	r2, [sp, #32]
 80074c6:	9902      	ldr	r1, [sp, #8]
 80074c8:	e750      	b.n	800736c <_dtoa_r+0x78c>
 80074ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80074ce:	e751      	b.n	8007374 <_dtoa_r+0x794>
 80074d0:	2300      	movs	r3, #0
 80074d2:	e779      	b.n	80073c8 <_dtoa_r+0x7e8>
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	e777      	b.n	80073c8 <_dtoa_r+0x7e8>
 80074d8:	2300      	movs	r3, #0
 80074da:	9308      	str	r3, [sp, #32]
 80074dc:	e779      	b.n	80073d2 <_dtoa_r+0x7f2>
 80074de:	d093      	beq.n	8007408 <_dtoa_r+0x828>
 80074e0:	9a00      	ldr	r2, [sp, #0]
 80074e2:	331c      	adds	r3, #28
 80074e4:	441a      	add	r2, r3
 80074e6:	9200      	str	r2, [sp, #0]
 80074e8:	9a06      	ldr	r2, [sp, #24]
 80074ea:	441a      	add	r2, r3
 80074ec:	441e      	add	r6, r3
 80074ee:	9206      	str	r2, [sp, #24]
 80074f0:	e78a      	b.n	8007408 <_dtoa_r+0x828>
 80074f2:	4603      	mov	r3, r0
 80074f4:	e7f4      	b.n	80074e0 <_dtoa_r+0x900>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	46b8      	mov	r8, r7
 80074fc:	dc20      	bgt.n	8007540 <_dtoa_r+0x960>
 80074fe:	469b      	mov	fp, r3
 8007500:	9b07      	ldr	r3, [sp, #28]
 8007502:	2b02      	cmp	r3, #2
 8007504:	dd1e      	ble.n	8007544 <_dtoa_r+0x964>
 8007506:	f1bb 0f00 	cmp.w	fp, #0
 800750a:	f47f adb1 	bne.w	8007070 <_dtoa_r+0x490>
 800750e:	4621      	mov	r1, r4
 8007510:	465b      	mov	r3, fp
 8007512:	2205      	movs	r2, #5
 8007514:	4648      	mov	r0, r9
 8007516:	f000 fa95 	bl	8007a44 <__multadd>
 800751a:	4601      	mov	r1, r0
 800751c:	4604      	mov	r4, r0
 800751e:	9802      	ldr	r0, [sp, #8]
 8007520:	f000 fca0 	bl	8007e64 <__mcmp>
 8007524:	2800      	cmp	r0, #0
 8007526:	f77f ada3 	ble.w	8007070 <_dtoa_r+0x490>
 800752a:	4656      	mov	r6, sl
 800752c:	2331      	movs	r3, #49	@ 0x31
 800752e:	f806 3b01 	strb.w	r3, [r6], #1
 8007532:	f108 0801 	add.w	r8, r8, #1
 8007536:	e59f      	b.n	8007078 <_dtoa_r+0x498>
 8007538:	9c03      	ldr	r4, [sp, #12]
 800753a:	46b8      	mov	r8, r7
 800753c:	4625      	mov	r5, r4
 800753e:	e7f4      	b.n	800752a <_dtoa_r+0x94a>
 8007540:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8101 	beq.w	800774e <_dtoa_r+0xb6e>
 800754c:	2e00      	cmp	r6, #0
 800754e:	dd05      	ble.n	800755c <_dtoa_r+0x97c>
 8007550:	4629      	mov	r1, r5
 8007552:	4632      	mov	r2, r6
 8007554:	4648      	mov	r0, r9
 8007556:	f000 fc19 	bl	8007d8c <__lshift>
 800755a:	4605      	mov	r5, r0
 800755c:	9b08      	ldr	r3, [sp, #32]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d05c      	beq.n	800761c <_dtoa_r+0xa3c>
 8007562:	6869      	ldr	r1, [r5, #4]
 8007564:	4648      	mov	r0, r9
 8007566:	f000 fa0b 	bl	8007980 <_Balloc>
 800756a:	4606      	mov	r6, r0
 800756c:	b928      	cbnz	r0, 800757a <_dtoa_r+0x99a>
 800756e:	4b82      	ldr	r3, [pc, #520]	@ (8007778 <_dtoa_r+0xb98>)
 8007570:	4602      	mov	r2, r0
 8007572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007576:	f7ff bb4a 	b.w	8006c0e <_dtoa_r+0x2e>
 800757a:	692a      	ldr	r2, [r5, #16]
 800757c:	3202      	adds	r2, #2
 800757e:	0092      	lsls	r2, r2, #2
 8007580:	f105 010c 	add.w	r1, r5, #12
 8007584:	300c      	adds	r0, #12
 8007586:	f7ff fa92 	bl	8006aae <memcpy>
 800758a:	2201      	movs	r2, #1
 800758c:	4631      	mov	r1, r6
 800758e:	4648      	mov	r0, r9
 8007590:	f000 fbfc 	bl	8007d8c <__lshift>
 8007594:	f10a 0301 	add.w	r3, sl, #1
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	eb0a 030b 	add.w	r3, sl, fp
 800759e:	9308      	str	r3, [sp, #32]
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	462f      	mov	r7, r5
 80075a8:	9306      	str	r3, [sp, #24]
 80075aa:	4605      	mov	r5, r0
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	9802      	ldr	r0, [sp, #8]
 80075b0:	4621      	mov	r1, r4
 80075b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80075b6:	f7ff fa88 	bl	8006aca <quorem>
 80075ba:	4603      	mov	r3, r0
 80075bc:	3330      	adds	r3, #48	@ 0x30
 80075be:	9003      	str	r0, [sp, #12]
 80075c0:	4639      	mov	r1, r7
 80075c2:	9802      	ldr	r0, [sp, #8]
 80075c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075c6:	f000 fc4d 	bl	8007e64 <__mcmp>
 80075ca:	462a      	mov	r2, r5
 80075cc:	9004      	str	r0, [sp, #16]
 80075ce:	4621      	mov	r1, r4
 80075d0:	4648      	mov	r0, r9
 80075d2:	f000 fc63 	bl	8007e9c <__mdiff>
 80075d6:	68c2      	ldr	r2, [r0, #12]
 80075d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075da:	4606      	mov	r6, r0
 80075dc:	bb02      	cbnz	r2, 8007620 <_dtoa_r+0xa40>
 80075de:	4601      	mov	r1, r0
 80075e0:	9802      	ldr	r0, [sp, #8]
 80075e2:	f000 fc3f 	bl	8007e64 <__mcmp>
 80075e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e8:	4602      	mov	r2, r0
 80075ea:	4631      	mov	r1, r6
 80075ec:	4648      	mov	r0, r9
 80075ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80075f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f2:	f000 fa05 	bl	8007a00 <_Bfree>
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075fa:	9e00      	ldr	r6, [sp, #0]
 80075fc:	ea42 0103 	orr.w	r1, r2, r3
 8007600:	9b06      	ldr	r3, [sp, #24]
 8007602:	4319      	orrs	r1, r3
 8007604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007606:	d10d      	bne.n	8007624 <_dtoa_r+0xa44>
 8007608:	2b39      	cmp	r3, #57	@ 0x39
 800760a:	d027      	beq.n	800765c <_dtoa_r+0xa7c>
 800760c:	9a04      	ldr	r2, [sp, #16]
 800760e:	2a00      	cmp	r2, #0
 8007610:	dd01      	ble.n	8007616 <_dtoa_r+0xa36>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	3331      	adds	r3, #49	@ 0x31
 8007616:	f88b 3000 	strb.w	r3, [fp]
 800761a:	e52e      	b.n	800707a <_dtoa_r+0x49a>
 800761c:	4628      	mov	r0, r5
 800761e:	e7b9      	b.n	8007594 <_dtoa_r+0x9b4>
 8007620:	2201      	movs	r2, #1
 8007622:	e7e2      	b.n	80075ea <_dtoa_r+0xa0a>
 8007624:	9904      	ldr	r1, [sp, #16]
 8007626:	2900      	cmp	r1, #0
 8007628:	db04      	blt.n	8007634 <_dtoa_r+0xa54>
 800762a:	9807      	ldr	r0, [sp, #28]
 800762c:	4301      	orrs	r1, r0
 800762e:	9806      	ldr	r0, [sp, #24]
 8007630:	4301      	orrs	r1, r0
 8007632:	d120      	bne.n	8007676 <_dtoa_r+0xa96>
 8007634:	2a00      	cmp	r2, #0
 8007636:	ddee      	ble.n	8007616 <_dtoa_r+0xa36>
 8007638:	9902      	ldr	r1, [sp, #8]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	2201      	movs	r2, #1
 800763e:	4648      	mov	r0, r9
 8007640:	f000 fba4 	bl	8007d8c <__lshift>
 8007644:	4621      	mov	r1, r4
 8007646:	9002      	str	r0, [sp, #8]
 8007648:	f000 fc0c 	bl	8007e64 <__mcmp>
 800764c:	2800      	cmp	r0, #0
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	dc02      	bgt.n	8007658 <_dtoa_r+0xa78>
 8007652:	d1e0      	bne.n	8007616 <_dtoa_r+0xa36>
 8007654:	07da      	lsls	r2, r3, #31
 8007656:	d5de      	bpl.n	8007616 <_dtoa_r+0xa36>
 8007658:	2b39      	cmp	r3, #57	@ 0x39
 800765a:	d1da      	bne.n	8007612 <_dtoa_r+0xa32>
 800765c:	2339      	movs	r3, #57	@ 0x39
 800765e:	f88b 3000 	strb.w	r3, [fp]
 8007662:	4633      	mov	r3, r6
 8007664:	461e      	mov	r6, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800766c:	2a39      	cmp	r2, #57	@ 0x39
 800766e:	d04e      	beq.n	800770e <_dtoa_r+0xb2e>
 8007670:	3201      	adds	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e501      	b.n	800707a <_dtoa_r+0x49a>
 8007676:	2a00      	cmp	r2, #0
 8007678:	dd03      	ble.n	8007682 <_dtoa_r+0xaa2>
 800767a:	2b39      	cmp	r3, #57	@ 0x39
 800767c:	d0ee      	beq.n	800765c <_dtoa_r+0xa7c>
 800767e:	3301      	adds	r3, #1
 8007680:	e7c9      	b.n	8007616 <_dtoa_r+0xa36>
 8007682:	9a00      	ldr	r2, [sp, #0]
 8007684:	9908      	ldr	r1, [sp, #32]
 8007686:	f802 3c01 	strb.w	r3, [r2, #-1]
 800768a:	428a      	cmp	r2, r1
 800768c:	d028      	beq.n	80076e0 <_dtoa_r+0xb00>
 800768e:	9902      	ldr	r1, [sp, #8]
 8007690:	2300      	movs	r3, #0
 8007692:	220a      	movs	r2, #10
 8007694:	4648      	mov	r0, r9
 8007696:	f000 f9d5 	bl	8007a44 <__multadd>
 800769a:	42af      	cmp	r7, r5
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	f04f 020a 	mov.w	r2, #10
 80076a6:	4639      	mov	r1, r7
 80076a8:	4648      	mov	r0, r9
 80076aa:	d107      	bne.n	80076bc <_dtoa_r+0xadc>
 80076ac:	f000 f9ca 	bl	8007a44 <__multadd>
 80076b0:	4607      	mov	r7, r0
 80076b2:	4605      	mov	r5, r0
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	e777      	b.n	80075ac <_dtoa_r+0x9cc>
 80076bc:	f000 f9c2 	bl	8007a44 <__multadd>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4607      	mov	r7, r0
 80076c4:	2300      	movs	r3, #0
 80076c6:	220a      	movs	r2, #10
 80076c8:	4648      	mov	r0, r9
 80076ca:	f000 f9bb 	bl	8007a44 <__multadd>
 80076ce:	4605      	mov	r5, r0
 80076d0:	e7f0      	b.n	80076b4 <_dtoa_r+0xad4>
 80076d2:	f1bb 0f00 	cmp.w	fp, #0
 80076d6:	bfcc      	ite	gt
 80076d8:	465e      	movgt	r6, fp
 80076da:	2601      	movle	r6, #1
 80076dc:	4456      	add	r6, sl
 80076de:	2700      	movs	r7, #0
 80076e0:	9902      	ldr	r1, [sp, #8]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2201      	movs	r2, #1
 80076e6:	4648      	mov	r0, r9
 80076e8:	f000 fb50 	bl	8007d8c <__lshift>
 80076ec:	4621      	mov	r1, r4
 80076ee:	9002      	str	r0, [sp, #8]
 80076f0:	f000 fbb8 	bl	8007e64 <__mcmp>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	dcb4      	bgt.n	8007662 <_dtoa_r+0xa82>
 80076f8:	d102      	bne.n	8007700 <_dtoa_r+0xb20>
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	07db      	lsls	r3, r3, #31
 80076fe:	d4b0      	bmi.n	8007662 <_dtoa_r+0xa82>
 8007700:	4633      	mov	r3, r6
 8007702:	461e      	mov	r6, r3
 8007704:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007708:	2a30      	cmp	r2, #48	@ 0x30
 800770a:	d0fa      	beq.n	8007702 <_dtoa_r+0xb22>
 800770c:	e4b5      	b.n	800707a <_dtoa_r+0x49a>
 800770e:	459a      	cmp	sl, r3
 8007710:	d1a8      	bne.n	8007664 <_dtoa_r+0xa84>
 8007712:	2331      	movs	r3, #49	@ 0x31
 8007714:	f108 0801 	add.w	r8, r8, #1
 8007718:	f88a 3000 	strb.w	r3, [sl]
 800771c:	e4ad      	b.n	800707a <_dtoa_r+0x49a>
 800771e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007720:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800777c <_dtoa_r+0xb9c>
 8007724:	b11b      	cbz	r3, 800772e <_dtoa_r+0xb4e>
 8007726:	f10a 0308 	add.w	r3, sl, #8
 800772a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	4650      	mov	r0, sl
 8007730:	b017      	add	sp, #92	@ 0x5c
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	9b07      	ldr	r3, [sp, #28]
 8007738:	2b01      	cmp	r3, #1
 800773a:	f77f ae2e 	ble.w	800739a <_dtoa_r+0x7ba>
 800773e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	2001      	movs	r0, #1
 8007744:	e64d      	b.n	80073e2 <_dtoa_r+0x802>
 8007746:	f1bb 0f00 	cmp.w	fp, #0
 800774a:	f77f aed9 	ble.w	8007500 <_dtoa_r+0x920>
 800774e:	4656      	mov	r6, sl
 8007750:	9802      	ldr	r0, [sp, #8]
 8007752:	4621      	mov	r1, r4
 8007754:	f7ff f9b9 	bl	8006aca <quorem>
 8007758:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800775c:	f806 3b01 	strb.w	r3, [r6], #1
 8007760:	eba6 020a 	sub.w	r2, r6, sl
 8007764:	4593      	cmp	fp, r2
 8007766:	ddb4      	ble.n	80076d2 <_dtoa_r+0xaf2>
 8007768:	9902      	ldr	r1, [sp, #8]
 800776a:	2300      	movs	r3, #0
 800776c:	220a      	movs	r2, #10
 800776e:	4648      	mov	r0, r9
 8007770:	f000 f968 	bl	8007a44 <__multadd>
 8007774:	9002      	str	r0, [sp, #8]
 8007776:	e7eb      	b.n	8007750 <_dtoa_r+0xb70>
 8007778:	08008c68 	.word	0x08008c68
 800777c:	08008bec 	.word	0x08008bec

08007780 <_free_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4605      	mov	r5, r0
 8007784:	2900      	cmp	r1, #0
 8007786:	d041      	beq.n	800780c <_free_r+0x8c>
 8007788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778c:	1f0c      	subs	r4, r1, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfb8      	it	lt
 8007792:	18e4      	addlt	r4, r4, r3
 8007794:	f000 f8e8 	bl	8007968 <__malloc_lock>
 8007798:	4a1d      	ldr	r2, [pc, #116]	@ (8007810 <_free_r+0x90>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	b933      	cbnz	r3, 80077ac <_free_r+0x2c>
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	6014      	str	r4, [r2, #0]
 80077a2:	4628      	mov	r0, r5
 80077a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077a8:	f000 b8e4 	b.w	8007974 <__malloc_unlock>
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d908      	bls.n	80077c2 <_free_r+0x42>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	1821      	adds	r1, r4, r0
 80077b4:	428b      	cmp	r3, r1
 80077b6:	bf01      	itttt	eq
 80077b8:	6819      	ldreq	r1, [r3, #0]
 80077ba:	685b      	ldreq	r3, [r3, #4]
 80077bc:	1809      	addeq	r1, r1, r0
 80077be:	6021      	streq	r1, [r4, #0]
 80077c0:	e7ed      	b.n	800779e <_free_r+0x1e>
 80077c2:	461a      	mov	r2, r3
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b10b      	cbz	r3, 80077cc <_free_r+0x4c>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d9fa      	bls.n	80077c2 <_free_r+0x42>
 80077cc:	6811      	ldr	r1, [r2, #0]
 80077ce:	1850      	adds	r0, r2, r1
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d10b      	bne.n	80077ec <_free_r+0x6c>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	4401      	add	r1, r0
 80077d8:	1850      	adds	r0, r2, r1
 80077da:	4283      	cmp	r3, r0
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	d1e0      	bne.n	80077a2 <_free_r+0x22>
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	6053      	str	r3, [r2, #4]
 80077e6:	4408      	add	r0, r1
 80077e8:	6010      	str	r0, [r2, #0]
 80077ea:	e7da      	b.n	80077a2 <_free_r+0x22>
 80077ec:	d902      	bls.n	80077f4 <_free_r+0x74>
 80077ee:	230c      	movs	r3, #12
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	e7d6      	b.n	80077a2 <_free_r+0x22>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	1821      	adds	r1, r4, r0
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf04      	itt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	bf04      	itt	eq
 8007804:	1809      	addeq	r1, r1, r0
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	6054      	str	r4, [r2, #4]
 800780a:	e7ca      	b.n	80077a2 <_free_r+0x22>
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	bf00      	nop
 8007810:	2000043c 	.word	0x2000043c

08007814 <malloc>:
 8007814:	4b02      	ldr	r3, [pc, #8]	@ (8007820 <malloc+0xc>)
 8007816:	4601      	mov	r1, r0
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f000 b825 	b.w	8007868 <_malloc_r>
 800781e:	bf00      	nop
 8007820:	20000018 	.word	0x20000018

08007824 <sbrk_aligned>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4e0f      	ldr	r6, [pc, #60]	@ (8007864 <sbrk_aligned+0x40>)
 8007828:	460c      	mov	r4, r1
 800782a:	6831      	ldr	r1, [r6, #0]
 800782c:	4605      	mov	r5, r0
 800782e:	b911      	cbnz	r1, 8007836 <sbrk_aligned+0x12>
 8007830:	f001 f804 	bl	800883c <_sbrk_r>
 8007834:	6030      	str	r0, [r6, #0]
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 ffff 	bl	800883c <_sbrk_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d103      	bne.n	800784a <sbrk_aligned+0x26>
 8007842:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007846:	4620      	mov	r0, r4
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	1cc4      	adds	r4, r0, #3
 800784c:	f024 0403 	bic.w	r4, r4, #3
 8007850:	42a0      	cmp	r0, r4
 8007852:	d0f8      	beq.n	8007846 <sbrk_aligned+0x22>
 8007854:	1a21      	subs	r1, r4, r0
 8007856:	4628      	mov	r0, r5
 8007858:	f000 fff0 	bl	800883c <_sbrk_r>
 800785c:	3001      	adds	r0, #1
 800785e:	d1f2      	bne.n	8007846 <sbrk_aligned+0x22>
 8007860:	e7ef      	b.n	8007842 <sbrk_aligned+0x1e>
 8007862:	bf00      	nop
 8007864:	20000438 	.word	0x20000438

08007868 <_malloc_r>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	1ccd      	adds	r5, r1, #3
 800786e:	f025 0503 	bic.w	r5, r5, #3
 8007872:	3508      	adds	r5, #8
 8007874:	2d0c      	cmp	r5, #12
 8007876:	bf38      	it	cc
 8007878:	250c      	movcc	r5, #12
 800787a:	2d00      	cmp	r5, #0
 800787c:	4606      	mov	r6, r0
 800787e:	db01      	blt.n	8007884 <_malloc_r+0x1c>
 8007880:	42a9      	cmp	r1, r5
 8007882:	d904      	bls.n	800788e <_malloc_r+0x26>
 8007884:	230c      	movs	r3, #12
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	2000      	movs	r0, #0
 800788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007964 <_malloc_r+0xfc>
 8007892:	f000 f869 	bl	8007968 <__malloc_lock>
 8007896:	f8d8 3000 	ldr.w	r3, [r8]
 800789a:	461c      	mov	r4, r3
 800789c:	bb44      	cbnz	r4, 80078f0 <_malloc_r+0x88>
 800789e:	4629      	mov	r1, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff ffbf 	bl	8007824 <sbrk_aligned>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	4604      	mov	r4, r0
 80078aa:	d158      	bne.n	800795e <_malloc_r+0xf6>
 80078ac:	f8d8 4000 	ldr.w	r4, [r8]
 80078b0:	4627      	mov	r7, r4
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	d143      	bne.n	800793e <_malloc_r+0xd6>
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d04b      	beq.n	8007952 <_malloc_r+0xea>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	4639      	mov	r1, r7
 80078be:	4630      	mov	r0, r6
 80078c0:	eb04 0903 	add.w	r9, r4, r3
 80078c4:	f000 ffba 	bl	800883c <_sbrk_r>
 80078c8:	4581      	cmp	r9, r0
 80078ca:	d142      	bne.n	8007952 <_malloc_r+0xea>
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	1a6d      	subs	r5, r5, r1
 80078d0:	4629      	mov	r1, r5
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ffa6 	bl	8007824 <sbrk_aligned>
 80078d8:	3001      	adds	r0, #1
 80078da:	d03a      	beq.n	8007952 <_malloc_r+0xea>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	442b      	add	r3, r5
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	f8d8 3000 	ldr.w	r3, [r8]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	bb62      	cbnz	r2, 8007944 <_malloc_r+0xdc>
 80078ea:	f8c8 7000 	str.w	r7, [r8]
 80078ee:	e00f      	b.n	8007910 <_malloc_r+0xa8>
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	1b52      	subs	r2, r2, r5
 80078f4:	d420      	bmi.n	8007938 <_malloc_r+0xd0>
 80078f6:	2a0b      	cmp	r2, #11
 80078f8:	d917      	bls.n	800792a <_malloc_r+0xc2>
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	6059      	strne	r1, [r3, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	bf08      	it	eq
 8007908:	f8c8 1000 	streq.w	r1, [r8]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4630      	mov	r0, r6
 8007912:	f000 f82f 	bl	8007974 <__malloc_unlock>
 8007916:	f104 000b 	add.w	r0, r4, #11
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	f020 0007 	bic.w	r0, r0, #7
 8007920:	1ac2      	subs	r2, r0, r3
 8007922:	bf1c      	itt	ne
 8007924:	1a1b      	subne	r3, r3, r0
 8007926:	50a3      	strne	r3, [r4, r2]
 8007928:	e7af      	b.n	800788a <_malloc_r+0x22>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	42a3      	cmp	r3, r4
 800792e:	bf0c      	ite	eq
 8007930:	f8c8 2000 	streq.w	r2, [r8]
 8007934:	605a      	strne	r2, [r3, #4]
 8007936:	e7eb      	b.n	8007910 <_malloc_r+0xa8>
 8007938:	4623      	mov	r3, r4
 800793a:	6864      	ldr	r4, [r4, #4]
 800793c:	e7ae      	b.n	800789c <_malloc_r+0x34>
 800793e:	463c      	mov	r4, r7
 8007940:	687f      	ldr	r7, [r7, #4]
 8007942:	e7b6      	b.n	80078b2 <_malloc_r+0x4a>
 8007944:	461a      	mov	r2, r3
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	42a3      	cmp	r3, r4
 800794a:	d1fb      	bne.n	8007944 <_malloc_r+0xdc>
 800794c:	2300      	movs	r3, #0
 800794e:	6053      	str	r3, [r2, #4]
 8007950:	e7de      	b.n	8007910 <_malloc_r+0xa8>
 8007952:	230c      	movs	r3, #12
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	4630      	mov	r0, r6
 8007958:	f000 f80c 	bl	8007974 <__malloc_unlock>
 800795c:	e794      	b.n	8007888 <_malloc_r+0x20>
 800795e:	6005      	str	r5, [r0, #0]
 8007960:	e7d6      	b.n	8007910 <_malloc_r+0xa8>
 8007962:	bf00      	nop
 8007964:	2000043c 	.word	0x2000043c

08007968 <__malloc_lock>:
 8007968:	4801      	ldr	r0, [pc, #4]	@ (8007970 <__malloc_lock+0x8>)
 800796a:	f7ff b89e 	b.w	8006aaa <__retarget_lock_acquire_recursive>
 800796e:	bf00      	nop
 8007970:	20000434 	.word	0x20000434

08007974 <__malloc_unlock>:
 8007974:	4801      	ldr	r0, [pc, #4]	@ (800797c <__malloc_unlock+0x8>)
 8007976:	f7ff b899 	b.w	8006aac <__retarget_lock_release_recursive>
 800797a:	bf00      	nop
 800797c:	20000434 	.word	0x20000434

08007980 <_Balloc>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	69c6      	ldr	r6, [r0, #28]
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	b976      	cbnz	r6, 80079a8 <_Balloc+0x28>
 800798a:	2010      	movs	r0, #16
 800798c:	f7ff ff42 	bl	8007814 <malloc>
 8007990:	4602      	mov	r2, r0
 8007992:	61e0      	str	r0, [r4, #28]
 8007994:	b920      	cbnz	r0, 80079a0 <_Balloc+0x20>
 8007996:	4b18      	ldr	r3, [pc, #96]	@ (80079f8 <_Balloc+0x78>)
 8007998:	4818      	ldr	r0, [pc, #96]	@ (80079fc <_Balloc+0x7c>)
 800799a:	216b      	movs	r1, #107	@ 0x6b
 800799c:	f000 ff5e 	bl	800885c <__assert_func>
 80079a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a4:	6006      	str	r6, [r0, #0]
 80079a6:	60c6      	str	r6, [r0, #12]
 80079a8:	69e6      	ldr	r6, [r4, #28]
 80079aa:	68f3      	ldr	r3, [r6, #12]
 80079ac:	b183      	cbz	r3, 80079d0 <_Balloc+0x50>
 80079ae:	69e3      	ldr	r3, [r4, #28]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079b6:	b9b8      	cbnz	r0, 80079e8 <_Balloc+0x68>
 80079b8:	2101      	movs	r1, #1
 80079ba:	fa01 f605 	lsl.w	r6, r1, r5
 80079be:	1d72      	adds	r2, r6, #5
 80079c0:	0092      	lsls	r2, r2, #2
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 ff68 	bl	8008898 <_calloc_r>
 80079c8:	b160      	cbz	r0, 80079e4 <_Balloc+0x64>
 80079ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ce:	e00e      	b.n	80079ee <_Balloc+0x6e>
 80079d0:	2221      	movs	r2, #33	@ 0x21
 80079d2:	2104      	movs	r1, #4
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 ff5f 	bl	8008898 <_calloc_r>
 80079da:	69e3      	ldr	r3, [r4, #28]
 80079dc:	60f0      	str	r0, [r6, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e4      	bne.n	80079ae <_Balloc+0x2e>
 80079e4:	2000      	movs	r0, #0
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	6802      	ldr	r2, [r0, #0]
 80079ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ee:	2300      	movs	r3, #0
 80079f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079f4:	e7f7      	b.n	80079e6 <_Balloc+0x66>
 80079f6:	bf00      	nop
 80079f8:	08008bf9 	.word	0x08008bf9
 80079fc:	08008c79 	.word	0x08008c79

08007a00 <_Bfree>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	69c6      	ldr	r6, [r0, #28]
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	b976      	cbnz	r6, 8007a28 <_Bfree+0x28>
 8007a0a:	2010      	movs	r0, #16
 8007a0c:	f7ff ff02 	bl	8007814 <malloc>
 8007a10:	4602      	mov	r2, r0
 8007a12:	61e8      	str	r0, [r5, #28]
 8007a14:	b920      	cbnz	r0, 8007a20 <_Bfree+0x20>
 8007a16:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <_Bfree+0x3c>)
 8007a18:	4809      	ldr	r0, [pc, #36]	@ (8007a40 <_Bfree+0x40>)
 8007a1a:	218f      	movs	r1, #143	@ 0x8f
 8007a1c:	f000 ff1e 	bl	800885c <__assert_func>
 8007a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a24:	6006      	str	r6, [r0, #0]
 8007a26:	60c6      	str	r6, [r0, #12]
 8007a28:	b13c      	cbz	r4, 8007a3a <_Bfree+0x3a>
 8007a2a:	69eb      	ldr	r3, [r5, #28]
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a34:	6021      	str	r1, [r4, #0]
 8007a36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	08008bf9 	.word	0x08008bf9
 8007a40:	08008c79 	.word	0x08008c79

08007a44 <__multadd>:
 8007a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a48:	690d      	ldr	r5, [r1, #16]
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	461e      	mov	r6, r3
 8007a50:	f101 0c14 	add.w	ip, r1, #20
 8007a54:	2000      	movs	r0, #0
 8007a56:	f8dc 3000 	ldr.w	r3, [ip]
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a60:	0c1e      	lsrs	r6, r3, #16
 8007a62:	0c0b      	lsrs	r3, r1, #16
 8007a64:	fb02 3306 	mla	r3, r2, r6, r3
 8007a68:	b289      	uxth	r1, r1
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a70:	4285      	cmp	r5, r0
 8007a72:	f84c 1b04 	str.w	r1, [ip], #4
 8007a76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a7a:	dcec      	bgt.n	8007a56 <__multadd+0x12>
 8007a7c:	b30e      	cbz	r6, 8007ac2 <__multadd+0x7e>
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc19      	bgt.n	8007ab8 <__multadd+0x74>
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4638      	mov	r0, r7
 8007a88:	3101      	adds	r1, #1
 8007a8a:	f7ff ff79 	bl	8007980 <_Balloc>
 8007a8e:	4680      	mov	r8, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <__multadd+0x5a>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <__multadd+0x84>)
 8007a96:	480d      	ldr	r0, [pc, #52]	@ (8007acc <__multadd+0x88>)
 8007a98:	21ba      	movs	r1, #186	@ 0xba
 8007a9a:	f000 fedf 	bl	800885c <__assert_func>
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	3202      	adds	r2, #2
 8007aa2:	f104 010c 	add.w	r1, r4, #12
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	f7ff f800 	bl	8006aae <memcpy>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa5 	bl	8007a00 <_Bfree>
 8007ab6:	4644      	mov	r4, r8
 8007ab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007abc:	3501      	adds	r5, #1
 8007abe:	615e      	str	r6, [r3, #20]
 8007ac0:	6125      	str	r5, [r4, #16]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac8:	08008c68 	.word	0x08008c68
 8007acc:	08008c79 	.word	0x08008c79

08007ad0 <__hi0bits>:
 8007ad0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	bf36      	itet	cc
 8007ad8:	0403      	lslcc	r3, r0, #16
 8007ada:	2000      	movcs	r0, #0
 8007adc:	2010      	movcc	r0, #16
 8007ade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ae2:	bf3c      	itt	cc
 8007ae4:	021b      	lslcc	r3, r3, #8
 8007ae6:	3008      	addcc	r0, #8
 8007ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aec:	bf3c      	itt	cc
 8007aee:	011b      	lslcc	r3, r3, #4
 8007af0:	3004      	addcc	r0, #4
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af6:	bf3c      	itt	cc
 8007af8:	009b      	lslcc	r3, r3, #2
 8007afa:	3002      	addcc	r0, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db05      	blt.n	8007b0c <__hi0bits+0x3c>
 8007b00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b04:	f100 0001 	add.w	r0, r0, #1
 8007b08:	bf08      	it	eq
 8007b0a:	2020      	moveq	r0, #32
 8007b0c:	4770      	bx	lr

08007b0e <__lo0bits>:
 8007b0e:	6803      	ldr	r3, [r0, #0]
 8007b10:	4602      	mov	r2, r0
 8007b12:	f013 0007 	ands.w	r0, r3, #7
 8007b16:	d00b      	beq.n	8007b30 <__lo0bits+0x22>
 8007b18:	07d9      	lsls	r1, r3, #31
 8007b1a:	d421      	bmi.n	8007b60 <__lo0bits+0x52>
 8007b1c:	0798      	lsls	r0, r3, #30
 8007b1e:	bf49      	itett	mi
 8007b20:	085b      	lsrmi	r3, r3, #1
 8007b22:	089b      	lsrpl	r3, r3, #2
 8007b24:	2001      	movmi	r0, #1
 8007b26:	6013      	strmi	r3, [r2, #0]
 8007b28:	bf5c      	itt	pl
 8007b2a:	6013      	strpl	r3, [r2, #0]
 8007b2c:	2002      	movpl	r0, #2
 8007b2e:	4770      	bx	lr
 8007b30:	b299      	uxth	r1, r3
 8007b32:	b909      	cbnz	r1, 8007b38 <__lo0bits+0x2a>
 8007b34:	0c1b      	lsrs	r3, r3, #16
 8007b36:	2010      	movs	r0, #16
 8007b38:	b2d9      	uxtb	r1, r3
 8007b3a:	b909      	cbnz	r1, 8007b40 <__lo0bits+0x32>
 8007b3c:	3008      	adds	r0, #8
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	0719      	lsls	r1, r3, #28
 8007b42:	bf04      	itt	eq
 8007b44:	091b      	lsreq	r3, r3, #4
 8007b46:	3004      	addeq	r0, #4
 8007b48:	0799      	lsls	r1, r3, #30
 8007b4a:	bf04      	itt	eq
 8007b4c:	089b      	lsreq	r3, r3, #2
 8007b4e:	3002      	addeq	r0, #2
 8007b50:	07d9      	lsls	r1, r3, #31
 8007b52:	d403      	bmi.n	8007b5c <__lo0bits+0x4e>
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	f100 0001 	add.w	r0, r0, #1
 8007b5a:	d003      	beq.n	8007b64 <__lo0bits+0x56>
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	4770      	bx	lr
 8007b60:	2000      	movs	r0, #0
 8007b62:	4770      	bx	lr
 8007b64:	2020      	movs	r0, #32
 8007b66:	4770      	bx	lr

08007b68 <__i2b>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	f7ff ff07 	bl	8007980 <_Balloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__i2b+0x1a>
 8007b76:	4b05      	ldr	r3, [pc, #20]	@ (8007b8c <__i2b+0x24>)
 8007b78:	4805      	ldr	r0, [pc, #20]	@ (8007b90 <__i2b+0x28>)
 8007b7a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b7e:	f000 fe6d 	bl	800885c <__assert_func>
 8007b82:	2301      	movs	r3, #1
 8007b84:	6144      	str	r4, [r0, #20]
 8007b86:	6103      	str	r3, [r0, #16]
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08008c68 	.word	0x08008c68
 8007b90:	08008c79 	.word	0x08008c79

08007b94 <__multiply>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	4617      	mov	r7, r2
 8007b9a:	690a      	ldr	r2, [r1, #16]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	bfa8      	it	ge
 8007ba2:	463b      	movge	r3, r7
 8007ba4:	4689      	mov	r9, r1
 8007ba6:	bfa4      	itt	ge
 8007ba8:	460f      	movge	r7, r1
 8007baa:	4699      	movge	r9, r3
 8007bac:	693d      	ldr	r5, [r7, #16]
 8007bae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	eb05 060a 	add.w	r6, r5, sl
 8007bba:	42b3      	cmp	r3, r6
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	bfb8      	it	lt
 8007bc0:	3101      	addlt	r1, #1
 8007bc2:	f7ff fedd 	bl	8007980 <_Balloc>
 8007bc6:	b930      	cbnz	r0, 8007bd6 <__multiply+0x42>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	4b41      	ldr	r3, [pc, #260]	@ (8007cd0 <__multiply+0x13c>)
 8007bcc:	4841      	ldr	r0, [pc, #260]	@ (8007cd4 <__multiply+0x140>)
 8007bce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007bd2:	f000 fe43 	bl	800885c <__assert_func>
 8007bd6:	f100 0414 	add.w	r4, r0, #20
 8007bda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007bde:	4623      	mov	r3, r4
 8007be0:	2200      	movs	r2, #0
 8007be2:	4573      	cmp	r3, lr
 8007be4:	d320      	bcc.n	8007c28 <__multiply+0x94>
 8007be6:	f107 0814 	add.w	r8, r7, #20
 8007bea:	f109 0114 	add.w	r1, r9, #20
 8007bee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007bf2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	1beb      	subs	r3, r5, r7
 8007bfa:	3b15      	subs	r3, #21
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	3304      	adds	r3, #4
 8007c02:	3715      	adds	r7, #21
 8007c04:	42bd      	cmp	r5, r7
 8007c06:	bf38      	it	cc
 8007c08:	2304      	movcc	r3, #4
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	9103      	str	r1, [sp, #12]
 8007c10:	428b      	cmp	r3, r1
 8007c12:	d80c      	bhi.n	8007c2e <__multiply+0x9a>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	dd03      	ble.n	8007c20 <__multiply+0x8c>
 8007c18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d055      	beq.n	8007ccc <__multiply+0x138>
 8007c20:	6106      	str	r6, [r0, #16]
 8007c22:	b005      	add	sp, #20
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	f843 2b04 	str.w	r2, [r3], #4
 8007c2c:	e7d9      	b.n	8007be2 <__multiply+0x4e>
 8007c2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c32:	f1ba 0f00 	cmp.w	sl, #0
 8007c36:	d01f      	beq.n	8007c78 <__multiply+0xe4>
 8007c38:	46c4      	mov	ip, r8
 8007c3a:	46a1      	mov	r9, r4
 8007c3c:	2700      	movs	r7, #0
 8007c3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c42:	f8d9 3000 	ldr.w	r3, [r9]
 8007c46:	fa1f fb82 	uxth.w	fp, r2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c50:	443b      	add	r3, r7
 8007c52:	f8d9 7000 	ldr.w	r7, [r9]
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	0c3f      	lsrs	r7, r7, #16
 8007c5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8007c5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c68:	4565      	cmp	r5, ip
 8007c6a:	f849 3b04 	str.w	r3, [r9], #4
 8007c6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007c72:	d8e4      	bhi.n	8007c3e <__multiply+0xaa>
 8007c74:	9b01      	ldr	r3, [sp, #4]
 8007c76:	50e7      	str	r7, [r4, r3]
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c7e:	3104      	adds	r1, #4
 8007c80:	f1b9 0f00 	cmp.w	r9, #0
 8007c84:	d020      	beq.n	8007cc8 <__multiply+0x134>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	4647      	mov	r7, r8
 8007c8a:	46a4      	mov	ip, r4
 8007c8c:	f04f 0a00 	mov.w	sl, #0
 8007c90:	f8b7 b000 	ldrh.w	fp, [r7]
 8007c94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007c98:	fb09 220b 	mla	r2, r9, fp, r2
 8007c9c:	4452      	add	r2, sl
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca4:	f84c 3b04 	str.w	r3, [ip], #4
 8007ca8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8007cb4:	fb09 330a 	mla	r3, r9, sl, r3
 8007cb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007cbc:	42bd      	cmp	r5, r7
 8007cbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cc2:	d8e5      	bhi.n	8007c90 <__multiply+0xfc>
 8007cc4:	9a01      	ldr	r2, [sp, #4]
 8007cc6:	50a3      	str	r3, [r4, r2]
 8007cc8:	3404      	adds	r4, #4
 8007cca:	e79f      	b.n	8007c0c <__multiply+0x78>
 8007ccc:	3e01      	subs	r6, #1
 8007cce:	e7a1      	b.n	8007c14 <__multiply+0x80>
 8007cd0:	08008c68 	.word	0x08008c68
 8007cd4:	08008c79 	.word	0x08008c79

08007cd8 <__pow5mult>:
 8007cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	4615      	mov	r5, r2
 8007cde:	f012 0203 	ands.w	r2, r2, #3
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	d007      	beq.n	8007cf8 <__pow5mult+0x20>
 8007ce8:	4c25      	ldr	r4, [pc, #148]	@ (8007d80 <__pow5mult+0xa8>)
 8007cea:	3a01      	subs	r2, #1
 8007cec:	2300      	movs	r3, #0
 8007cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cf2:	f7ff fea7 	bl	8007a44 <__multadd>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	10ad      	asrs	r5, r5, #2
 8007cfa:	d03d      	beq.n	8007d78 <__pow5mult+0xa0>
 8007cfc:	69fc      	ldr	r4, [r7, #28]
 8007cfe:	b97c      	cbnz	r4, 8007d20 <__pow5mult+0x48>
 8007d00:	2010      	movs	r0, #16
 8007d02:	f7ff fd87 	bl	8007814 <malloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	61f8      	str	r0, [r7, #28]
 8007d0a:	b928      	cbnz	r0, 8007d18 <__pow5mult+0x40>
 8007d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d84 <__pow5mult+0xac>)
 8007d0e:	481e      	ldr	r0, [pc, #120]	@ (8007d88 <__pow5mult+0xb0>)
 8007d10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d14:	f000 fda2 	bl	800885c <__assert_func>
 8007d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d1c:	6004      	str	r4, [r0, #0]
 8007d1e:	60c4      	str	r4, [r0, #12]
 8007d20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d28:	b94c      	cbnz	r4, 8007d3e <__pow5mult+0x66>
 8007d2a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7ff ff1a 	bl	8007b68 <__i2b>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	f04f 0900 	mov.w	r9, #0
 8007d42:	07eb      	lsls	r3, r5, #31
 8007d44:	d50a      	bpl.n	8007d5c <__pow5mult+0x84>
 8007d46:	4631      	mov	r1, r6
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f7ff ff22 	bl	8007b94 <__multiply>
 8007d50:	4631      	mov	r1, r6
 8007d52:	4680      	mov	r8, r0
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff fe53 	bl	8007a00 <_Bfree>
 8007d5a:	4646      	mov	r6, r8
 8007d5c:	106d      	asrs	r5, r5, #1
 8007d5e:	d00b      	beq.n	8007d78 <__pow5mult+0xa0>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	b938      	cbnz	r0, 8007d74 <__pow5mult+0x9c>
 8007d64:	4622      	mov	r2, r4
 8007d66:	4621      	mov	r1, r4
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ff13 	bl	8007b94 <__multiply>
 8007d6e:	6020      	str	r0, [r4, #0]
 8007d70:	f8c0 9000 	str.w	r9, [r0]
 8007d74:	4604      	mov	r4, r0
 8007d76:	e7e4      	b.n	8007d42 <__pow5mult+0x6a>
 8007d78:	4630      	mov	r0, r6
 8007d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7e:	bf00      	nop
 8007d80:	08008d2c 	.word	0x08008d2c
 8007d84:	08008bf9 	.word	0x08008bf9
 8007d88:	08008c79 	.word	0x08008c79

08007d8c <__lshift>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	6849      	ldr	r1, [r1, #4]
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	4691      	mov	r9, r2
 8007da0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007da4:	f108 0601 	add.w	r6, r8, #1
 8007da8:	42b3      	cmp	r3, r6
 8007daa:	db0b      	blt.n	8007dc4 <__lshift+0x38>
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fde7 	bl	8007980 <_Balloc>
 8007db2:	4605      	mov	r5, r0
 8007db4:	b948      	cbnz	r0, 8007dca <__lshift+0x3e>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b28      	ldr	r3, [pc, #160]	@ (8007e5c <__lshift+0xd0>)
 8007dba:	4829      	ldr	r0, [pc, #164]	@ (8007e60 <__lshift+0xd4>)
 8007dbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007dc0:	f000 fd4c 	bl	800885c <__assert_func>
 8007dc4:	3101      	adds	r1, #1
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	e7ee      	b.n	8007da8 <__lshift+0x1c>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f100 0114 	add.w	r1, r0, #20
 8007dd0:	f100 0210 	add.w	r2, r0, #16
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	4553      	cmp	r3, sl
 8007dd8:	db33      	blt.n	8007e42 <__lshift+0xb6>
 8007dda:	6920      	ldr	r0, [r4, #16]
 8007ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007de0:	f104 0314 	add.w	r3, r4, #20
 8007de4:	f019 091f 	ands.w	r9, r9, #31
 8007de8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007df0:	d02b      	beq.n	8007e4a <__lshift+0xbe>
 8007df2:	f1c9 0e20 	rsb	lr, r9, #32
 8007df6:	468a      	mov	sl, r1
 8007df8:	2200      	movs	r2, #0
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	fa00 f009 	lsl.w	r0, r0, r9
 8007e00:	4310      	orrs	r0, r2
 8007e02:	f84a 0b04 	str.w	r0, [sl], #4
 8007e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0a:	459c      	cmp	ip, r3
 8007e0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e10:	d8f3      	bhi.n	8007dfa <__lshift+0x6e>
 8007e12:	ebac 0304 	sub.w	r3, ip, r4
 8007e16:	3b15      	subs	r3, #21
 8007e18:	f023 0303 	bic.w	r3, r3, #3
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	f104 0015 	add.w	r0, r4, #21
 8007e22:	4560      	cmp	r0, ip
 8007e24:	bf88      	it	hi
 8007e26:	2304      	movhi	r3, #4
 8007e28:	50ca      	str	r2, [r1, r3]
 8007e2a:	b10a      	cbz	r2, 8007e30 <__lshift+0xa4>
 8007e2c:	f108 0602 	add.w	r6, r8, #2
 8007e30:	3e01      	subs	r6, #1
 8007e32:	4638      	mov	r0, r7
 8007e34:	612e      	str	r6, [r5, #16]
 8007e36:	4621      	mov	r1, r4
 8007e38:	f7ff fde2 	bl	8007a00 <_Bfree>
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e46:	3301      	adds	r3, #1
 8007e48:	e7c5      	b.n	8007dd6 <__lshift+0x4a>
 8007e4a:	3904      	subs	r1, #4
 8007e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e54:	459c      	cmp	ip, r3
 8007e56:	d8f9      	bhi.n	8007e4c <__lshift+0xc0>
 8007e58:	e7ea      	b.n	8007e30 <__lshift+0xa4>
 8007e5a:	bf00      	nop
 8007e5c:	08008c68 	.word	0x08008c68
 8007e60:	08008c79 	.word	0x08008c79

08007e64 <__mcmp>:
 8007e64:	690a      	ldr	r2, [r1, #16]
 8007e66:	4603      	mov	r3, r0
 8007e68:	6900      	ldr	r0, [r0, #16]
 8007e6a:	1a80      	subs	r0, r0, r2
 8007e6c:	b530      	push	{r4, r5, lr}
 8007e6e:	d10e      	bne.n	8007e8e <__mcmp+0x2a>
 8007e70:	3314      	adds	r3, #20
 8007e72:	3114      	adds	r1, #20
 8007e74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e84:	4295      	cmp	r5, r2
 8007e86:	d003      	beq.n	8007e90 <__mcmp+0x2c>
 8007e88:	d205      	bcs.n	8007e96 <__mcmp+0x32>
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e8e:	bd30      	pop	{r4, r5, pc}
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	d3f3      	bcc.n	8007e7c <__mcmp+0x18>
 8007e94:	e7fb      	b.n	8007e8e <__mcmp+0x2a>
 8007e96:	2001      	movs	r0, #1
 8007e98:	e7f9      	b.n	8007e8e <__mcmp+0x2a>
	...

08007e9c <__mdiff>:
 8007e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	4689      	mov	r9, r1
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	f7ff ffdb 	bl	8007e64 <__mcmp>
 8007eae:	1e05      	subs	r5, r0, #0
 8007eb0:	d112      	bne.n	8007ed8 <__mdiff+0x3c>
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f7ff fd63 	bl	8007980 <_Balloc>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	b928      	cbnz	r0, 8007eca <__mdiff+0x2e>
 8007ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8007fbc <__mdiff+0x120>)
 8007ec0:	f240 2137 	movw	r1, #567	@ 0x237
 8007ec4:	483e      	ldr	r0, [pc, #248]	@ (8007fc0 <__mdiff+0x124>)
 8007ec6:	f000 fcc9 	bl	800885c <__assert_func>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	b003      	add	sp, #12
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	bfbc      	itt	lt
 8007eda:	464b      	movlt	r3, r9
 8007edc:	46a1      	movlt	r9, r4
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ee4:	bfba      	itte	lt
 8007ee6:	461c      	movlt	r4, r3
 8007ee8:	2501      	movlt	r5, #1
 8007eea:	2500      	movge	r5, #0
 8007eec:	f7ff fd48 	bl	8007980 <_Balloc>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	b918      	cbnz	r0, 8007efc <__mdiff+0x60>
 8007ef4:	4b31      	ldr	r3, [pc, #196]	@ (8007fbc <__mdiff+0x120>)
 8007ef6:	f240 2145 	movw	r1, #581	@ 0x245
 8007efa:	e7e3      	b.n	8007ec4 <__mdiff+0x28>
 8007efc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f00:	6926      	ldr	r6, [r4, #16]
 8007f02:	60c5      	str	r5, [r0, #12]
 8007f04:	f109 0310 	add.w	r3, r9, #16
 8007f08:	f109 0514 	add.w	r5, r9, #20
 8007f0c:	f104 0e14 	add.w	lr, r4, #20
 8007f10:	f100 0b14 	add.w	fp, r0, #20
 8007f14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	46d9      	mov	r9, fp
 8007f20:	f04f 0c00 	mov.w	ip, #0
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	fa1f f38a 	uxth.w	r3, sl
 8007f34:	4619      	mov	r1, r3
 8007f36:	b283      	uxth	r3, r0
 8007f38:	1acb      	subs	r3, r1, r3
 8007f3a:	0c00      	lsrs	r0, r0, #16
 8007f3c:	4463      	add	r3, ip
 8007f3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f4c:	4576      	cmp	r6, lr
 8007f4e:	f849 3b04 	str.w	r3, [r9], #4
 8007f52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f56:	d8e5      	bhi.n	8007f24 <__mdiff+0x88>
 8007f58:	1b33      	subs	r3, r6, r4
 8007f5a:	3b15      	subs	r3, #21
 8007f5c:	f023 0303 	bic.w	r3, r3, #3
 8007f60:	3415      	adds	r4, #21
 8007f62:	3304      	adds	r3, #4
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	bf38      	it	cc
 8007f68:	2304      	movcc	r3, #4
 8007f6a:	441d      	add	r5, r3
 8007f6c:	445b      	add	r3, fp
 8007f6e:	461e      	mov	r6, r3
 8007f70:	462c      	mov	r4, r5
 8007f72:	4544      	cmp	r4, r8
 8007f74:	d30e      	bcc.n	8007f94 <__mdiff+0xf8>
 8007f76:	f108 0103 	add.w	r1, r8, #3
 8007f7a:	1b49      	subs	r1, r1, r5
 8007f7c:	f021 0103 	bic.w	r1, r1, #3
 8007f80:	3d03      	subs	r5, #3
 8007f82:	45a8      	cmp	r8, r5
 8007f84:	bf38      	it	cc
 8007f86:	2100      	movcc	r1, #0
 8007f88:	440b      	add	r3, r1
 8007f8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f8e:	b191      	cbz	r1, 8007fb6 <__mdiff+0x11a>
 8007f90:	6117      	str	r7, [r2, #16]
 8007f92:	e79d      	b.n	8007ed0 <__mdiff+0x34>
 8007f94:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f98:	46e6      	mov	lr, ip
 8007f9a:	0c08      	lsrs	r0, r1, #16
 8007f9c:	fa1c fc81 	uxtah	ip, ip, r1
 8007fa0:	4471      	add	r1, lr
 8007fa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fa6:	b289      	uxth	r1, r1
 8007fa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fac:	f846 1b04 	str.w	r1, [r6], #4
 8007fb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fb4:	e7dd      	b.n	8007f72 <__mdiff+0xd6>
 8007fb6:	3f01      	subs	r7, #1
 8007fb8:	e7e7      	b.n	8007f8a <__mdiff+0xee>
 8007fba:	bf00      	nop
 8007fbc:	08008c68 	.word	0x08008c68
 8007fc0:	08008c79 	.word	0x08008c79

08007fc4 <__d2b>:
 8007fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	460f      	mov	r7, r1
 8007fca:	2101      	movs	r1, #1
 8007fcc:	ec59 8b10 	vmov	r8, r9, d0
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	f7ff fcd5 	bl	8007980 <_Balloc>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	b930      	cbnz	r0, 8007fe8 <__d2b+0x24>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b23      	ldr	r3, [pc, #140]	@ (800806c <__d2b+0xa8>)
 8007fde:	4824      	ldr	r0, [pc, #144]	@ (8008070 <__d2b+0xac>)
 8007fe0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fe4:	f000 fc3a 	bl	800885c <__assert_func>
 8007fe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ff0:	b10d      	cbz	r5, 8007ff6 <__d2b+0x32>
 8007ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8007ffc:	d023      	beq.n	8008046 <__d2b+0x82>
 8007ffe:	4668      	mov	r0, sp
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	f7ff fd84 	bl	8007b0e <__lo0bits>
 8008006:	e9dd 1200 	ldrd	r1, r2, [sp]
 800800a:	b1d0      	cbz	r0, 8008042 <__d2b+0x7e>
 800800c:	f1c0 0320 	rsb	r3, r0, #32
 8008010:	fa02 f303 	lsl.w	r3, r2, r3
 8008014:	430b      	orrs	r3, r1
 8008016:	40c2      	lsrs	r2, r0
 8008018:	6163      	str	r3, [r4, #20]
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	61a3      	str	r3, [r4, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bf0c      	ite	eq
 8008024:	2201      	moveq	r2, #1
 8008026:	2202      	movne	r2, #2
 8008028:	6122      	str	r2, [r4, #16]
 800802a:	b1a5      	cbz	r5, 8008056 <__d2b+0x92>
 800802c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008030:	4405      	add	r5, r0
 8008032:	603d      	str	r5, [r7, #0]
 8008034:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008038:	6030      	str	r0, [r6, #0]
 800803a:	4620      	mov	r0, r4
 800803c:	b003      	add	sp, #12
 800803e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008042:	6161      	str	r1, [r4, #20]
 8008044:	e7ea      	b.n	800801c <__d2b+0x58>
 8008046:	a801      	add	r0, sp, #4
 8008048:	f7ff fd61 	bl	8007b0e <__lo0bits>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	3020      	adds	r0, #32
 8008052:	2201      	movs	r2, #1
 8008054:	e7e8      	b.n	8008028 <__d2b+0x64>
 8008056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800805a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800805e:	6038      	str	r0, [r7, #0]
 8008060:	6918      	ldr	r0, [r3, #16]
 8008062:	f7ff fd35 	bl	8007ad0 <__hi0bits>
 8008066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800806a:	e7e5      	b.n	8008038 <__d2b+0x74>
 800806c:	08008c68 	.word	0x08008c68
 8008070:	08008c79 	.word	0x08008c79

08008074 <__ssputs_r>:
 8008074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	688e      	ldr	r6, [r1, #8]
 800807a:	461f      	mov	r7, r3
 800807c:	42be      	cmp	r6, r7
 800807e:	680b      	ldr	r3, [r1, #0]
 8008080:	4682      	mov	sl, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4690      	mov	r8, r2
 8008086:	d82d      	bhi.n	80080e4 <__ssputs_r+0x70>
 8008088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800808c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008090:	d026      	beq.n	80080e0 <__ssputs_r+0x6c>
 8008092:	6965      	ldr	r5, [r4, #20]
 8008094:	6909      	ldr	r1, [r1, #16]
 8008096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800809a:	eba3 0901 	sub.w	r9, r3, r1
 800809e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080a2:	1c7b      	adds	r3, r7, #1
 80080a4:	444b      	add	r3, r9
 80080a6:	106d      	asrs	r5, r5, #1
 80080a8:	429d      	cmp	r5, r3
 80080aa:	bf38      	it	cc
 80080ac:	461d      	movcc	r5, r3
 80080ae:	0553      	lsls	r3, r2, #21
 80080b0:	d527      	bpl.n	8008102 <__ssputs_r+0x8e>
 80080b2:	4629      	mov	r1, r5
 80080b4:	f7ff fbd8 	bl	8007868 <_malloc_r>
 80080b8:	4606      	mov	r6, r0
 80080ba:	b360      	cbz	r0, 8008116 <__ssputs_r+0xa2>
 80080bc:	6921      	ldr	r1, [r4, #16]
 80080be:	464a      	mov	r2, r9
 80080c0:	f7fe fcf5 	bl	8006aae <memcpy>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	6126      	str	r6, [r4, #16]
 80080d2:	6165      	str	r5, [r4, #20]
 80080d4:	444e      	add	r6, r9
 80080d6:	eba5 0509 	sub.w	r5, r5, r9
 80080da:	6026      	str	r6, [r4, #0]
 80080dc:	60a5      	str	r5, [r4, #8]
 80080de:	463e      	mov	r6, r7
 80080e0:	42be      	cmp	r6, r7
 80080e2:	d900      	bls.n	80080e6 <__ssputs_r+0x72>
 80080e4:	463e      	mov	r6, r7
 80080e6:	6820      	ldr	r0, [r4, #0]
 80080e8:	4632      	mov	r2, r6
 80080ea:	4641      	mov	r1, r8
 80080ec:	f000 fb6a 	bl	80087c4 <memmove>
 80080f0:	68a3      	ldr	r3, [r4, #8]
 80080f2:	1b9b      	subs	r3, r3, r6
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	4433      	add	r3, r6
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	462a      	mov	r2, r5
 8008104:	f000 fbee 	bl	80088e4 <_realloc_r>
 8008108:	4606      	mov	r6, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	d1e0      	bne.n	80080d0 <__ssputs_r+0x5c>
 800810e:	6921      	ldr	r1, [r4, #16]
 8008110:	4650      	mov	r0, sl
 8008112:	f7ff fb35 	bl	8007780 <_free_r>
 8008116:	230c      	movs	r3, #12
 8008118:	f8ca 3000 	str.w	r3, [sl]
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008128:	e7e9      	b.n	80080fe <__ssputs_r+0x8a>
	...

0800812c <_svfiprintf_r>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	4698      	mov	r8, r3
 8008132:	898b      	ldrh	r3, [r1, #12]
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	b09d      	sub	sp, #116	@ 0x74
 8008138:	4607      	mov	r7, r0
 800813a:	460d      	mov	r5, r1
 800813c:	4614      	mov	r4, r2
 800813e:	d510      	bpl.n	8008162 <_svfiprintf_r+0x36>
 8008140:	690b      	ldr	r3, [r1, #16]
 8008142:	b973      	cbnz	r3, 8008162 <_svfiprintf_r+0x36>
 8008144:	2140      	movs	r1, #64	@ 0x40
 8008146:	f7ff fb8f 	bl	8007868 <_malloc_r>
 800814a:	6028      	str	r0, [r5, #0]
 800814c:	6128      	str	r0, [r5, #16]
 800814e:	b930      	cbnz	r0, 800815e <_svfiprintf_r+0x32>
 8008150:	230c      	movs	r3, #12
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008158:	b01d      	add	sp, #116	@ 0x74
 800815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815e:	2340      	movs	r3, #64	@ 0x40
 8008160:	616b      	str	r3, [r5, #20]
 8008162:	2300      	movs	r3, #0
 8008164:	9309      	str	r3, [sp, #36]	@ 0x24
 8008166:	2320      	movs	r3, #32
 8008168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800816c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008170:	2330      	movs	r3, #48	@ 0x30
 8008172:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008310 <_svfiprintf_r+0x1e4>
 8008176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800817a:	f04f 0901 	mov.w	r9, #1
 800817e:	4623      	mov	r3, r4
 8008180:	469a      	mov	sl, r3
 8008182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008186:	b10a      	cbz	r2, 800818c <_svfiprintf_r+0x60>
 8008188:	2a25      	cmp	r2, #37	@ 0x25
 800818a:	d1f9      	bne.n	8008180 <_svfiprintf_r+0x54>
 800818c:	ebba 0b04 	subs.w	fp, sl, r4
 8008190:	d00b      	beq.n	80081aa <_svfiprintf_r+0x7e>
 8008192:	465b      	mov	r3, fp
 8008194:	4622      	mov	r2, r4
 8008196:	4629      	mov	r1, r5
 8008198:	4638      	mov	r0, r7
 800819a:	f7ff ff6b 	bl	8008074 <__ssputs_r>
 800819e:	3001      	adds	r0, #1
 80081a0:	f000 80a7 	beq.w	80082f2 <_svfiprintf_r+0x1c6>
 80081a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081a6:	445a      	add	r2, fp
 80081a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 809f 	beq.w	80082f2 <_svfiprintf_r+0x1c6>
 80081b4:	2300      	movs	r3, #0
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081be:	f10a 0a01 	add.w	sl, sl, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	9307      	str	r3, [sp, #28]
 80081c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80081cc:	4654      	mov	r4, sl
 80081ce:	2205      	movs	r2, #5
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	484e      	ldr	r0, [pc, #312]	@ (8008310 <_svfiprintf_r+0x1e4>)
 80081d6:	f7f8 f803 	bl	80001e0 <memchr>
 80081da:	9a04      	ldr	r2, [sp, #16]
 80081dc:	b9d8      	cbnz	r0, 8008216 <_svfiprintf_r+0xea>
 80081de:	06d0      	lsls	r0, r2, #27
 80081e0:	bf44      	itt	mi
 80081e2:	2320      	movmi	r3, #32
 80081e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081e8:	0711      	lsls	r1, r2, #28
 80081ea:	bf44      	itt	mi
 80081ec:	232b      	movmi	r3, #43	@ 0x2b
 80081ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081f2:	f89a 3000 	ldrb.w	r3, [sl]
 80081f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f8:	d015      	beq.n	8008226 <_svfiprintf_r+0xfa>
 80081fa:	9a07      	ldr	r2, [sp, #28]
 80081fc:	4654      	mov	r4, sl
 80081fe:	2000      	movs	r0, #0
 8008200:	f04f 0c0a 	mov.w	ip, #10
 8008204:	4621      	mov	r1, r4
 8008206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800820a:	3b30      	subs	r3, #48	@ 0x30
 800820c:	2b09      	cmp	r3, #9
 800820e:	d94b      	bls.n	80082a8 <_svfiprintf_r+0x17c>
 8008210:	b1b0      	cbz	r0, 8008240 <_svfiprintf_r+0x114>
 8008212:	9207      	str	r2, [sp, #28]
 8008214:	e014      	b.n	8008240 <_svfiprintf_r+0x114>
 8008216:	eba0 0308 	sub.w	r3, r0, r8
 800821a:	fa09 f303 	lsl.w	r3, r9, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	46a2      	mov	sl, r4
 8008224:	e7d2      	b.n	80081cc <_svfiprintf_r+0xa0>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	1d19      	adds	r1, r3, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	9103      	str	r1, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfbb      	ittet	lt
 8008232:	425b      	neglt	r3, r3
 8008234:	f042 0202 	orrlt.w	r2, r2, #2
 8008238:	9307      	strge	r3, [sp, #28]
 800823a:	9307      	strlt	r3, [sp, #28]
 800823c:	bfb8      	it	lt
 800823e:	9204      	strlt	r2, [sp, #16]
 8008240:	7823      	ldrb	r3, [r4, #0]
 8008242:	2b2e      	cmp	r3, #46	@ 0x2e
 8008244:	d10a      	bne.n	800825c <_svfiprintf_r+0x130>
 8008246:	7863      	ldrb	r3, [r4, #1]
 8008248:	2b2a      	cmp	r3, #42	@ 0x2a
 800824a:	d132      	bne.n	80082b2 <_svfiprintf_r+0x186>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d1a      	adds	r2, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9203      	str	r2, [sp, #12]
 8008254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008258:	3402      	adds	r4, #2
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008320 <_svfiprintf_r+0x1f4>
 8008260:	7821      	ldrb	r1, [r4, #0]
 8008262:	2203      	movs	r2, #3
 8008264:	4650      	mov	r0, sl
 8008266:	f7f7 ffbb 	bl	80001e0 <memchr>
 800826a:	b138      	cbz	r0, 800827c <_svfiprintf_r+0x150>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	eba0 000a 	sub.w	r0, r0, sl
 8008272:	2240      	movs	r2, #64	@ 0x40
 8008274:	4082      	lsls	r2, r0
 8008276:	4313      	orrs	r3, r2
 8008278:	3401      	adds	r4, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	4824      	ldr	r0, [pc, #144]	@ (8008314 <_svfiprintf_r+0x1e8>)
 8008282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008286:	2206      	movs	r2, #6
 8008288:	f7f7 ffaa 	bl	80001e0 <memchr>
 800828c:	2800      	cmp	r0, #0
 800828e:	d036      	beq.n	80082fe <_svfiprintf_r+0x1d2>
 8008290:	4b21      	ldr	r3, [pc, #132]	@ (8008318 <_svfiprintf_r+0x1ec>)
 8008292:	bb1b      	cbnz	r3, 80082dc <_svfiprintf_r+0x1b0>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	3307      	adds	r3, #7
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	3308      	adds	r3, #8
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a2:	4433      	add	r3, r6
 80082a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082a6:	e76a      	b.n	800817e <_svfiprintf_r+0x52>
 80082a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ac:	460c      	mov	r4, r1
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7a8      	b.n	8008204 <_svfiprintf_r+0xd8>
 80082b2:	2300      	movs	r3, #0
 80082b4:	3401      	adds	r4, #1
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	4619      	mov	r1, r3
 80082ba:	f04f 0c0a 	mov.w	ip, #10
 80082be:	4620      	mov	r0, r4
 80082c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c4:	3a30      	subs	r2, #48	@ 0x30
 80082c6:	2a09      	cmp	r2, #9
 80082c8:	d903      	bls.n	80082d2 <_svfiprintf_r+0x1a6>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c6      	beq.n	800825c <_svfiprintf_r+0x130>
 80082ce:	9105      	str	r1, [sp, #20]
 80082d0:	e7c4      	b.n	800825c <_svfiprintf_r+0x130>
 80082d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d6:	4604      	mov	r4, r0
 80082d8:	2301      	movs	r3, #1
 80082da:	e7f0      	b.n	80082be <_svfiprintf_r+0x192>
 80082dc:	ab03      	add	r3, sp, #12
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	462a      	mov	r2, r5
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <_svfiprintf_r+0x1f0>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	4638      	mov	r0, r7
 80082e8:	f7fd fd4a 	bl	8005d80 <_printf_float>
 80082ec:	1c42      	adds	r2, r0, #1
 80082ee:	4606      	mov	r6, r0
 80082f0:	d1d6      	bne.n	80082a0 <_svfiprintf_r+0x174>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	065b      	lsls	r3, r3, #25
 80082f6:	f53f af2d 	bmi.w	8008154 <_svfiprintf_r+0x28>
 80082fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082fc:	e72c      	b.n	8008158 <_svfiprintf_r+0x2c>
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	462a      	mov	r2, r5
 8008304:	4b05      	ldr	r3, [pc, #20]	@ (800831c <_svfiprintf_r+0x1f0>)
 8008306:	a904      	add	r1, sp, #16
 8008308:	4638      	mov	r0, r7
 800830a:	f7fd ffd1 	bl	80062b0 <_printf_i>
 800830e:	e7ed      	b.n	80082ec <_svfiprintf_r+0x1c0>
 8008310:	08008cd2 	.word	0x08008cd2
 8008314:	08008cdc 	.word	0x08008cdc
 8008318:	08005d81 	.word	0x08005d81
 800831c:	08008075 	.word	0x08008075
 8008320:	08008cd8 	.word	0x08008cd8

08008324 <__sfputc_r>:
 8008324:	6893      	ldr	r3, [r2, #8]
 8008326:	3b01      	subs	r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	b410      	push	{r4}
 800832c:	6093      	str	r3, [r2, #8]
 800832e:	da08      	bge.n	8008342 <__sfputc_r+0x1e>
 8008330:	6994      	ldr	r4, [r2, #24]
 8008332:	42a3      	cmp	r3, r4
 8008334:	db01      	blt.n	800833a <__sfputc_r+0x16>
 8008336:	290a      	cmp	r1, #10
 8008338:	d103      	bne.n	8008342 <__sfputc_r+0x1e>
 800833a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833e:	f7fe baa2 	b.w	8006886 <__swbuf_r>
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	1c58      	adds	r0, r3, #1
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	7019      	strb	r1, [r3, #0]
 800834a:	4608      	mov	r0, r1
 800834c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008350:	4770      	bx	lr

08008352 <__sfputs_r>:
 8008352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	4614      	mov	r4, r2
 800835a:	18d5      	adds	r5, r2, r3
 800835c:	42ac      	cmp	r4, r5
 800835e:	d101      	bne.n	8008364 <__sfputs_r+0x12>
 8008360:	2000      	movs	r0, #0
 8008362:	e007      	b.n	8008374 <__sfputs_r+0x22>
 8008364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008368:	463a      	mov	r2, r7
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ffda 	bl	8008324 <__sfputc_r>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d1f3      	bne.n	800835c <__sfputs_r+0xa>
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008378 <_vfiprintf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	460d      	mov	r5, r1
 800837e:	b09d      	sub	sp, #116	@ 0x74
 8008380:	4614      	mov	r4, r2
 8008382:	4698      	mov	r8, r3
 8008384:	4606      	mov	r6, r0
 8008386:	b118      	cbz	r0, 8008390 <_vfiprintf_r+0x18>
 8008388:	6a03      	ldr	r3, [r0, #32]
 800838a:	b90b      	cbnz	r3, 8008390 <_vfiprintf_r+0x18>
 800838c:	f7fe f93a 	bl	8006604 <__sinit>
 8008390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008392:	07d9      	lsls	r1, r3, #31
 8008394:	d405      	bmi.n	80083a2 <_vfiprintf_r+0x2a>
 8008396:	89ab      	ldrh	r3, [r5, #12]
 8008398:	059a      	lsls	r2, r3, #22
 800839a:	d402      	bmi.n	80083a2 <_vfiprintf_r+0x2a>
 800839c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800839e:	f7fe fb84 	bl	8006aaa <__retarget_lock_acquire_recursive>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	071b      	lsls	r3, r3, #28
 80083a6:	d501      	bpl.n	80083ac <_vfiprintf_r+0x34>
 80083a8:	692b      	ldr	r3, [r5, #16]
 80083aa:	b99b      	cbnz	r3, 80083d4 <_vfiprintf_r+0x5c>
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7fe faa8 	bl	8006904 <__swsetup_r>
 80083b4:	b170      	cbz	r0, 80083d4 <_vfiprintf_r+0x5c>
 80083b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b8:	07dc      	lsls	r4, r3, #31
 80083ba:	d504      	bpl.n	80083c6 <_vfiprintf_r+0x4e>
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083c0:	b01d      	add	sp, #116	@ 0x74
 80083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	0598      	lsls	r0, r3, #22
 80083ca:	d4f7      	bmi.n	80083bc <_vfiprintf_r+0x44>
 80083cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ce:	f7fe fb6d 	bl	8006aac <__retarget_lock_release_recursive>
 80083d2:	e7f3      	b.n	80083bc <_vfiprintf_r+0x44>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d8:	2320      	movs	r3, #32
 80083da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083de:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e2:	2330      	movs	r3, #48	@ 0x30
 80083e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008594 <_vfiprintf_r+0x21c>
 80083e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083ec:	f04f 0901 	mov.w	r9, #1
 80083f0:	4623      	mov	r3, r4
 80083f2:	469a      	mov	sl, r3
 80083f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f8:	b10a      	cbz	r2, 80083fe <_vfiprintf_r+0x86>
 80083fa:	2a25      	cmp	r2, #37	@ 0x25
 80083fc:	d1f9      	bne.n	80083f2 <_vfiprintf_r+0x7a>
 80083fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008402:	d00b      	beq.n	800841c <_vfiprintf_r+0xa4>
 8008404:	465b      	mov	r3, fp
 8008406:	4622      	mov	r2, r4
 8008408:	4629      	mov	r1, r5
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff ffa1 	bl	8008352 <__sfputs_r>
 8008410:	3001      	adds	r0, #1
 8008412:	f000 80a7 	beq.w	8008564 <_vfiprintf_r+0x1ec>
 8008416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008418:	445a      	add	r2, fp
 800841a:	9209      	str	r2, [sp, #36]	@ 0x24
 800841c:	f89a 3000 	ldrb.w	r3, [sl]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 809f 	beq.w	8008564 <_vfiprintf_r+0x1ec>
 8008426:	2300      	movs	r3, #0
 8008428:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800842c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008430:	f10a 0a01 	add.w	sl, sl, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800843c:	931a      	str	r3, [sp, #104]	@ 0x68
 800843e:	4654      	mov	r4, sl
 8008440:	2205      	movs	r2, #5
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4853      	ldr	r0, [pc, #332]	@ (8008594 <_vfiprintf_r+0x21c>)
 8008448:	f7f7 feca 	bl	80001e0 <memchr>
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	b9d8      	cbnz	r0, 8008488 <_vfiprintf_r+0x110>
 8008450:	06d1      	lsls	r1, r2, #27
 8008452:	bf44      	itt	mi
 8008454:	2320      	movmi	r3, #32
 8008456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800845a:	0713      	lsls	r3, r2, #28
 800845c:	bf44      	itt	mi
 800845e:	232b      	movmi	r3, #43	@ 0x2b
 8008460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008464:	f89a 3000 	ldrb.w	r3, [sl]
 8008468:	2b2a      	cmp	r3, #42	@ 0x2a
 800846a:	d015      	beq.n	8008498 <_vfiprintf_r+0x120>
 800846c:	9a07      	ldr	r2, [sp, #28]
 800846e:	4654      	mov	r4, sl
 8008470:	2000      	movs	r0, #0
 8008472:	f04f 0c0a 	mov.w	ip, #10
 8008476:	4621      	mov	r1, r4
 8008478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847c:	3b30      	subs	r3, #48	@ 0x30
 800847e:	2b09      	cmp	r3, #9
 8008480:	d94b      	bls.n	800851a <_vfiprintf_r+0x1a2>
 8008482:	b1b0      	cbz	r0, 80084b2 <_vfiprintf_r+0x13a>
 8008484:	9207      	str	r2, [sp, #28]
 8008486:	e014      	b.n	80084b2 <_vfiprintf_r+0x13a>
 8008488:	eba0 0308 	sub.w	r3, r0, r8
 800848c:	fa09 f303 	lsl.w	r3, r9, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	46a2      	mov	sl, r4
 8008496:	e7d2      	b.n	800843e <_vfiprintf_r+0xc6>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d19      	adds	r1, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9103      	str	r1, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfbb      	ittet	lt
 80084a4:	425b      	neglt	r3, r3
 80084a6:	f042 0202 	orrlt.w	r2, r2, #2
 80084aa:	9307      	strge	r3, [sp, #28]
 80084ac:	9307      	strlt	r3, [sp, #28]
 80084ae:	bfb8      	it	lt
 80084b0:	9204      	strlt	r2, [sp, #16]
 80084b2:	7823      	ldrb	r3, [r4, #0]
 80084b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b6:	d10a      	bne.n	80084ce <_vfiprintf_r+0x156>
 80084b8:	7863      	ldrb	r3, [r4, #1]
 80084ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80084bc:	d132      	bne.n	8008524 <_vfiprintf_r+0x1ac>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9203      	str	r2, [sp, #12]
 80084c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ca:	3402      	adds	r4, #2
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085a4 <_vfiprintf_r+0x22c>
 80084d2:	7821      	ldrb	r1, [r4, #0]
 80084d4:	2203      	movs	r2, #3
 80084d6:	4650      	mov	r0, sl
 80084d8:	f7f7 fe82 	bl	80001e0 <memchr>
 80084dc:	b138      	cbz	r0, 80084ee <_vfiprintf_r+0x176>
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	eba0 000a 	sub.w	r0, r0, sl
 80084e4:	2240      	movs	r2, #64	@ 0x40
 80084e6:	4082      	lsls	r2, r0
 80084e8:	4313      	orrs	r3, r2
 80084ea:	3401      	adds	r4, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4829      	ldr	r0, [pc, #164]	@ (8008598 <_vfiprintf_r+0x220>)
 80084f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f8:	2206      	movs	r2, #6
 80084fa:	f7f7 fe71 	bl	80001e0 <memchr>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d03f      	beq.n	8008582 <_vfiprintf_r+0x20a>
 8008502:	4b26      	ldr	r3, [pc, #152]	@ (800859c <_vfiprintf_r+0x224>)
 8008504:	bb1b      	cbnz	r3, 800854e <_vfiprintf_r+0x1d6>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	3307      	adds	r3, #7
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	3308      	adds	r3, #8
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008514:	443b      	add	r3, r7
 8008516:	9309      	str	r3, [sp, #36]	@ 0x24
 8008518:	e76a      	b.n	80083f0 <_vfiprintf_r+0x78>
 800851a:	fb0c 3202 	mla	r2, ip, r2, r3
 800851e:	460c      	mov	r4, r1
 8008520:	2001      	movs	r0, #1
 8008522:	e7a8      	b.n	8008476 <_vfiprintf_r+0xfe>
 8008524:	2300      	movs	r3, #0
 8008526:	3401      	adds	r4, #1
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	4619      	mov	r1, r3
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	4620      	mov	r0, r4
 8008532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008536:	3a30      	subs	r2, #48	@ 0x30
 8008538:	2a09      	cmp	r2, #9
 800853a:	d903      	bls.n	8008544 <_vfiprintf_r+0x1cc>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0c6      	beq.n	80084ce <_vfiprintf_r+0x156>
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	e7c4      	b.n	80084ce <_vfiprintf_r+0x156>
 8008544:	fb0c 2101 	mla	r1, ip, r1, r2
 8008548:	4604      	mov	r4, r0
 800854a:	2301      	movs	r3, #1
 800854c:	e7f0      	b.n	8008530 <_vfiprintf_r+0x1b8>
 800854e:	ab03      	add	r3, sp, #12
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	462a      	mov	r2, r5
 8008554:	4b12      	ldr	r3, [pc, #72]	@ (80085a0 <_vfiprintf_r+0x228>)
 8008556:	a904      	add	r1, sp, #16
 8008558:	4630      	mov	r0, r6
 800855a:	f7fd fc11 	bl	8005d80 <_printf_float>
 800855e:	4607      	mov	r7, r0
 8008560:	1c78      	adds	r0, r7, #1
 8008562:	d1d6      	bne.n	8008512 <_vfiprintf_r+0x19a>
 8008564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	d405      	bmi.n	8008576 <_vfiprintf_r+0x1fe>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d402      	bmi.n	8008576 <_vfiprintf_r+0x1fe>
 8008570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008572:	f7fe fa9b 	bl	8006aac <__retarget_lock_release_recursive>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	065b      	lsls	r3, r3, #25
 800857a:	f53f af1f 	bmi.w	80083bc <_vfiprintf_r+0x44>
 800857e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008580:	e71e      	b.n	80083c0 <_vfiprintf_r+0x48>
 8008582:	ab03      	add	r3, sp, #12
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	462a      	mov	r2, r5
 8008588:	4b05      	ldr	r3, [pc, #20]	@ (80085a0 <_vfiprintf_r+0x228>)
 800858a:	a904      	add	r1, sp, #16
 800858c:	4630      	mov	r0, r6
 800858e:	f7fd fe8f 	bl	80062b0 <_printf_i>
 8008592:	e7e4      	b.n	800855e <_vfiprintf_r+0x1e6>
 8008594:	08008cd2 	.word	0x08008cd2
 8008598:	08008cdc 	.word	0x08008cdc
 800859c:	08005d81 	.word	0x08005d81
 80085a0:	08008353 	.word	0x08008353
 80085a4:	08008cd8 	.word	0x08008cd8

080085a8 <__sflush_r>:
 80085a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b0:	0716      	lsls	r6, r2, #28
 80085b2:	4605      	mov	r5, r0
 80085b4:	460c      	mov	r4, r1
 80085b6:	d454      	bmi.n	8008662 <__sflush_r+0xba>
 80085b8:	684b      	ldr	r3, [r1, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dc02      	bgt.n	80085c4 <__sflush_r+0x1c>
 80085be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dd48      	ble.n	8008656 <__sflush_r+0xae>
 80085c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d045      	beq.n	8008656 <__sflush_r+0xae>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085d0:	682f      	ldr	r7, [r5, #0]
 80085d2:	6a21      	ldr	r1, [r4, #32]
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	d030      	beq.n	800863a <__sflush_r+0x92>
 80085d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	0759      	lsls	r1, r3, #29
 80085de:	d505      	bpl.n	80085ec <__sflush_r+0x44>
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	1ad2      	subs	r2, r2, r3
 80085e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085e6:	b10b      	cbz	r3, 80085ec <__sflush_r+0x44>
 80085e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085f0:	6a21      	ldr	r1, [r4, #32]
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b0      	blx	r6
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	d106      	bne.n	800860a <__sflush_r+0x62>
 80085fc:	6829      	ldr	r1, [r5, #0]
 80085fe:	291d      	cmp	r1, #29
 8008600:	d82b      	bhi.n	800865a <__sflush_r+0xb2>
 8008602:	4a2a      	ldr	r2, [pc, #168]	@ (80086ac <__sflush_r+0x104>)
 8008604:	40ca      	lsrs	r2, r1
 8008606:	07d6      	lsls	r6, r2, #31
 8008608:	d527      	bpl.n	800865a <__sflush_r+0xb2>
 800860a:	2200      	movs	r2, #0
 800860c:	6062      	str	r2, [r4, #4]
 800860e:	04d9      	lsls	r1, r3, #19
 8008610:	6922      	ldr	r2, [r4, #16]
 8008612:	6022      	str	r2, [r4, #0]
 8008614:	d504      	bpl.n	8008620 <__sflush_r+0x78>
 8008616:	1c42      	adds	r2, r0, #1
 8008618:	d101      	bne.n	800861e <__sflush_r+0x76>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b903      	cbnz	r3, 8008620 <__sflush_r+0x78>
 800861e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008622:	602f      	str	r7, [r5, #0]
 8008624:	b1b9      	cbz	r1, 8008656 <__sflush_r+0xae>
 8008626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800862a:	4299      	cmp	r1, r3
 800862c:	d002      	beq.n	8008634 <__sflush_r+0x8c>
 800862e:	4628      	mov	r0, r5
 8008630:	f7ff f8a6 	bl	8007780 <_free_r>
 8008634:	2300      	movs	r3, #0
 8008636:	6363      	str	r3, [r4, #52]	@ 0x34
 8008638:	e00d      	b.n	8008656 <__sflush_r+0xae>
 800863a:	2301      	movs	r3, #1
 800863c:	4628      	mov	r0, r5
 800863e:	47b0      	blx	r6
 8008640:	4602      	mov	r2, r0
 8008642:	1c50      	adds	r0, r2, #1
 8008644:	d1c9      	bne.n	80085da <__sflush_r+0x32>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0c6      	beq.n	80085da <__sflush_r+0x32>
 800864c:	2b1d      	cmp	r3, #29
 800864e:	d001      	beq.n	8008654 <__sflush_r+0xac>
 8008650:	2b16      	cmp	r3, #22
 8008652:	d11e      	bne.n	8008692 <__sflush_r+0xea>
 8008654:	602f      	str	r7, [r5, #0]
 8008656:	2000      	movs	r0, #0
 8008658:	e022      	b.n	80086a0 <__sflush_r+0xf8>
 800865a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865e:	b21b      	sxth	r3, r3
 8008660:	e01b      	b.n	800869a <__sflush_r+0xf2>
 8008662:	690f      	ldr	r7, [r1, #16]
 8008664:	2f00      	cmp	r7, #0
 8008666:	d0f6      	beq.n	8008656 <__sflush_r+0xae>
 8008668:	0793      	lsls	r3, r2, #30
 800866a:	680e      	ldr	r6, [r1, #0]
 800866c:	bf08      	it	eq
 800866e:	694b      	ldreq	r3, [r1, #20]
 8008670:	600f      	str	r7, [r1, #0]
 8008672:	bf18      	it	ne
 8008674:	2300      	movne	r3, #0
 8008676:	eba6 0807 	sub.w	r8, r6, r7
 800867a:	608b      	str	r3, [r1, #8]
 800867c:	f1b8 0f00 	cmp.w	r8, #0
 8008680:	dde9      	ble.n	8008656 <__sflush_r+0xae>
 8008682:	6a21      	ldr	r1, [r4, #32]
 8008684:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008686:	4643      	mov	r3, r8
 8008688:	463a      	mov	r2, r7
 800868a:	4628      	mov	r0, r5
 800868c:	47b0      	blx	r6
 800868e:	2800      	cmp	r0, #0
 8008690:	dc08      	bgt.n	80086a4 <__sflush_r+0xfc>
 8008692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	4407      	add	r7, r0
 80086a6:	eba8 0800 	sub.w	r8, r8, r0
 80086aa:	e7e7      	b.n	800867c <__sflush_r+0xd4>
 80086ac:	20400001 	.word	0x20400001

080086b0 <_fflush_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	690b      	ldr	r3, [r1, #16]
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b913      	cbnz	r3, 80086c0 <_fflush_r+0x10>
 80086ba:	2500      	movs	r5, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	b118      	cbz	r0, 80086ca <_fflush_r+0x1a>
 80086c2:	6a03      	ldr	r3, [r0, #32]
 80086c4:	b90b      	cbnz	r3, 80086ca <_fflush_r+0x1a>
 80086c6:	f7fd ff9d 	bl	8006604 <__sinit>
 80086ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f3      	beq.n	80086ba <_fflush_r+0xa>
 80086d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086d4:	07d0      	lsls	r0, r2, #31
 80086d6:	d404      	bmi.n	80086e2 <_fflush_r+0x32>
 80086d8:	0599      	lsls	r1, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_fflush_r+0x32>
 80086dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086de:	f7fe f9e4 	bl	8006aaa <__retarget_lock_acquire_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	4621      	mov	r1, r4
 80086e6:	f7ff ff5f 	bl	80085a8 <__sflush_r>
 80086ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ec:	07da      	lsls	r2, r3, #31
 80086ee:	4605      	mov	r5, r0
 80086f0:	d4e4      	bmi.n	80086bc <_fflush_r+0xc>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	059b      	lsls	r3, r3, #22
 80086f6:	d4e1      	bmi.n	80086bc <_fflush_r+0xc>
 80086f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086fa:	f7fe f9d7 	bl	8006aac <__retarget_lock_release_recursive>
 80086fe:	e7dd      	b.n	80086bc <_fflush_r+0xc>

08008700 <__swhatbuf_r>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	460c      	mov	r4, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	2900      	cmp	r1, #0
 800870a:	b096      	sub	sp, #88	@ 0x58
 800870c:	4615      	mov	r5, r2
 800870e:	461e      	mov	r6, r3
 8008710:	da0d      	bge.n	800872e <__swhatbuf_r+0x2e>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008718:	f04f 0100 	mov.w	r1, #0
 800871c:	bf14      	ite	ne
 800871e:	2340      	movne	r3, #64	@ 0x40
 8008720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008724:	2000      	movs	r0, #0
 8008726:	6031      	str	r1, [r6, #0]
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	b016      	add	sp, #88	@ 0x58
 800872c:	bd70      	pop	{r4, r5, r6, pc}
 800872e:	466a      	mov	r2, sp
 8008730:	f000 f862 	bl	80087f8 <_fstat_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	dbec      	blt.n	8008712 <__swhatbuf_r+0x12>
 8008738:	9901      	ldr	r1, [sp, #4]
 800873a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800873e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008742:	4259      	negs	r1, r3
 8008744:	4159      	adcs	r1, r3
 8008746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800874a:	e7eb      	b.n	8008724 <__swhatbuf_r+0x24>

0800874c <__smakebuf_r>:
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008750:	079d      	lsls	r5, r3, #30
 8008752:	4606      	mov	r6, r0
 8008754:	460c      	mov	r4, r1
 8008756:	d507      	bpl.n	8008768 <__smakebuf_r+0x1c>
 8008758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2301      	movs	r3, #1
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	b003      	add	sp, #12
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008768:	ab01      	add	r3, sp, #4
 800876a:	466a      	mov	r2, sp
 800876c:	f7ff ffc8 	bl	8008700 <__swhatbuf_r>
 8008770:	9f00      	ldr	r7, [sp, #0]
 8008772:	4605      	mov	r5, r0
 8008774:	4639      	mov	r1, r7
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff f876 	bl	8007868 <_malloc_r>
 800877c:	b948      	cbnz	r0, 8008792 <__smakebuf_r+0x46>
 800877e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008782:	059a      	lsls	r2, r3, #22
 8008784:	d4ee      	bmi.n	8008764 <__smakebuf_r+0x18>
 8008786:	f023 0303 	bic.w	r3, r3, #3
 800878a:	f043 0302 	orr.w	r3, r3, #2
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	e7e2      	b.n	8008758 <__smakebuf_r+0xc>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	6020      	str	r0, [r4, #0]
 8008796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087a2:	b15b      	cbz	r3, 80087bc <__smakebuf_r+0x70>
 80087a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 f837 	bl	800881c <_isatty_r>
 80087ae:	b128      	cbz	r0, 80087bc <__smakebuf_r+0x70>
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	f023 0303 	bic.w	r3, r3, #3
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	431d      	orrs	r5, r3
 80087c0:	81a5      	strh	r5, [r4, #12]
 80087c2:	e7cf      	b.n	8008764 <__smakebuf_r+0x18>

080087c4 <memmove>:
 80087c4:	4288      	cmp	r0, r1
 80087c6:	b510      	push	{r4, lr}
 80087c8:	eb01 0402 	add.w	r4, r1, r2
 80087cc:	d902      	bls.n	80087d4 <memmove+0x10>
 80087ce:	4284      	cmp	r4, r0
 80087d0:	4623      	mov	r3, r4
 80087d2:	d807      	bhi.n	80087e4 <memmove+0x20>
 80087d4:	1e43      	subs	r3, r0, #1
 80087d6:	42a1      	cmp	r1, r4
 80087d8:	d008      	beq.n	80087ec <memmove+0x28>
 80087da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087e2:	e7f8      	b.n	80087d6 <memmove+0x12>
 80087e4:	4402      	add	r2, r0
 80087e6:	4601      	mov	r1, r0
 80087e8:	428a      	cmp	r2, r1
 80087ea:	d100      	bne.n	80087ee <memmove+0x2a>
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087f6:	e7f7      	b.n	80087e8 <memmove+0x24>

080087f8 <_fstat_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	@ (8008818 <_fstat_r+0x20>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	f7f9 fe25 	bl	8002454 <_fstat>
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	d102      	bne.n	8008814 <_fstat_r+0x1c>
 800880e:	682b      	ldr	r3, [r5, #0]
 8008810:	b103      	cbz	r3, 8008814 <_fstat_r+0x1c>
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	bf00      	nop
 8008818:	20000430 	.word	0x20000430

0800881c <_isatty_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d06      	ldr	r5, [pc, #24]	@ (8008838 <_isatty_r+0x1c>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	f7f9 fe24 	bl	8002474 <_isatty>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_isatty_r+0x1a>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_isatty_r+0x1a>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000430 	.word	0x20000430

0800883c <_sbrk_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_sbrk_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f9 fe2c 	bl	80024a4 <_sbrk>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_sbrk_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_sbrk_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000430 	.word	0x20000430

0800885c <__assert_func>:
 800885c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800885e:	4614      	mov	r4, r2
 8008860:	461a      	mov	r2, r3
 8008862:	4b09      	ldr	r3, [pc, #36]	@ (8008888 <__assert_func+0x2c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4605      	mov	r5, r0
 8008868:	68d8      	ldr	r0, [r3, #12]
 800886a:	b14c      	cbz	r4, 8008880 <__assert_func+0x24>
 800886c:	4b07      	ldr	r3, [pc, #28]	@ (800888c <__assert_func+0x30>)
 800886e:	9100      	str	r1, [sp, #0]
 8008870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008874:	4906      	ldr	r1, [pc, #24]	@ (8008890 <__assert_func+0x34>)
 8008876:	462b      	mov	r3, r5
 8008878:	f000 f870 	bl	800895c <fiprintf>
 800887c:	f000 f880 	bl	8008980 <abort>
 8008880:	4b04      	ldr	r3, [pc, #16]	@ (8008894 <__assert_func+0x38>)
 8008882:	461c      	mov	r4, r3
 8008884:	e7f3      	b.n	800886e <__assert_func+0x12>
 8008886:	bf00      	nop
 8008888:	20000018 	.word	0x20000018
 800888c:	08008ced 	.word	0x08008ced
 8008890:	08008cfa 	.word	0x08008cfa
 8008894:	08008d28 	.word	0x08008d28

08008898 <_calloc_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	fba1 5402 	umull	r5, r4, r1, r2
 800889e:	b934      	cbnz	r4, 80088ae <_calloc_r+0x16>
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7fe ffe1 	bl	8007868 <_malloc_r>
 80088a6:	4606      	mov	r6, r0
 80088a8:	b928      	cbnz	r0, 80088b6 <_calloc_r+0x1e>
 80088aa:	4630      	mov	r0, r6
 80088ac:	bd70      	pop	{r4, r5, r6, pc}
 80088ae:	220c      	movs	r2, #12
 80088b0:	6002      	str	r2, [r0, #0]
 80088b2:	2600      	movs	r6, #0
 80088b4:	e7f9      	b.n	80088aa <_calloc_r+0x12>
 80088b6:	462a      	mov	r2, r5
 80088b8:	4621      	mov	r1, r4
 80088ba:	f7fe f879 	bl	80069b0 <memset>
 80088be:	e7f4      	b.n	80088aa <_calloc_r+0x12>

080088c0 <__ascii_mbtowc>:
 80088c0:	b082      	sub	sp, #8
 80088c2:	b901      	cbnz	r1, 80088c6 <__ascii_mbtowc+0x6>
 80088c4:	a901      	add	r1, sp, #4
 80088c6:	b142      	cbz	r2, 80088da <__ascii_mbtowc+0x1a>
 80088c8:	b14b      	cbz	r3, 80088de <__ascii_mbtowc+0x1e>
 80088ca:	7813      	ldrb	r3, [r2, #0]
 80088cc:	600b      	str	r3, [r1, #0]
 80088ce:	7812      	ldrb	r2, [r2, #0]
 80088d0:	1e10      	subs	r0, r2, #0
 80088d2:	bf18      	it	ne
 80088d4:	2001      	movne	r0, #1
 80088d6:	b002      	add	sp, #8
 80088d8:	4770      	bx	lr
 80088da:	4610      	mov	r0, r2
 80088dc:	e7fb      	b.n	80088d6 <__ascii_mbtowc+0x16>
 80088de:	f06f 0001 	mvn.w	r0, #1
 80088e2:	e7f8      	b.n	80088d6 <__ascii_mbtowc+0x16>

080088e4 <_realloc_r>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	4607      	mov	r7, r0
 80088ea:	4614      	mov	r4, r2
 80088ec:	460d      	mov	r5, r1
 80088ee:	b921      	cbnz	r1, 80088fa <_realloc_r+0x16>
 80088f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	4611      	mov	r1, r2
 80088f6:	f7fe bfb7 	b.w	8007868 <_malloc_r>
 80088fa:	b92a      	cbnz	r2, 8008908 <_realloc_r+0x24>
 80088fc:	f7fe ff40 	bl	8007780 <_free_r>
 8008900:	4625      	mov	r5, r4
 8008902:	4628      	mov	r0, r5
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	f000 f841 	bl	800898e <_malloc_usable_size_r>
 800890c:	4284      	cmp	r4, r0
 800890e:	4606      	mov	r6, r0
 8008910:	d802      	bhi.n	8008918 <_realloc_r+0x34>
 8008912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008916:	d8f4      	bhi.n	8008902 <_realloc_r+0x1e>
 8008918:	4621      	mov	r1, r4
 800891a:	4638      	mov	r0, r7
 800891c:	f7fe ffa4 	bl	8007868 <_malloc_r>
 8008920:	4680      	mov	r8, r0
 8008922:	b908      	cbnz	r0, 8008928 <_realloc_r+0x44>
 8008924:	4645      	mov	r5, r8
 8008926:	e7ec      	b.n	8008902 <_realloc_r+0x1e>
 8008928:	42b4      	cmp	r4, r6
 800892a:	4622      	mov	r2, r4
 800892c:	4629      	mov	r1, r5
 800892e:	bf28      	it	cs
 8008930:	4632      	movcs	r2, r6
 8008932:	f7fe f8bc 	bl	8006aae <memcpy>
 8008936:	4629      	mov	r1, r5
 8008938:	4638      	mov	r0, r7
 800893a:	f7fe ff21 	bl	8007780 <_free_r>
 800893e:	e7f1      	b.n	8008924 <_realloc_r+0x40>

08008940 <__ascii_wctomb>:
 8008940:	4603      	mov	r3, r0
 8008942:	4608      	mov	r0, r1
 8008944:	b141      	cbz	r1, 8008958 <__ascii_wctomb+0x18>
 8008946:	2aff      	cmp	r2, #255	@ 0xff
 8008948:	d904      	bls.n	8008954 <__ascii_wctomb+0x14>
 800894a:	228a      	movs	r2, #138	@ 0x8a
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008952:	4770      	bx	lr
 8008954:	700a      	strb	r2, [r1, #0]
 8008956:	2001      	movs	r0, #1
 8008958:	4770      	bx	lr
	...

0800895c <fiprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b503      	push	{r0, r1, lr}
 8008960:	4601      	mov	r1, r0
 8008962:	ab03      	add	r3, sp, #12
 8008964:	4805      	ldr	r0, [pc, #20]	@ (800897c <fiprintf+0x20>)
 8008966:	f853 2b04 	ldr.w	r2, [r3], #4
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f7ff fd03 	bl	8008378 <_vfiprintf_r>
 8008972:	b002      	add	sp, #8
 8008974:	f85d eb04 	ldr.w	lr, [sp], #4
 8008978:	b003      	add	sp, #12
 800897a:	4770      	bx	lr
 800897c:	20000018 	.word	0x20000018

08008980 <abort>:
 8008980:	b508      	push	{r3, lr}
 8008982:	2006      	movs	r0, #6
 8008984:	f000 f834 	bl	80089f0 <raise>
 8008988:	2001      	movs	r0, #1
 800898a:	f7f9 fd13 	bl	80023b4 <_exit>

0800898e <_malloc_usable_size_r>:
 800898e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008992:	1f18      	subs	r0, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfbc      	itt	lt
 8008998:	580b      	ldrlt	r3, [r1, r0]
 800899a:	18c0      	addlt	r0, r0, r3
 800899c:	4770      	bx	lr

0800899e <_raise_r>:
 800899e:	291f      	cmp	r1, #31
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	d904      	bls.n	80089b2 <_raise_r+0x14>
 80089a8:	2316      	movs	r3, #22
 80089aa:	6003      	str	r3, [r0, #0]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089b4:	b112      	cbz	r2, 80089bc <_raise_r+0x1e>
 80089b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ba:	b94b      	cbnz	r3, 80089d0 <_raise_r+0x32>
 80089bc:	4628      	mov	r0, r5
 80089be:	f000 f831 	bl	8008a24 <_getpid_r>
 80089c2:	4622      	mov	r2, r4
 80089c4:	4601      	mov	r1, r0
 80089c6:	4628      	mov	r0, r5
 80089c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089cc:	f000 b818 	b.w	8008a00 <_kill_r>
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d00a      	beq.n	80089ea <_raise_r+0x4c>
 80089d4:	1c59      	adds	r1, r3, #1
 80089d6:	d103      	bne.n	80089e0 <_raise_r+0x42>
 80089d8:	2316      	movs	r3, #22
 80089da:	6003      	str	r3, [r0, #0]
 80089dc:	2001      	movs	r0, #1
 80089de:	e7e7      	b.n	80089b0 <_raise_r+0x12>
 80089e0:	2100      	movs	r1, #0
 80089e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089e6:	4620      	mov	r0, r4
 80089e8:	4798      	blx	r3
 80089ea:	2000      	movs	r0, #0
 80089ec:	e7e0      	b.n	80089b0 <_raise_r+0x12>
	...

080089f0 <raise>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	@ (80089fc <raise+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f7ff bfd2 	b.w	800899e <_raise_r>
 80089fa:	bf00      	nop
 80089fc:	20000018 	.word	0x20000018

08008a00 <_kill_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	@ (8008a20 <_kill_r+0x20>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	f7f9 fcc1 	bl	8002394 <_kill>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d102      	bne.n	8008a1c <_kill_r+0x1c>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b103      	cbz	r3, 8008a1c <_kill_r+0x1c>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000430 	.word	0x20000430

08008a24 <_getpid_r>:
 8008a24:	f7f9 bcae 	b.w	8002384 <_getpid>

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
